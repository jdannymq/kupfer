package org.domain.sck.session.action;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Serializable;
import java.math.BigDecimal;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.persistence.EntityManager;
import javax.persistence.NoResultException;

import modelo.SapSystem;

import org.domain.sck.base.GlobalHitosLogdService;
import org.domain.sck.dto.BotonesDTO;
import org.domain.sck.dto.CPagoDTO;
import org.domain.sck.dto.CabeceraCotPedDTO;
import org.domain.sck.dto.ClienteDTO;
import org.domain.sck.dto.ClsRiesgoDTO;
import org.domain.sck.dto.CompComercialDTO;
import org.domain.sck.dto.ConceptoDTO;
import org.domain.sck.dto.ConceptoMontoDTO;
import org.domain.sck.dto.CotPedDTO;
import org.domain.sck.dto.CreacionDmDTO;
import org.domain.sck.dto.DestinatarioDTO;
import org.domain.sck.dto.DetalleCotPedDTO;
import org.domain.sck.dto.DocumentoProrrogaDTO;
import org.domain.sck.dto.ExpoRiesgoKhDTO;
import org.domain.sck.dto.FileUploadedDTO;
import org.domain.sck.dto.ProrrogaDTO;
import org.domain.sck.dto.SolicitudAntiguaDTO;
import org.domain.sck.dto.SolicitudDTO;
import org.domain.sck.dto.UsuarioCorreoDTO;
import org.domain.sck.dto.UsuarioSegurDTO;
import org.domain.sck.entity.ArchivoAdjunto;
import org.domain.sck.entity.Attachment;
import org.domain.sck.entity.CanalUsuarioCargo;
import org.domain.sck.entity.ConceptosNegocio;
import org.domain.sck.entity.CotizacionPedido;
import org.domain.sck.entity.CotizacionPedidoCabecera;
import org.domain.sck.entity.CotizacionPedidoConcepto;
import org.domain.sck.entity.CotizacionPedidoNegocio;
import org.domain.sck.entity.DetalleCp;
import org.domain.sck.entity.DeudaActual;
import org.domain.sck.entity.Estados;
import org.domain.sck.entity.LcredArchivoAdjuntos;
import org.domain.sck.entity.LcredCargos;
import org.domain.sck.entity.LcredEstado;
import org.domain.sck.entity.LcredMotivoRechazo;
import org.domain.sck.entity.LcredSolicitud;
import org.domain.sck.entity.LcredSolicitudBloqueos;
import org.domain.sck.entity.LcredSolicitudCondiciones;
import org.domain.sck.entity.LcredSolicitudDm;
import org.domain.sck.entity.LcredSolicitudLcredito;
import org.domain.sck.entity.LcredSolicitudObservaciones;
import org.domain.sck.entity.LcredSolicitudObservacionesId;
import org.domain.sck.entity.LcredSolicitudOtras;
import org.domain.sck.entity.LcredSolicitudProrroga;
import org.domain.sck.entity.LcredSolicitudVtapuntual;
import org.domain.sck.entity.LcredTipoSolicitud;
import org.domain.sck.entity.LcredUsuarioNivelEnc;
import org.domain.sck.entity.PerfilFuncionCanal;
import org.domain.sck.entity.SolicitudAprobaRechaza;
import org.domain.sck.entity.SolicitudConceptosNegocioLC;
import org.domain.sck.entity.SolicitudHitos;
import org.domain.sck.entity.SolicitudLogs;
import org.domain.sck.entity.SolicitudMotivoRechazo;
import org.domain.sck.entity.SolicitudUsuarioCorreo;
import org.domain.sck.entity.SolicitudUsuarioDerivada;
import org.domain.sck.entity.Sucursal;
import org.domain.sck.entity.UsuarioCargo;
import org.domain.sck.entity.Usuariosegur;
import org.domain.sck.entity.ZonaSucursalNegocioConcepto;
import org.domain.sck.entity.emuns.ArchivoAdjuntoType;
import org.domain.sck.entity.emuns.FuncionesType;
import org.domain.sck.entity.emuns.TipoCuentasKupferType;
import org.domain.sck.entity.emuns.TipoSolicitudType;
import org.domain.sck.seam.GlobalParameters;
import org.domain.sck.session.home.ContenidoEmailSolicitudDTO;
import org.domain.sck.session.home.EmailAlertaContactoMensajeHelper;
import org.domain.sck.session.service.intranetsap.IntranetSapService;
import org.domain.sck.session.service.scoring.ScoringService;
import org.jboss.seam.ScopeType;
import org.jboss.seam.annotations.Create;
import org.jboss.seam.annotations.In;
import org.jboss.seam.annotations.Logger;
import org.jboss.seam.annotations.Name;
import org.jboss.seam.annotations.Scope;
import org.jboss.seam.annotations.intercept.BypassInterceptors;
import org.jboss.seam.annotations.web.RequestParameter;
import org.jboss.seam.faces.FacesMessages;
import org.jboss.seam.international.StatusMessage.Severity;
import org.jboss.seam.log.Log;
import org.jboss.wsf.common.IOUtils;
import org.richfaces.model.UploadItem;

import com.sap.conn.jco.JCoFunction;
import com.sap.conn.jco.JCoTable;

import conexion.Connect;

@Name("respuestaSolicitudAction")
@Scope(ScopeType.CONVERSATION)
public class RespuestaSolicitudAction implements Serializable{
	

	@Logger
	Log log;

	@In(value="#{entityManager}")
	EntityManager entityManager;
	
	@SuppressWarnings("el-unresolved")
	@In(value="#{identity.usuarioLogueado}", scope = ScopeType.SESSION)
	private Usuariosegur usuarioLogueado;
	
	@In(value="#{identity.lcredUsuarioNivelEnc}", scope = ScopeType.SESSION)
	private LcredUsuarioNivelEnc lcredUsuarioNivelEnc;
	
	@In(value="#{identity.usuarioSegur}", scope = ScopeType.SESSION)
	private UsuarioSegurDTO usuarioSegur;

	@In(value="#{identity.usuarioCargo}", scope = ScopeType.SESSION)
	private UsuarioCargo usuarioCargoLogueado;



	
	@In(value = "#{emailAlertaContactoMensajeHelper}")
	EmailAlertaContactoMensajeHelper emailAlerta;
	
	
	@In ScoringService scoringService;
	@In GlobalParameters globalParameters;
	@In IntranetSapService intranetSapService;
	@In GlobalHitosLogdService globalHitosLogdService;
	
	private LcredSolicitud solicitud;
	private Date fechaActual;
	private List<Sucursal> listaSucursales;
	private Sucursal sucursal;
	private ClienteDTO cliente;
	private CompComercialDTO comportamiento;
	private ExpoRiesgoKhDTO expoRiesgoKh;
	private LcredEstado lcredEstado;
	private Long solicitudSeleccionada;
	private String fechaDeauda;
	private Date fechaActualCtaCte;
	private LcredTipoSolicitud tipoSolicitudAux;
	private int paginaIngreso;
	private String tituloIngreso;
	private String paginaVolver;
    private List<String> listaFechas;
    private Long montoVtaPuntual;
    private Long pieVentaPuntual;
    private String  motivoCompra;
    private String observacionesCompra;
    private Double margenGlogal;
    private String productos;
    private String formaPago;
    private String observacionesFinales;
    private String normalCuota;
    private String innNomRiesgo; 
    private String innNomRiesgoNueva;
    private String observacionesModel;
	private String mensajeGlogal;
	private boolean salirDelMensaje;
	private String cPago;
	private String clsRiesgo;
	private String cPagoNuevo;
	private String clsRiesgoNuevo;
	private Long montoNuevo;
	private Long pieNuevo;
	private Long montoLineaCredito;
	private Long montoLineaCreditoNuevo;
	private String analisisAprobacion;
	private String aprobarRechazar;
	private String mensajeAnalisisAprobacion;
	private String mensajeRechazoSolicitud;
	private String mensajeAprobacionSolicitud;
	private UsuarioCargo usuarioCargoAux;
	private Long montoActualCuentaCorriente;
	private String tipoSolicitudCodigo;
	


	
	
	/*variables de Cr√©dito*/
	private String descripcionProyecto;
	private Long montoCredito;
	private String plazoEjecucion;
	private Long potencialCompra;
	private String conceptoNegocios;
	private String rutNombresSocios;
	private String observacionesCredito;
	private boolean condicionRiesgo;
	private boolean condicionPago;
	private boolean comboCRiesgo;
	private boolean comboCPago;
	private String motivoRiesgoPago;
	private boolean condicionRiesgoNew;
	private boolean condicionPagoNew;	
	private String opcionBloqueoDesbloqueo;
	private String motivoBloDesbloqueo;
	private String opcionBloqueoDesbloqueoNew;	
	private SolicitudUsuarioCorreo usuarioCorreo;
	private String mensajeExplicativo;
	private String motivoProrroga;
	private LcredMotivoRechazo motivoRechazo;
	private boolean modificarVenta;
	private boolean modificarCredito;
	private boolean modificarCondicion;
	private boolean modificarbloqueoToDesbloqueo;
	private boolean modificarCreacionDM;
	private boolean modificarProrroga;
	private String modalAnalista;
    private LcredSolicitudVtapuntual venta = null;
    private LcredSolicitudLcredito credito = null;
    private LcredSolicitudCondiciones condicion = null;
    private LcredSolicitudBloqueos bloqueo = null;
    private List<LcredSolicitudDm>  listaDms = null;
    private List<LcredSolicitudProrroga> listaProrrogas = null;
    private LcredSolicitudOtras solicitudOtra = null;
    private List<ConceptoDTO> listaArchivoGuardado = null;
    private List<ConceptoDTO> listaArchivoRespuestaCorreo = null;
    private List<LcredSolicitudObservaciones> listaObservaciones = null;
	private List<FileUploadedDTO> listaFileUploadedDTOs = new ArrayList<FileUploadedDTO>(0);
    private List<CPagoDTO> listaCondicionPagos;
    private List<ClsRiesgoDTO> listaClsRiesgos;
    private List<String> listaStringClsRiesgos;
    private List<String> listaStringCdnPagos;
    private List<String> listaStringClsRiesgosNuevos;
    private List<String> listaStringCdnPagosNuevos;	
    private List<DestinatarioDTO> listaDestinatarios; 
	private List<SolicitudUsuarioCorreo> listaUsuarioCorreoagregados = new ArrayList<SolicitudUsuarioCorreo>(0);
	private List<SolicitudUsuarioCorreo> listaUsuarioCorreoagregadosSel = new ArrayList<SolicitudUsuarioCorreo>(0);
	private List<SolicitudUsuarioCorreo> listaDescripcionUsuariosCorreos;
	private List<SolicitudUsuarioCorreo> listaUsuarioCorreos;
	private List<LcredSolicitudDm> listaClienteDMs;
	private List<SolicitudUsuarioCorreo> listaCorreoAnaDer = new ArrayList<SolicitudUsuarioCorreo>(0);
	private List<LcredMotivoRechazo> listaMotivosRechazos;
	private List<LcredMotivoRechazo> listaMotivosRechazosSeleccionado;
	private List<LcredMotivoRechazo> listaMotivosRechazosAgregados = new ArrayList<LcredMotivoRechazo>(0);
	private List<ConceptoMontoDTO> listaConceptosMontos;
	private List<UsuarioSegurDTO> listaUsuarioSegurDTO; 
	private List<LcredCargos> listaCargos;
	private BotonesDTO botonera;
	private boolean habilitarBotonAprobadoresInvolucrados;
	private long montoGeneralConceptoMonto;
	
	private UsuarioCargo usuarioCargo;
	private List<CanalUsuarioCargo> listaCanalUsuarioCargos;
	private List<PerfilFuncionCanal> listaPerfilFuncionCanals;
	private List<ZonaSucursalNegocioConcepto> listaZonaSucursalNegocioConceptos;
	private String tabGrilla;
    private List<CotPedDTO> listaCotPedDTOs;
	private Double montoTotal = (double) 0;
	private Double montoTotalNeto = (double) 0;
	private Double porcentajeGlobal;
	
	private List<SolicitudUsuarioCorreo> listaCorreoSeleccionado;
	private Boolean habilitaMensajeDerivacion;
	private Boolean habilitaMensajeAprobacion;
	private boolean habilitaEnvioAseguro;
	private String usuarioEmisor;
	
	/*variable de log y hitos*/
	private List<SolicitudHitos> listaHitos;
	private List<SolicitudLogs> listaLogs;
	private List<SolicitudUsuarioDerivada> listUsuariosDerivados;
	private LcredEstado estadoLogHitos;
	private LcredSolicitud solicitudLogHitos;
	
	private Boolean habilitaSoloAprobacion;
	
	private SolicitudHitos solicitudHitos;
	private List<DocumentoProrrogaDTO> listaDoctoProrrogaAgregados = new ArrayList<DocumentoProrrogaDTO>(0);
	
	private List<ConceptosNegocio> conceptosNegociosSessions;
	private List<SolicitudUsuarioCorreo> listaSolicitudUsuarioCorresSessions;
	
	private List<String> listaCodigoNegocio; 
	private List<String> listaCodigoConcepto; 
	private String tipoSolicitudCorreo;
	
	private SolicitudAntiguaDTO solicitudAntiguaDTO;
	private Boolean habilitacionesBotonAprobadorAntiguas;
	private String ubicacion;
	
	private List<LcredSolicitudObservaciones> listaObservacionesPdf;
	private List<SolicitudMotivoRechazo> listaMotivosRechazoPdf;
	private String negocioPdf;
	
	private String envioToNoEnvioCorreo;
	private boolean habilitacionEnvioCorreo;
	private boolean cambiarEnSap;
	
	private List<SolicitudMotivoRechazo> listaRechazosSolicitudesNuevas;
	private String observacionesFinalesModal;
	
	/*Variable para enviar correo si es administrador*/
	private Boolean wvarEnviaCorreo = false;
	private Boolean wvarActualizarSap = false;
	
	/*variables de derivadas*/
	private String estadoSolicitudAnalisisAprobacion;
	private String tituloObservacion;
	private String observacionesAutirzador;
	private Boolean habilitaBotonApruebaToRechazarAdmin;
	
	
	
	
    
	


	/*Funciones Sap*/
	private JCoFunction functionCtaCte;
	
	
	@RequestParameter("idSolicitud")
	Long idSolicitud;
	@RequestParameter("tipoSolicitud")
	String tipoSolicitud;
	@RequestParameter("pagina")
	String pagina;
	@RequestParameter("tab")
	String tab;

	@Create
	public void init(){
		log.debug("Inicia el componente de respuestaSolicitudAction");
		log.debug("finaliza el componente de respuestaSolicitudAction");		
	}

	public void ingresarPaginaPrincipal(){
		log.debug("Inicia el componente de respuestaSolicitudAction por el metodo ingresarPaginaPrincipal");
		boolean exito = false;
		
		try{
			if(idSolicitud != null){
				if(lcredUsuarioNivelEnc != null){
					listaCargos = scoringService.getListaCargos();
					if(usuarioSegur != null){
						usuarioCargo = scoringService.getUsuarioCargo(usuarioSegur.getIdPersonal());
						if(usuarioCargo != null){
							listaCanalUsuarioCargos = scoringService.getListaCanalUsuarioCargo(usuarioCargo.getIdUsuarioCargo());
							if(listaCanalUsuarioCargos != null){
								for(CanalUsuarioCargo cuc : listaCanalUsuarioCargos){
									listaPerfilFuncionCanals = scoringService.getListaPerfilFuncionCanal(cuc.getIdCanalUsuarioCargo(), listaPerfilFuncionCanals);
								}
							}
						}	
					}	
				}
				
				solicitud = (LcredSolicitud)entityManager.
						createQuery("select s from LcredSolicitud s where s.id.numSolicitud=:numSolicitud")
						.setParameter("numSolicitud", idSolicitud).getSingleResult();
				

				if(solicitud != null){
					if(usuarioCargoLogueado != null){
						this.usuarioCargoAux = scoringService.getUsuarioCargoModificable(usuarioSegur.getIdPersonal());
						log.debug(" estan ambos objetos cargados ...!!!");
						log.debug(usuarioCargoLogueado);
						log.debug(usuarioCargoAux);
					}else{
						log.debug("falta uno de los dos objetos cargados...!!!");
					}
					
					this.botonera = new BotonesDTO();
					
					if("Mixto".equals(solicitud.getCanal().trim())){
						validarBotonera(TipoCuentasKupferType.MX, solicitud);
					}else if("Kupfer Express".equals(solicitud.getCanal().trim())){
						validarBotonera(TipoCuentasKupferType.KX, solicitud);
					}else if("Grandes Cuentas".equals(solicitud.getCanal().trim())){
						validarBotonera(TipoCuentasKupferType.GC, solicitud);
					}
					//limpiar variaobles
					this.porcentajeGlobal = (double)0;
					this.montoTotalNeto = (double)0;
					this.montoTotal = (double)0;
					
					//solicitud.setUsuarioActual(usuarioSegur.getAlias());
					exito = true;//scoringService.mergerSolicitud(solicitud);
					if(solicitud != null && exito == true){
						if(pagina != null){
							setPaginaVolver(pagina);
						}
						
						if(solicitud.getId().getNumSolicitud().longValue() < 29348){
							this.setHabilitacionesBotonAprobadorAntiguas(true);
						}else{
							this.setHabilitacionesBotonAprobadorAntiguas(false);
						}
						
					   if("A".equals(solicitud.getEstado()) || "R".equals(solicitud.getEstado()) 
					   || "NU".equals(solicitud.getEstado()) || "NC".equals(solicitud.getEstado()) || "P".equals(solicitud.getEstado())){	
						   this.setHabilitarBotonAprobadoresInvolucrados(false);
						}else{
							/*desahabilitar el boton aprobadores involucrados*/
							this.setHabilitarBotonAprobadoresInvolucrados(true);
						}
						
						this.setConceptosNegociosSessions(scoringService.obtenerListaConceptoNegocio());
						this.setListaSolicitudUsuarioCorresSessions(scoringService.obtenerAllSolicitudUsuarioCorreo());
						setSolicitudSeleccionada(solicitud.getId().getNumSolicitud());
						cambioEvaluacionSolicitud(solicitud);
						insertarLogs(solicitud,1);
						evaludar(solicitud);
						setSolicitudLogHitos(solicitud);
					}
				}
			}


			log.debug("parametro de tab :#0 ", tab);
			if(tab != null && !"".equals(tab)){
				this.setTabGrilla(tab);
			}
			
			/*envio de correo */
			this.envioToNoEnvioCorreo = "Envio";
			this.habilitacionEnvioCorreo = true;
			
			
		}catch (Exception e) {
			log.error("Error, al sacar la solicitud seleccionada #0", e.getMessage());
		}
		log.debug("finaliza el componente de respuestaSolicitudAction del metodo ingresarPaginaPrincipal");		
			
		
		/*sacar los conceptos  de general*/
		obtenerListaConceptoNegocioMarca();
		
		
	}
	public void obtenerListaConceptoNegocioMarca(){
	try{
		List<ConceptosNegocio> listaConceptoNegocio = scoringService.obtenerListaConceptoNegocio();
		if(listaConceptoNegocio != null){
			listaConceptosMontos = new ArrayList<ConceptoMontoDTO>();
			ConceptoMontoDTO conceptoMonto = null;
			for(ConceptosNegocio cn : listaConceptoNegocio){
				conceptoMonto = new ConceptoMontoDTO();
				conceptoMonto.setNegocio(cn.getNegocio());
				conceptoMonto.setConcepto(cn.getConcepto());
				conceptoMonto.setDescripcion(cn.getDescripcion());
				conceptoMonto.setMarca("");
				conceptoMonto.setMonto(0);
				conceptoMonto.setJerarquia(cn.getJerarquia());
				listaConceptosMontos.add(conceptoMonto);
			}
			
			this.montoGeneralConceptoMonto = 0;
			
		}
	}catch (Exception e) {
		log.error("Error, al sacar lista de los conceptos #0", e.getMessage());
	}
  }	
 	@SuppressWarnings("unchecked")
	public void evaludar(LcredSolicitud solicitud){
		this.habilitaEnvioAseguro = true;
		try{
				if(solicitud != null){
					cliente = new ClienteDTO();
					sacarListas();
					log.debug("Sucursal:"+ solicitud.getSucursalEmisor());
					
					obtenerSucursal(solicitud.getSucursalEmisor());
					log.debug("codigo de emisor #0", solicitud.getCodEmisor());
					UsuarioSegurDTO user = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
					if(user != null){
						this.setUsuarioEmisor(user.getNombre());
					}else{
						this.setUsuarioEmisor(solicitud.getCodEmisor());
					}
					
					/*evaluar titulos*/
					if(solicitud.getEstadoEvaluacion() == null){
						this.setTituloObservacion("Observaciones");
					}else if(solicitud.getEstadoEvaluacion().equals("B")){
						this.setEstadoSolicitudAnalisisAprobacion(solicitud.getEstadoEvaluacion());
						this.setTituloObservacion("Observaciones de Analisis");
					}else if(solicitud.getEstadoEvaluacion().equals("SA")){
						this.setEstadoSolicitudAnalisisAprobacion(solicitud.getEstadoEvaluacion());
						this.setTituloObservacion("Observaciones de Aprobaci√≥n o Rechazo");
					}
					
					/*setear los datos de cliente*/
					cliente.setRut(solicitud.getRutCliente());
					cliente.setRazonSocial(solicitud.getNomCliente());
					cliente.setGiro(solicitud.getGiroCliente());
					cliente.setDireccion(solicitud.getDirCliente());
					cliente.setFono(solicitud.getTelCliente());
					cliente.setFax(solicitud.getFaxCliente());
					cliente.setComuna(solicitud.getComCliente());
					cliente.setCiudad(solicitud.getCiuCliente());
					Sucursal sucusarlcliente = scoringService.obtenerSucursalForCodigo(solicitud.getCodSucursal());
					if(sucusarlcliente != null){
						cliente.setSucursalCliente(sucusarlcliente.getDescripcion());
					}else{
						cliente.setSucursalCliente(solicitud.getCodSucursal());
					}
					
					cliente.setCanalVenta(solicitud.getCanal());
					cliente.setTipoCliente(solicitud.getTipoCliente());
					cliente.setLineaCreditoKH(solicitud.getLinCredito());
					cliente.setLineaCreditoKHUtilizado(solicitud.getLinCreditoUtiliz());
					cliente.setLineaCreditoKHDisponible(solicitud.getLinCreditoDisp());
					cliente.setEstadoLineaCreditoKH(solicitud.getEstadoLcKh());
					cliente.setNumeroRV(solicitud.getNroRv().toString());
					cliente.setSeguro(solicitud.getTipSeguro());
					cliente.setEstadoLineaEnCuotas(solicitud.getEstadoLcCuotas());
					cliente.setCodigoCondicionPago(solicitud.getConPago());
					cliente.setCodigoclasificacionRiesgo(solicitud.getClsRiesgo());
					cliente.setVentasTotal12Meses(solicitud.getVtaTotal12Meses());
					cliente.setCreacionSap(solicitud.getFechaCreacionCliente());	
					cliente.setDmVentasUno(solicitud.getDmVenta());
					cliente.setPrmFacturas(solicitud.getPrmFacturas());
					cliente.setCantMesesVentas(solicitud.getMesesVentas().longValue());
					cliente.setVentasProm12Meses(solicitud.getPrmVentas());
					cliente.setVigenciaSeguro(solicitud.getVigSeguro());
					cliente.setFactProm12Meses(solicitud.getPrmFacturas().longValue());
					
					lcredEstado = ObtenerEstadoSolictud(solicitud.getEstado());
					if(lcredEstado != null){
						cliente.setEstadoSolicitud(lcredEstado.getDesEstado());
						this.setModalAnalista(solicitud.getEstado());
					}else{
						cliente.setEstadoSolicitud(solicitud.getEstado());
					}
					
					cliente.setMontoSeguro(solicitud.getSeguroPesos());
					cliente.setMontoSeguroUf(solicitud.getSeguroUf().longValue());
					
					try{
						if(cliente.getCodigoCondicionPago()!=null){
							Object obj = intranetSapService.sacarDescripCondicionPago(cliente.getCodigoCondicionPago());
							if(obj != null){
								cliente.setCondicionPago(cliente.getCodigoCondicionPago() +"-"+obj.toString());
							}else{
								cliente.setCondicionPago("No Clasificado");
							}
						}else{cliente.setCondicionPago("No Clasificado");}
						
					}catch (Exception e) {
						cliente.setCondicionPago("No Clasificado");
					}

					try{
						if(cliente.getCodigoclasificacionRiesgo() != null){
							Object obj = intranetSapService.sacarDescripClasificacionRiesgo(cliente.getCodigoclasificacionRiesgo());
							if(obj != null){
								cliente.setClasificacionRiesgo(cliente.getCodigoclasificacionRiesgo() +"-"+ obj.toString());
							}else{
								cliente.setClasificacionRiesgo("No Clasificado");
							}
						}else{cliente.setClasificacionRiesgo("No Clasificado");}
						
					}catch (Exception e) {
						cliente.setClasificacionRiesgo("No Clasificado");
					}
					
					String codigoCanal = solicitud.getCanal();
					if(codigoCanal != null){
						String kx = TipoCuentasKupferType.KX.getNombre().trim();
						String gc = TipoCuentasKupferType.GC.getNombre().trim();
						String mx = TipoCuentasKupferType.MX.getNombre().trim();
						if(kx.equals(codigoCanal.trim())){
							cliente.setCodigoCanal(TipoCuentasKupferType.KX);
						}
						if(gc.equals(codigoCanal.trim())){
							cliente.setCodigoCanal(TipoCuentasKupferType.GC);
						}
						if(mx.equals(codigoCanal.trim())){
							cliente.setCodigoCanal(TipoCuentasKupferType.MX);
						}
					}
					
					
					/*setar los datos de comportamiento comercial*/
					comportamiento = new CompComercialDTO();
					comportamiento.setDiasMoras(solicitud.getDiasMora());
					comportamiento.setDmPort(solicitud.getDm());
					comportamiento.setMontoTotalMoro(solicitud.getMorosidadMonto().longValue());
					comportamiento.setMontoTotalProt(solicitud.getProtestosMonto().longValue());
					comportamiento.setNumeroMoro(solicitud.getMorosidadNro());
					comportamiento.setNumeroProt(solicitud.getProtestosNro());
					
					/*setar los datos del exposicion de Riesgo K√ºpfer*/
					expoRiesgoKh = new ExpoRiesgoKhDTO();
					expoRiesgoKh.setPeakCredito(solicitud.getPeackCredito().longValue());
					expoRiesgoKh.setMontoRiesgoKupfer(solicitud.getRiesgoKupfer().longValue());
					long montoRiegoKupferPedidoPorceso = solicitud.getRiesgoKupfer().longValue() + solicitud.getMontoCuotas().longValue();
					expoRiesgoKh.setMontoRiesgoKupferPedidoProceso(montoRiegoKupferPedidoPorceso);
					expoRiesgoKh.setMontoPedidoProceso(solicitud.getMontoCuotas().longValue());
					long montoPeakCreditoPedidoProceso = solicitud.getPeackCredito().longValue() + solicitud.getMontoCuotas().longValue();
					expoRiesgoKh.setMontoPeakCreditoPedidoProceso(montoPeakCreditoPedidoProceso);
					expoRiesgoKh.setMontoAsegurado(solicitud.getMontoAsegurado().longValue());
					this.setObservacionesFinales(null);
					this.listaFileUploadedDTOs = new ArrayList<FileUploadedDTO>(0);
					this.listaUsuarioCorreoagregados = new ArrayList<SolicitudUsuarioCorreo>(0);
					listaArchivoGuardado = new ArrayList<ConceptoDTO>(0);


					
					log.debug("solicitud.getTipTiposol() : #0", solicitud.getTipTiposol());
					 if((solicitud.getTipTiposol().trim()).equals(TipoSolicitudType.V1N.getNombre()) || 
					    (solicitud.getTipTiposol().trim()).equals(TipoSolicitudType.V1C.getNombre())){
							try{ 
								 venta = (LcredSolicitudVtapuntual)entityManager
										 .createQuery("Select vp from LcredSolicitudVtapuntual vp where vp.numSolicitud=:solAux")
										 .setParameter("solAux", solicitud.getId().getNumSolicitud()).getSingleResult();
							}catch (Exception e) {
								log.debug("no existe datos de venta puntual");
							}
							 
							 this.setTituloIngreso(solicitud.getDesTiposol());
							 
							 if((solicitud.getTipTiposol().trim()).equals(TipoSolicitudType.V1N.getNombre())){
								 this.setPaginaIngreso(11);
								 this.setTipoSolicitudCodigo("1");
							 }else if((solicitud.getTipTiposol().trim()).equals(TipoSolicitudType.V1C.getNombre())){
								 this.setPaginaIngreso(12);
								 this.setTipoSolicitudCodigo("1");
							 }
							 
							 if(venta != null){
								this.setMontoVtaPuntual(venta.getMontoInicial().longValue());
								this.setPieVentaPuntual(venta.getMontoPieInicial().longValue());
								this.setProductos(venta.getDcProducto());
								this.setObservacionesCompra("");
								this.setMotivoCompra(venta.getDcMotivo());
								this.setFormaPago(venta.getObservacionesInicial());
								try{
									String margenAux = venta.getDcMargen().replace(",", ".");
									String margennuevo = margenAux.replace("%", "");
									Double margen = Double.parseDouble(margennuevo);
									this.setMargenGlogal(margen);
								}catch (Exception e) {
									log.error("Error al transformar el margen global #0", e.getMessage());
									this.setMargenGlogal((double)0);
								}
								
								/*setar los valores al los datos*/
								this.setMontoNuevo(venta.getMontoInicial().longValue());
								this.setPieNuevo(venta.getMontoPieInicial().longValue());
								if(this.paginaIngreso != 0){
									this.normalCuota = String.valueOf(this.paginaIngreso);
								}
								this.setObservacionesCompra(solicitud.getGlsObservaciones());
								
								if("A".equals(solicitud.getEstado()) || "R".equals(solicitud.getEstado()) || "NU".equals(solicitud.getEstado())){
									this.setObservacionesFinales(venta.getObservacionesFinal());
								}
								
							 }
							 
							 List<ArchivoAdjunto> listaArchivos = scoringService.obtenerArchivosSolicitud(solicitud.getId().getNumSolicitud(),ArchivoAdjuntoType.INGRESO);
							 if(listaArchivos != null){
								 ConceptoDTO obj = null;
								 listaArchivoGuardado = new ArrayList<ConceptoDTO>(0);
								 for(ArchivoAdjunto aa : listaArchivos ){
									 obj = new ConceptoDTO();
									 obj.setNombreArchivo(aa.getNombreAdjunto());
									 obj.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+aa.getUrl());
									 obj.setTipoArchivoType(aa.getTipo());
									 obj.setFechaCreacion(aa.getFechaCreacion());
									 if(aa.getUsuario() != null){
										 obj.setUsuario(aa.getUsuario().getAlias());
									 }else{
										 obj.setUsuario(""); 
									 }
									 listaArchivoGuardado.add(obj);
								 }
							 }
							 
							 
							 List<ArchivoAdjunto> listaArchivosRespuesta = scoringService.obtenerArchivosSolicitud(solicitud.getId().getNumSolicitud(),ArchivoAdjuntoType.RESPUESTA);
							 if(listaArchivosRespuesta != null){
								 this.listaArchivoRespuestaCorreo = new ArrayList<ConceptoDTO>(0);
								 
								 if(listaArchivoGuardado == null){
									 listaArchivoGuardado = new ArrayList<ConceptoDTO>(0); 
								 }else{
									 log.debug("cantiadad registros #0", listaArchivoGuardado.size());
								 }
								 
								 ConceptoDTO obj = null;
								 if(listaArchivosRespuesta.size() > 0){
									 for(ArchivoAdjunto aa : listaArchivosRespuesta ){
										 obj = new ConceptoDTO();
										 obj.setNombreArchivo(aa.getNombreAdjunto());
										 obj.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+aa.getUrl());
										 obj.setTipoArchivoType(aa.getTipo());
										 obj.setFechaCreacion(aa.getFechaCreacion());
										 if(aa.getUsuario() != null){
											 obj.setUsuario(aa.getUsuario().getAlias());
										 }else{
											 obj.setUsuario(""); 
										 }
										 
										 if(obj != null){
											 listaArchivoGuardado.add(obj);
											 listaArchivoRespuestaCorreo.add(obj);
										 }
									 }
								 }
							 }							 
							 
							 
							 List<LcredArchivoAdjuntos> listaArchivosRespuestaAntiguos = scoringService.obtenerArchivosSolicitudAntiguas(solicitud.getId().getNumSolicitud(),String.valueOf(this.paginaIngreso));
							 if(listaArchivosRespuestaAntiguos != null){
								 if(listaArchivoGuardado == null){
									 listaArchivoGuardado = new ArrayList<ConceptoDTO>(0); 
								 }else{
									 log.debug("cantiadad registros #0", listaArchivoGuardado.size());
								 }
								 
								 ConceptoDTO obj = null;
								 for(LcredArchivoAdjuntos laa : listaArchivosRespuestaAntiguos ){
									 obj = new ConceptoDTO();
									 String[] arreglo = laa.getId().getArchivoAdjunto().split("'\\'");
									 int cant = arreglo.length;
									 if(cant > 0){
										 obj.setNombreArchivo(arreglo[cant-1]);
										 obj.setRutaCompleta(laa.getId().getArchivoAdjunto());
										 obj.setUsuario("");
										 obj.setTipoArchivoType(ArchivoAdjuntoType.ANTIGUO);
										 obj.setFechaCreacion(null);
										 listaArchivoGuardado.add(obj);
									 }
								 }
							 }							 
							 							 
							 
							 
							 this.tipoSolicitudAux = scoringService.obtenerObjetoLcredTipoSolicitud(String.valueOf(this.paginaIngreso));
							 
							 /*sacar los datps de representacion la grilla nuevamente.*/
							 List<CotizacionPedidoCabecera> listaCpc = scoringService.getCotizacionPedidoCobecera(venta.getNumSolicitud());
							 if(listaCpc != null && listaCpc.size() > 0){
								 this.listaCotPedDTOs = new ArrayList<CotPedDTO>(0);
								 List<CabeceraCotPedDTO> listaCabeceraCotPeds = null;
								 List<DetalleCotPedDTO> listaDetalle = null;
								 CotPedDTO primero = null;CabeceraCotPedDTO segundo = null;  DetalleCotPedDTO tercero = null; 
								 for(CotizacionPedidoCabecera cpc : listaCpc){
									 primero = new CotPedDTO();
									 primero.setMontoNeto(cpc.getNeto());
									 primero.setMontoTotal(cpc.getTotal());
									 primero.setPonderacion(cpc.getPorcentaje());
									 
									 montoTotal+=cpc.getTotal();
									 montoTotalNeto+= cpc.getNeto();
									 List<CotizacionPedido> listaCp = scoringService.getCotizacionPedido(cpc.getSystemId());
									 if(listaCp != null && listaCp.size() > 0){
										 for(CotizacionPedido cp: listaCp){
											 primero.setNumeroCotizacion(String.valueOf(cp.getNCotiPed()));
											 primero.setMargenGlobal(cp.getMargenGlobal());
											 List<CotizacionPedidoNegocio> listaCpn = scoringService.getCotizacionPedidoNegocio(cp.getSystemId());
											 if(listaCpn != null && listaCpn.size() > 0 ){
												 listaCabeceraCotPeds = new ArrayList<CabeceraCotPedDTO>(0);
												 for(CotizacionPedidoNegocio cpn : listaCpn){
													 segundo = new CabeceraCotPedDTO(); 
													 ConceptosNegocio cn = scoringService.obtenerConceptoNegocioLocalForCodigoNegocio(cpn.getNegocio());
													 segundo.setNegocio(cn);
													 segundo.setMontoGeneral((long) 0);
													 segundo.setPorcentaje(cpn.getMargenNegocio());
													 segundo.setRepresentacion(cpn.getRepresentacion());
													 List<CotizacionPedidoConcepto> listaCpCp = scoringService.getCotizacionPedidoConcepto(cpn.getSystemId());
													 if(listaCpCp != null && listaCpCp.size() > 0){
														 listaDetalle = new ArrayList<DetalleCotPedDTO>(0);
														 for(CotizacionPedidoConcepto cpcp : listaCpCp){
															 tercero = new DetalleCotPedDTO();
															 ConceptosNegocio cn2 = scoringService.obtenerConceptoNegocioLocalForNegocioAndConcepto(cpn.getNegocio(), cpcp.getCodigoConcepto());
															 tercero.setNegocio(cn2);
															 tercero.setMargenConcepto(cpcp.getMargenConcepto());
															 tercero.setMonto(cpcp.getMontoMasIva());
															 tercero.setMontoNeto((long)(cpcp.getMontoMasIva()/1.19));
															 tercero.setPorceDelTotal(cpcp.getMargenPoderado());
															 if(cpcp.getMargenPorcePorConcepto() != null){ tercero.setPorcePorConcepto(cpcp.getMargenPorcePorConcepto());}
															 else{ tercero.setPorcePorConcepto(cpcp.getMargenConcepto());}
															 List<DetalleCp> listaDcp = scoringService.getDetalleCp(cpcp.getSystemId());
															  if(listaDcp != null && listaDcp.size() > 0){
																  tercero.setListaDetalleCp(listaDcp);
															  }
															  listaDetalle.add(tercero);
														 }
													 }
													segundo.setListaDetalle(listaDetalle); 
													listaCabeceraCotPeds.add(segundo);
												 }
											 }
											 primero.setListaCabeceraCotPeds(listaCabeceraCotPeds);
											 listaCotPedDTOs.add(primero); 
										 }
									 }
								 }
									sacarPorcetajeGlobalConceptoNegocio();
							        sacarPorcetajeGlobal();
							        sacarPorcetajeCotizacionToPedido();
							        sacarPorcetajePedidoGlobal();	
							        insertMontosEnListaConceptosMontos();
							        
						        
							 }							 
							int tipoCuenta = 0;
							if("Mixto".equals(solicitud.getCanal())){
								tipoCuenta = TipoCuentasKupferType.MX.ordinal();
							}else if("Kupfer Express".equals(solicitud.getCanal())){
								tipoCuenta = TipoCuentasKupferType.KX.ordinal();
							}else if("Grandes Cuentas".equals(solicitud.getCanal())){
								tipoCuenta = TipoCuentasKupferType.GC.ordinal();
							}
							 
							/*va a buscar los destinatarios de las solictudes*/
							 if(listaUsuarioCorreoagregados == null || listaUsuarioCorreoagregados.size() == 0){
								 StringBuffer sb = new StringBuffer();
								 listaCodigoNegocio = new  ArrayList<String>(0);
								 listaCodigoConcepto = new  ArrayList<String>(0);
								 if(listaCotPedDTOs != null ){
										for(CotPedDTO cpd : listaCotPedDTOs){
											if(cpd.getListaCabeceraCotPeds() != null){
												for(CabeceraCotPedDTO ccpd : cpd.getListaCabeceraCotPeds()){
													if(ccpd.getNegocio() != null){
														log.debug("negocio #0", ccpd.getNegocio().getNegocio() +"-"+ ccpd.getNegocio().getDesNegocio());
														if(!listaCodigoNegocio.contains(ccpd.getNegocio().getNegocio())){
															listaCodigoNegocio.add((ccpd.getNegocio().getNegocio()));
															sb.append("- " +ccpd.getNegocio().getDesNegocio().trim());sb.append("\n");
														}
													}
												}
											}
										}
										for(CotPedDTO cpd : listaCotPedDTOs){
											if(cpd.getListaCabeceraCotPeds() != null){
												for(CabeceraCotPedDTO ccpd : cpd.getListaCabeceraCotPeds()){
													if(ccpd.getNegocio() != null){
														for(DetalleCotPedDTO dcpd: ccpd.getListaDetalle()){
															log.debug("concepto #0", dcpd.getNegocio().getConcepto() +"-"+ dcpd.getNegocio().getDescripcion());
															if(!listaCodigoConcepto.contains(dcpd.getNegocio().getConcepto())){
																listaCodigoConcepto.add((dcpd.getNegocio().getConcepto()));
															}
														}
													}
												}
											}
										}	
										this.setNegocioPdf(sb.toString());	
									}
								 
								 obtenerCorreo(solicitud.getCodEmisor(), "1",listaCodigoConcepto,listaCodigoNegocio, solicitud.getCodSucursal(), tipoCuenta,solicitud.getUsuarioDevuelve());
							  }
							 
							 this.setTipoSolicitudCorreo("1"); 
							 this.modificarVenta = false;
							 this.cambiarEnSap = false;

					 }else if((solicitud.getTipTiposol().trim()).equals(TipoSolicitudType.LC1.getNombre()) || (solicitud.getTipTiposol().trim()).equals(TipoSolicitudType.LC2.getNombre()) ||
							 (solicitud.getTipTiposol().trim()).equals(TipoSolicitudType.LC3.getNombre())){
							
						 	this.setTituloIngreso(solicitud.getDesTiposol());
						    try{ 
								 credito = (LcredSolicitudLcredito)entityManager
										 .createQuery("Select lc from LcredSolicitudLcredito lc where lc.numSolicitud=:solAux")
										 .setParameter("solAux", solicitud.getId().getNumSolicitud()).getSingleResult();
							 }catch (Exception e) {
								log.debug("no existe datos de linea credito.");
							 }
							 
							 this.setTituloIngreso(solicitud.getDesTiposol());
							 if((solicitud.getTipTiposol().trim()).equals(TipoSolicitudType.LC1.getNombre())){
								 this.setPaginaIngreso(21);
								 this.habilitaEnvioAseguro = false;
								 this.setTipoSolicitudCodigo("2");
							 }else if((solicitud.getTipTiposol().trim()).equals(TipoSolicitudType.LC2.getNombre())){
								 this.setPaginaIngreso(22);
								 this.habilitaEnvioAseguro = false;
								 this.setTipoSolicitudCodigo("2");
							 }else if((solicitud.getTipTiposol().trim()).equals(TipoSolicitudType.LC3.getNombre())){
								 this.setPaginaIngreso(23);
								 this.setTipoSolicitudCodigo("2");
							 }

							 this.setInnNomRiesgo(String.valueOf(this.paginaIngreso));
							 this.setInnNomRiesgoNueva(String.valueOf(this.paginaIngreso));
							 
							 List<ArchivoAdjunto> listaArchivos = scoringService.obtenerArchivosSolicitud(solicitud.getId().getNumSolicitud(),ArchivoAdjuntoType.INGRESO);
							 if(listaArchivos != null){
								 ConceptoDTO obj = null;
								 listaArchivoGuardado = new ArrayList<ConceptoDTO>(0);
								 for(ArchivoAdjunto aa : listaArchivos ){
									 obj = new ConceptoDTO();
									 obj.setNombreArchivo(aa.getNombreAdjunto());
									 obj.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+aa.getUrl());
									 obj.setTipoArchivoType(aa.getTipo());
									 obj.setFechaCreacion(aa.getFechaCreacion());
									 if(aa.getUsuario() != null){
										 obj.setUsuario(aa.getUsuario().getAlias());
									 }else{
										 obj.setUsuario(""); 
									 }
									 listaArchivoGuardado.add(obj);
								 }
							 }
							 
							 
							 List<ArchivoAdjunto> listaArchivosRespuesta = scoringService.obtenerArchivosSolicitud(solicitud.getId().getNumSolicitud(),ArchivoAdjuntoType.RESPUESTA);
							 if(listaArchivosRespuesta != null){
								 listaArchivoRespuestaCorreo = new ArrayList<ConceptoDTO>(0);
								 if(listaArchivoGuardado == null){
									 listaArchivoGuardado = new ArrayList<ConceptoDTO>(0); 
								 }else{
									 log.debug("cantiadad registros #0", listaArchivoGuardado.size());
								 }
								 
								 ConceptoDTO obj = null;
								 for(ArchivoAdjunto aa : listaArchivosRespuesta ){
									 obj = new ConceptoDTO();
									 obj.setNombreArchivo(aa.getNombreAdjunto());
									 obj.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+aa.getUrl());
									 obj.setTipoArchivoType(aa.getTipo());
									 obj.setFechaCreacion(aa.getFechaCreacion());
									 if(aa.getUsuario() != null){
										 obj.setUsuario(aa.getUsuario().getAlias());
									 }else{
										 obj.setUsuario(""); 
									 }
									 listaArchivoGuardado.add(obj);
									 listaArchivoRespuestaCorreo.add(obj);
								 }
							 }								 
							 
							 
							 List<LcredArchivoAdjuntos> listaArchivosRespuestaAntiguos = scoringService.obtenerArchivosSolicitudAntiguas(solicitud.getId().getNumSolicitud(),String.valueOf(this.paginaIngreso));
							 if(listaArchivosRespuestaAntiguos != null){
								 if(listaArchivoGuardado == null){
									 listaArchivoGuardado = new ArrayList<ConceptoDTO>(0); 
								 }else{
									 log.debug("cantiadad registros #0", listaArchivoGuardado.size());
								 }
								 ConceptoDTO obj = null;
								 for(LcredArchivoAdjuntos laa : listaArchivosRespuestaAntiguos ){
									 obj = new ConceptoDTO();
									 String[] arreglo = laa.getId().getArchivoAdjunto().split("'\\'");
									 int cant = arreglo.length;
									 if(cant > 0){
										 obj.setNombreArchivo(arreglo[cant-1]);
										 obj.setRutaCompleta(laa.getId().getArchivoAdjunto());
										 obj.setTipoArchivoType(ArchivoAdjuntoType.ANTIGUO);
										 obj.setFechaCreacion(null);
										 obj.setUsuario("");
										 listaArchivoGuardado.add(obj);
									 }
								 }
							 }	
							 
							 this.tipoSolicitudAux = scoringService.obtenerObjetoLcredTipoSolicitud(String.valueOf(this.paginaIngreso));
						
						
							/*sacando condiciones de riesgo y de pago */
							try{
								if(listaClsRiesgos == null || listaClsRiesgos.size() == 0){
									listaClsRiesgos = intranetSapService.getClasificacionRiesgo();
								}
								if(listaCondicionPagos == null || listaCondicionPagos.size() == 0){
									listaCondicionPagos = intranetSapService.getCondicionPago();
								}							
							}catch (Exception e) {
								log.error("Error, al obtener los datos de lista risgo y pago #0", e.getMessage());
							}
							
							if(credito != null){
								if(credito.getCondPagoInicial() != null && credito.getCondRiesgoInicial() != null){
									evaluarInnominalNominalRKupfer( credito.getCondRiesgoInicial(),credito.getCondPagoInicial());
								}
								
								this.setDescripcionProyecto(credito.getDpDescripcionProyecto());
								String montoAux = credito.getDpMonto().replace(".", "");
								this.setMontoCredito(Long.parseLong(montoAux));
								this.setPlazoEjecucion(credito.getDpPlazoEjecucion());
								this.setConceptoNegocios(credito.getDpConceptosInvoluc());
								this.setRutNombresSocios(credito.getDpSocios());
								String montoPotencial = credito.getDpPotencialCompra().replace(".", "");
								this.setPotencialCompra(Long.parseLong(montoPotencial));
								if(credito.getObservacionesInicial() != null && !"".equals(credito.getObservacionesInicial())){
									this.setObservacionesCredito(credito.getObservacionesInicial());
								}else if(solicitud.getGlsObservaciones() != null){
									this.setObservacionesCredito(solicitud.getGlsObservaciones());
								}
								
								if("A".equals(solicitud.getEstado()) || "R".equals(solicitud.getEstado()) || "NU".equals(solicitud.getEstado())){
									if(credito.getObservacionesFinal() != null && !"".equals(credito.getObservacionesFinal())){
										this.setObservacionesFinales(credito.getObservacionesFinal());
									}
									
									this.setMontoLineaCredito(credito.getMontoNormalInicial().longValue());
									if(credito.getMontoNormalFinal() != null){
										this.setMontoLineaCreditoNuevo(credito.getMontoNormalFinal().longValue());
									}else{
										this.setMontoLineaCreditoNuevo(credito.getMontoNormalInicial().longValue());
									}
								}else{
									if(credito.getMontoNormalInicial() != null){
										this.setMontoLineaCredito(credito.getMontoNormalInicial().longValue());
									}
									
									if(credito.getMontoNormalFinal() != null){
										this.setMontoLineaCreditoNuevo(credito.getMontoNormalFinal().longValue());
									}else{
										this.setMontoLineaCreditoNuevo(credito.getMontoNormalInicial().longValue());
									}									
								}
							}
						

							
							/*seteo de otros campos*/
							this.setClsRiesgoNuevo(credito.getCondRiesgoFinal());
							this.setcPagoNuevo(credito.getCondPagoFinal());
							
							evaluarInnominalNominalRKupferNuevo(credito.getCondRiesgoFinal(),credito.getCondPagoFinal());
							
							
							int tipoCuenta = 0;
							if("Mixto".equals(solicitud.getCanal())){
								tipoCuenta = TipoCuentasKupferType.MX.ordinal();
							}else if("Kupfer Express".equals(solicitud.getCanal())){
								tipoCuenta = TipoCuentasKupferType.KX.ordinal();
							}else if("Grandes Cuentas".equals(solicitud.getCanal())){
								tipoCuenta = TipoCuentasKupferType.GC.ordinal();
							}							
							
							/*va a buscar los destinatarios de las solictudes*/
							listaCodigoNegocio = new ArrayList<String>(0);
							if(credito != null && credito.getDpConceptosInvoluc() != null){
								String[] arrayNombreNegocio = credito.getDpConceptosInvoluc().split("-");
								if(arrayNombreNegocio != null){
									for(String descripcion : arrayNombreNegocio){
										String codigo = getObtenerCodigoNegocios(descripcion);
										if(codigo != null){
											log.debug("negocio #0", codigo +"-"+ descripcion);
											listaCodigoNegocio.add(codigo);
										}
									}
								}
							}
						
							
							 obtenerCorreo(solicitud.getCodEmisor(), "2", null, listaCodigoNegocio, solicitud.getCodSucursal(), tipoCuenta, solicitud.getUsuarioDevuelve());

							 this.setTipoSolicitudCorreo("2"); 
							 this.modificarCredito = false;
							 this.cambiarEnSap = true;
							 if(solicitud != null){
								 if(solicitud.getTipTiposol().equals("2I")){
									 this.setInnominado("X");
									 this.setNominacion(null);
									 this.setRiesgoKupfer(null);
								 }else if(solicitud.getTipTiposol().equals("2N")){
									 this.setInnominado(null);
									 this.setNominacion("X");
									 this.setRiesgoKupfer(null);									
									 
								 }else if(solicitud.getTipTiposol().equals("2R")){
									 this.setInnominado(null);
									 this.setNominacion(null);
									 this.setRiesgoKupfer("X");									 
								 }
							 }
					 }else if((solicitud.getTipTiposol().trim()).equals(TipoSolicitudType.CR1.getNombre()) || (solicitud.getTipTiposol().trim()).equals(TipoSolicitudType.CR2.getNombre()) ||
							 (solicitud.getTipTiposol().trim()).equals(TipoSolicitudType.CRP3.getNombre()) ||  (solicitud.getTipTiposol().trim()).equals(TipoSolicitudType.CRP4.getNombre())){
						 	
						  this.setTituloIngreso(solicitud.getDesTiposol());
						  this.comboCPago = true;
						  this.comboCRiesgo = true;
						  try{ 
							  condicion = (LcredSolicitudCondiciones)entityManager
									 .createQuery("Select sc from LcredSolicitudCondiciones sc where sc.numSolicitud=:solAux")
									 .setParameter("solAux", solicitud.getId().getNumSolicitud()).getSingleResult();
						  }catch (Exception e) {
							log.debug("no existe datos de condiciones.");
						  }		
						  
						  List<ArchivoAdjunto> listaArchivos = scoringService.obtenerArchivosSolicitud(solicitud.getId().getNumSolicitud(),ArchivoAdjuntoType.INGRESO);
						  if(listaArchivos != null){
							 ConceptoDTO obj = null;
							 listaArchivoGuardado = new ArrayList<ConceptoDTO>(0);
							 for(ArchivoAdjunto aa : listaArchivos ){
								 obj = new ConceptoDTO();
								 obj.setNombreArchivo(aa.getNombreAdjunto());
								 obj.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+aa.getUrl());
								 obj.setTipoArchivoType(aa.getTipo());
								 obj.setFechaCreacion(aa.getFechaCreacion());
								 if(aa.getUsuario() != null){
									 obj.setUsuario(aa.getUsuario().getAlias());
								 }else{
									 obj.setUsuario(""); 
								 }
								 listaArchivoGuardado.add(obj);
							 }
						  }						  
						  
						 List<ArchivoAdjunto> listaArchivosRespuesta = scoringService.obtenerArchivosSolicitud(solicitud.getId().getNumSolicitud(),ArchivoAdjuntoType.RESPUESTA);
						 if(listaArchivosRespuesta != null){
							 listaArchivoRespuestaCorreo = new ArrayList<ConceptoDTO>(0);
							 if(listaArchivoGuardado == null){
								 listaArchivoGuardado = new ArrayList<ConceptoDTO>(0); 
							 }else{
								 log.debug("cantiadad registros #0", listaArchivoGuardado.size());
							 }							 
							 ConceptoDTO obj = null;
							 for(ArchivoAdjunto aa : listaArchivosRespuesta ){
								 obj = new ConceptoDTO();
								 obj.setNombreArchivo(aa.getNombreAdjunto());
								 obj.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+aa.getUrl());
								 obj.setTipoArchivoType(aa.getTipo());
								 obj.setFechaCreacion(aa.getFechaCreacion());
								 if(aa.getUsuario() != null){
									 obj.setUsuario(aa.getUsuario().getAlias());
								 }else{
									 obj.setUsuario(""); 
								 }
								 listaArchivoGuardado.add(obj);
								 listaArchivoRespuestaCorreo.add(obj);
							 }
						 }		
						 
						 List<LcredArchivoAdjuntos> listaArchivosRespuestaAntiguos = scoringService.obtenerArchivosSolicitudAntiguas(solicitud.getId().getNumSolicitud(),String.valueOf(this.paginaIngreso));
						 if(listaArchivosRespuestaAntiguos != null){
							 if(listaArchivoGuardado == null){
								 listaArchivoGuardado = new ArrayList<ConceptoDTO>(0); 
							 }else{
								 log.debug("cantiadad registros #0", listaArchivoGuardado.size());
							 }								 
							 ConceptoDTO obj = null;
							 for(LcredArchivoAdjuntos laa : listaArchivosRespuestaAntiguos ){
								 obj = new ConceptoDTO();
								 String[] arreglo = laa.getId().getArchivoAdjunto().split("'\\'");
								 int cant = arreglo.length;
								 if(cant > 0){
									 obj.setNombreArchivo(arreglo[cant-1]);
									 obj.setRutaCompleta(laa.getId().getArchivoAdjunto());
									 obj.setTipoArchivoType(ArchivoAdjuntoType.ANTIGUO);
									 obj.setFechaCreacion(null);
									 obj.setUsuario("");
									 listaArchivoGuardado.add(obj);
								 }
							 }
						 }							 
						 
						  
						  if(condicion != null ){
							  setPaginaIngreso(31);
								/*sacando condiciones de riesgo y de pago */
								try{
									if(listaClsRiesgos == null || listaClsRiesgos.size() == 0){
										listaClsRiesgos = intranetSapService.getClasificacionRiesgo();
									}
									if(listaCondicionPagos == null || listaCondicionPagos.size() == 0){
										listaCondicionPagos = intranetSapService.getCondicionPago();
									}							
								}catch (Exception e) {
									log.error("Error, al obtener los datos de lista risgo y pago #0", e.getMessage());
								}
							 
								if(condicion.getCodCondPagoInicial() != null && condicion.getCodCondRiesgoInicial() != null){
									evaluarInnominalNominalRKupfer(condicion.getCodCondRiesgoInicial(),condicion.getCodCondPagoInicial());
								}

								if((condicion.getCondRiesgoInicial() != null ) &&  (condicion.getCondRiesgoInicial().toString()).equals("S")){
									this.condicionRiesgo = true;
									this.condicionRiesgoNew = true;
									evaluarInnominalNominalRKupfer(condicion.getCodCondRiesgoInicial(),condicion.getCodCondPagoInicial());
									this.clsRiesgoNuevo = this.clsRiesgo;
									this.comboCRiesgo = false; 
								}
								if((condicion.getCondPagoInicial() != null ) && (condicion.getCondPagoInicial().toString()).equals("S")){
									this.condicionPago = true;
									this.condicionPagoNew = true;
									evaluarInnominalNominalRKupfer(condicion.getCodCondRiesgoInicial(),condicion.getCodCondPagoInicial());
									this.cPagoNuevo = this.cPago;
									this.comboCPago = false;
								}
								
								if(condicion.getMotivoCambio() != null){
									this.setMotivoRiesgoPago(condicion.getMotivoCambio());
								}else if(solicitud.getGlsObservaciones() != null){
									this.setMotivoRiesgoPago(solicitud.getGlsObservaciones());
								}
								
								
								if("A".equals(solicitud.getEstado()) || "R".equals(solicitud.getEstado()) || "NU".equals(solicitud.getEstado())){
									if(condicion.getMotivoCambio() != null){
										this.setMotivoRiesgoPago(condicion.getMotivoCambio());
									}
									if(solicitud.getGlsObservaciones() != null){
										this.setObservacionesFinales(solicitud.getGlsObservaciones());
									}
								}
								
								 this.setTipoSolicitudCodigo("3");
						  }
						  

						  
						  this.tipoSolicitudAux = scoringService.obtenerObjetoLcredTipoSolicitud(String.valueOf(this.paginaIngreso));
							int tipoCuenta = 0;
							if("Mixto".equals(solicitud.getCanal())){
								tipoCuenta = TipoCuentasKupferType.MX.ordinal();
							}else if("Kupfer Express".equals(solicitud.getCanal())){
								tipoCuenta = TipoCuentasKupferType.KX.ordinal();
							}else if("Grandes Cuentas".equals(solicitud.getCanal())){
								tipoCuenta = TipoCuentasKupferType.GC.ordinal();
							}
						  
						  /*va a buscar los destinatarios de las solictudes*/
						  obtenerCorreo(solicitud.getCodEmisor(), "3", null, null, solicitud.getCodSucursal(), tipoCuenta, solicitud.getUsuarioDevuelve());						 
						  this.setTipoSolicitudCorreo("3"); 
						  this.modificarCondicion = false;	 
						  this.cambiarEnSap = true;
							 
					 }else if((solicitud.getTipTiposol().trim()).equals(TipoSolicitudType.OS1.getNombre()) || (solicitud.getTipTiposol().trim()).equals(TipoSolicitudType.OS2.getNombre()) || 
							 (solicitud.getTipTiposol().trim()).equals(TipoSolicitudType.OS.getNombre())){/***************** Bloqueo y Desbloqueo ***********************/
						 	
						 	try{
								 bloqueo = (LcredSolicitudBloqueos)entityManager
										 .createQuery("Select sb from LcredSolicitudBloqueos sb where sb.numSolicitud=:solAux")
										 .setParameter("solAux", solicitud.getId().getNumSolicitud()).getSingleResult();
							}catch (Exception e) {
								log.debug("no existe datos de bloqueo o desbloqueo.");
							}
						 	
						 	solicitudOtra = scoringService.getSolicitudOtrasId(solicitud.getId().getNumSolicitud());
						 	
						 	this.setTituloIngreso(solicitud.getDesTiposol());
						 	
							if((solicitud.getTipTiposol().trim()).equals(TipoSolicitudType.OS1.getNombre())){
								this.setOpcionBloqueoDesbloqueo("41");
								this.setOpcionBloqueoDesbloqueoNew("41");
							}else if((solicitud.getTipTiposol().trim()).equals(TipoSolicitudType.OS2.getNombre())){
								this.setOpcionBloqueoDesbloqueo("42");
								this.setOpcionBloqueoDesbloqueoNew("42");
							}else if((solicitud.getTipTiposol().trim()).equals(TipoSolicitudType.OS.getNombre())){
								this.setOpcionBloqueoDesbloqueo("");
							}						 
						 
							if(solicitudOtra  != null && bloqueo == null){
								 this.setPaginaIngreso(41);
								 this.setMotivoBloDesbloqueo(solicitudOtra.getObservacionesInicial());
								 this.setTipoSolicitudCodigo("4");
							}else if(solicitudOtra  == null && bloqueo != null){
								 this.setPaginaIngreso(41);
								 this.setMotivoBloDesbloqueo(bloqueo.getMotivoBloqDesbloq());
								 this.setTipoSolicitudCodigo("4");
							}else if(solicitudOtra  != null && bloqueo != null){
								 this.setPaginaIngreso(41);
								 this.setMotivoBloDesbloqueo(solicitudOtra.getObservacionesInicial());	
								 this.setTipoSolicitudCodigo("4");
							}
							
							if("A".equals(solicitud.getEstado()) || "R".equals(solicitud.getEstado()) || "NU".equals(solicitud.getEstado())){
								if(solicitudOtra.getOpcionFinal() != null){
									if(solicitudOtra.getOpcionFinal().equals("B")){
										this.setOpcionBloqueoDesbloqueoNew("41");
										 this.setTipoSolicitudCodigo("4");
									}else{
										this.setOpcionBloqueoDesbloqueoNew("42");
										this.setTipoSolicitudCodigo("4");
									}								
								}
								this.setObservacionesFinales(solicitudOtra.getObservacionesFinal());
							}
							
						    List<ArchivoAdjunto> listaArchivos = scoringService.obtenerArchivosSolicitud(solicitud.getId().getNumSolicitud(),ArchivoAdjuntoType.INGRESO);
						    if(listaArchivos != null){
							 ConceptoDTO obj = null;
							 listaArchivoGuardado = new ArrayList<ConceptoDTO>(0);
							 for(ArchivoAdjunto aa : listaArchivos ){
								  obj = new ConceptoDTO();
								  obj.setNombreArchivo(aa.getNombreAdjunto());
								  obj.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+aa.getUrl());
								  obj.setTipoArchivoType(aa.getTipo());
								  obj.setFechaCreacion(aa.getFechaCreacion());
								  if(aa.getUsuario() != null){
									 obj.setUsuario(aa.getUsuario().getAlias());
								  }else{
									 obj.setUsuario(""); 
								  }
								  listaArchivoGuardado.add(obj);
							   }
						     }						  
							  
							 List<ArchivoAdjunto> listaArchivosRespuesta = scoringService.obtenerArchivosSolicitud(solicitud.getId().getNumSolicitud(),ArchivoAdjuntoType.RESPUESTA);
							 if(listaArchivosRespuesta != null){
								 listaArchivoRespuestaCorreo = new ArrayList<ConceptoDTO>(0);
								 if(listaArchivoGuardado == null){
									 listaArchivoGuardado = new ArrayList<ConceptoDTO>(0); 
								 }else{
									 log.debug("cantiadad registros #0", listaArchivoGuardado.size());
								 }							 
								 ConceptoDTO obj = null;
								 for(ArchivoAdjunto aa : listaArchivosRespuesta ){
									 obj = new ConceptoDTO();
									 obj.setNombreArchivo(aa.getNombreAdjunto());
									 obj.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+aa.getUrl());
									 obj.setTipoArchivoType(aa.getTipo());
									 obj.setFechaCreacion(aa.getFechaCreacion());
									 if(aa.getUsuario() != null){
										 obj.setUsuario(aa.getUsuario().getAlias());
									 }else{
										 obj.setUsuario(""); 
									 }
									 listaArchivoGuardado.add(obj);
									 listaArchivoRespuestaCorreo.add(obj);
								 }
							 }		
							 
							 List<LcredArchivoAdjuntos> listaArchivosRespuestaAntiguos = scoringService.obtenerArchivosSolicitudAntiguas(solicitud.getId().getNumSolicitud(),String.valueOf(this.paginaIngreso));
							 if(listaArchivosRespuestaAntiguos != null){
								 if(listaArchivoGuardado == null){
									 listaArchivoGuardado = new ArrayList<ConceptoDTO>(0); 
								 }else{
									 log.debug("cantiadad registros #0", listaArchivoGuardado.size());
								 }								 
								 ConceptoDTO obj = null;
								 for(LcredArchivoAdjuntos laa : listaArchivosRespuestaAntiguos ){
									 obj = new ConceptoDTO();
									 String[] arreglo = laa.getId().getArchivoAdjunto().split("'\\'");
									 int cant = arreglo.length;
									 if(cant > 0){
										 obj.setNombreArchivo(arreglo[cant-1]);
										 obj.setRutaCompleta(laa.getId().getArchivoAdjunto());
										 obj.setTipoArchivoType(ArchivoAdjuntoType.ANTIGUO);
										 obj.setFechaCreacion(null);
										 obj.setUsuario("");
										 listaArchivoGuardado.add(obj);
									 }
								 }
							 }							 
							 
							 
						   this.tipoSolicitudAux = scoringService.obtenerObjetoLcredTipoSolicitud(String.valueOf(this.paginaIngreso));
							int tipoCuenta = 0;
							if("Mixto".equals(solicitud.getCanal())){
								tipoCuenta = TipoCuentasKupferType.MX.ordinal();
							}else if("Kupfer Express".equals(solicitud.getCanal())){
								tipoCuenta = TipoCuentasKupferType.KX.ordinal();
							}else if("Grandes Cuentas".equals(solicitud.getCanal())){
								tipoCuenta = TipoCuentasKupferType.GC.ordinal();
							}
						   
						   /*va a buscar los destinatarios de las solictudes*/
						   obtenerCorreo(solicitud.getCodEmisor(), "5",null, null, solicitud.getCodSucursal(), tipoCuenta, solicitud.getUsuarioDevuelve());
						   this.setTipoSolicitudCorreo("5"); 
						   this.modificarbloqueoToDesbloqueo = false; 
						   this.cambiarEnSap = true;
						 
					 }else if((solicitud.getTipTiposol().trim()).equals(TipoSolicitudType.OS3.getNombre())){/***************** Creacion DM ***********************/
						 try{
							   listaDms = scoringService.getSacarListaDms(solicitud.getId().getNumSolicitud());
							   if(listaDms != null){
								   this.setListaClienteDMs(listaDms);
							   }
						}catch (Exception e) {
							log.debug("no existe datos de los dm. #0",e.getMessage() );
						}		
						 	
						 solicitudOtra = scoringService.getSolicitudOtrasId(solicitud.getId().getNumSolicitud());
						 if(solicitudOtra != null){
							 if("A".equals(solicitud.getEstado()) || "R".equals(solicitud.getEstado()) || "NU".equals(solicitud.getEstado())){
								 this.setObservacionesFinales(solicitudOtra.getObservacionesFinal());
							 }
							 log.debug("Existe resgistro en otra solicitud ");
						 }
						 
						 
					 	this.setTituloIngreso(solicitud.getDesTiposol());
					 	
						if((solicitud.getTipTiposol().trim()).equals(TipoSolicitudType.OS3.getNombre())){
							this.setPaginaIngreso(43);
							this.setMotivoProrroga(solicitud.getObservSolicitud());
							this.setTipoSolicitudCodigo("4");
						}	
						  List<ArchivoAdjunto> listaArchivos = scoringService.obtenerArchivosSolicitud(solicitud.getId().getNumSolicitud(),ArchivoAdjuntoType.INGRESO);
						  if(listaArchivos != null){
							 ConceptoDTO obj = null;
							 listaArchivoGuardado = new ArrayList<ConceptoDTO>(0);
							 for(ArchivoAdjunto aa : listaArchivos ){
								 obj = new ConceptoDTO();
								 obj.setNombreArchivo(aa.getNombreAdjunto());
								 obj.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+aa.getUrl());
								 obj.setTipoArchivoType(aa.getTipo());
								 obj.setFechaCreacion(aa.getFechaCreacion());
								 if(aa.getUsuario() != null){
									 obj.setUsuario(aa.getUsuario().getAlias());
								 }else{
									 obj.setUsuario(""); 
								 }
								 listaArchivoGuardado.add(obj);
							 }
						  }						  
						  
						 List<ArchivoAdjunto> listaArchivosRespuesta = scoringService.obtenerArchivosSolicitud(solicitud.getId().getNumSolicitud(),ArchivoAdjuntoType.RESPUESTA);
						 if(listaArchivosRespuesta != null){
							 listaArchivoRespuestaCorreo = new ArrayList<ConceptoDTO>(0);
							 if(listaArchivoGuardado == null){
								 listaArchivoGuardado = new ArrayList<ConceptoDTO>(0); 
							 }else{
								 log.debug("cantiadad registros #0", listaArchivoGuardado.size());
							 }							 
							 ConceptoDTO obj = null;
							 for(ArchivoAdjunto aa : listaArchivosRespuesta ){
								 obj = new ConceptoDTO();
								 obj.setNombreArchivo(aa.getNombreAdjunto());
								 obj.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+aa.getUrl());
								 obj.setTipoArchivoType(aa.getTipo());
								 obj.setFechaCreacion(aa.getFechaCreacion());
								 if(aa.getUsuario() != null){
									 obj.setUsuario(aa.getUsuario().getAlias());
								 }else{
									 obj.setUsuario(""); 
								 }
								 listaArchivoGuardado.add(obj);
								 listaArchivoRespuestaCorreo.add(obj);
							 }
						 }		
						 
						 List<LcredArchivoAdjuntos> listaArchivosRespuestaAntiguos = scoringService.obtenerArchivosSolicitudAntiguas(solicitud.getId().getNumSolicitud(),String.valueOf(this.paginaIngreso));
						 if(listaArchivosRespuestaAntiguos != null){
							 if(listaArchivoGuardado == null){
								 listaArchivoGuardado = new ArrayList<ConceptoDTO>(0); 
							 }else{
								 log.debug("cantiadad registros #0", listaArchivoGuardado.size());
							 }								 
							 ConceptoDTO obj = null;
							 for(LcredArchivoAdjuntos laa : listaArchivosRespuestaAntiguos ){
								 obj = new ConceptoDTO();
								 String[] arreglo = laa.getId().getArchivoAdjunto().split("'\\'");
								 int cant = arreglo.length;
								 if(cant > 0){
									 obj.setNombreArchivo(arreglo[cant-1]);
									 obj.setRutaCompleta(laa.getId().getArchivoAdjunto());
									 obj.setTipoArchivoType(ArchivoAdjuntoType.ANTIGUO);
									 obj.setFechaCreacion(null);
									 obj.setUsuario("");
									 listaArchivoGuardado.add(obj);
								 }
							 }
						 }							
						
					   this.tipoSolicitudAux = scoringService.obtenerObjetoLcredTipoSolicitud(String.valueOf(this.paginaIngreso));						
						int tipoCuenta = 0;
						if("Mixto".equals(solicitud.getCanal())){
							tipoCuenta = TipoCuentasKupferType.MX.ordinal();
						}else if("Kupfer Express".equals(solicitud.getCanal())){
							tipoCuenta = TipoCuentasKupferType.KX.ordinal();
						}else if("Grandes Cuentas".equals(solicitud.getCanal())){
							tipoCuenta = TipoCuentasKupferType.GC.ordinal();
						}
					   
					   /*va a buscar los destinatarios de las solictudes*/
					   obtenerCorreo(solicitud.getCodEmisor(), "5",null, null, solicitud.getCodSucursal(), tipoCuenta, solicitud.getUsuarioDevuelve());
					   this.setTipoSolicitudCorreo("5"); 
					   this.modificarCreacionDM = false;	 
					   
					 }else if((solicitud.getTipTiposol().trim()).equals(TipoSolicitudType.OS4.getNombre())){/********************* Prorroga ********************/
						 try{
							 listaProrrogas = (List<LcredSolicitudProrroga>)entityManager
									 .createQuery("Select lp from LcredSolicitudProrroga lp where lp.id.numSolicitud=:solAux")
									 .setParameter("solAux", solicitud.getId().getNumSolicitud()).getResultList();	
							if(listaProrrogas != null && listaProrrogas.size() > 0){
								this.listaDoctoProrrogaAgregados = new ArrayList<DocumentoProrrogaDTO>();
								for(LcredSolicitudProrroga lp : listaProrrogas){
									DocumentoProrrogaDTO docto = new DocumentoProrrogaDTO();
									
									Date vencActual = DeStringADate(lp.getId().getVencActual());
									Date vencNuevo = DeStringADate(lp.getId().getVencNuevo());
									docto.setNumeroDocto(lp.getId().getNroCheque());
									docto.setMonto(lp.getId().getMonto().longValue());
									docto.setFechaVencActual(vencActual);
									docto.setFechaVencNuevo(vencNuevo);
									listaDoctoProrrogaAgregados.add(docto);
								}
							}
							 
						}catch (Exception e) {
							log.debug("no existe datos de las prorrogas dm.");
						}	
						 
						
						solicitudOtra = scoringService.getSolicitudOtrasId(solicitud.getId().getNumSolicitud());
						if(solicitudOtra != null){
							 this.setMotivoProrroga(solicitudOtra.getObservacionesInicial());
							 if("A".equals(solicitud.getEstado()) || "R".equals(solicitud.getEstado()) || "NU".equals(solicitud.getEstado())){
								 this.setObservacionesFinales(solicitudOtra.getObservacionesFinal());
							 }
							 log.debug("Existe resgistro en otra solicitud ");
						}
					 	this.setTituloIngreso(solicitud.getDesTiposol());
						if((solicitud.getTipTiposol().trim()).equals(TipoSolicitudType.OS4.getNombre())){
							this.setPaginaIngreso(44);
							this.setTipoSolicitudCodigo("4");
						}	

						  List<ArchivoAdjunto> listaArchivos = scoringService.obtenerArchivosSolicitud(solicitud.getId().getNumSolicitud(),ArchivoAdjuntoType.INGRESO);
						  if(listaArchivos != null){
							 ConceptoDTO obj = null;
							 listaArchivoGuardado = new ArrayList<ConceptoDTO>(0);
							 for(ArchivoAdjunto aa : listaArchivos ){
								 obj = new ConceptoDTO();
								 obj.setNombreArchivo(aa.getNombreAdjunto());
								 obj.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+aa.getUrl());
								 obj.setTipoArchivoType(aa.getTipo());
								 obj.setFechaCreacion(aa.getFechaCreacion());
								 if(aa.getUsuario() != null){
									 obj.setUsuario(aa.getUsuario().getAlias());
								 }else{
									 obj.setUsuario(""); 
								 }
								 listaArchivoGuardado.add(obj);
							 }
						  }						  
						  
						 List<ArchivoAdjunto> listaArchivosRespuesta = scoringService.obtenerArchivosSolicitud(solicitud.getId().getNumSolicitud(),ArchivoAdjuntoType.RESPUESTA);
						 if(listaArchivosRespuesta != null){
							 listaArchivoRespuestaCorreo = new ArrayList<ConceptoDTO>(0);
							 if(listaArchivoGuardado == null){
								 listaArchivoGuardado = new ArrayList<ConceptoDTO>(0); 
							 }else{
								 log.debug("cantiadad registros #0", listaArchivoGuardado.size());
							 }							 
							 ConceptoDTO obj = null;
							 for(ArchivoAdjunto aa : listaArchivosRespuesta ){
								 obj = new ConceptoDTO();
								 obj.setNombreArchivo(aa.getNombreAdjunto());
								 obj.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+aa.getUrl());
								 obj.setTipoArchivoType(aa.getTipo());
								 obj.setFechaCreacion(aa.getFechaCreacion());
								 if(aa.getUsuario() != null){
									 obj.setUsuario(aa.getUsuario().getAlias());
								 }else{
									 obj.setUsuario(""); 
								 }
								 listaArchivoGuardado.add(obj);
								 listaArchivoRespuestaCorreo.add(obj);
							 }
						 }		
						 
						 List<LcredArchivoAdjuntos> listaArchivosRespuestaAntiguos = scoringService.obtenerArchivosSolicitudAntiguas(solicitud.getId().getNumSolicitud(),String.valueOf(this.paginaIngreso));
						 if(listaArchivosRespuestaAntiguos != null){
							 if(listaArchivoGuardado == null){
								 listaArchivoGuardado = new ArrayList<ConceptoDTO>(0); 
							 }else{
								 log.debug("cantiadad registros #0", listaArchivoGuardado.size());
							 }								 
							 ConceptoDTO obj = null;
							 for(LcredArchivoAdjuntos laa : listaArchivosRespuestaAntiguos ){
								 obj = new ConceptoDTO();
								 String[] arreglo = laa.getId().getArchivoAdjunto().split("'\\'");
								 int cant = arreglo.length;
								 if(cant > 0){
									 obj.setNombreArchivo(arreglo[cant-1]);
									 obj.setRutaCompleta(laa.getId().getArchivoAdjunto());
									 obj.setTipoArchivoType(ArchivoAdjuntoType.ANTIGUO);
									 obj.setFechaCreacion(null);
									 obj.setUsuario("");
									 listaArchivoGuardado.add(obj);
								 }
							 }
						 }							
						 
					   this.tipoSolicitudAux = scoringService.obtenerObjetoLcredTipoSolicitud(String.valueOf(this.paginaIngreso));								 
						 
						int tipoCuenta = 0;
						if("Mixto".equals(solicitud.getCanal())){
							tipoCuenta = TipoCuentasKupferType.MX.ordinal();
						}else if("Kupfer Express".equals(solicitud.getCanal())){
							tipoCuenta = TipoCuentasKupferType.KX.ordinal();
						}else if("Grandes Cuentas".equals(solicitud.getCanal())){
							tipoCuenta = TipoCuentasKupferType.GC.ordinal();
						}
					   
					   /*va a buscar los destinatarios de las solictudes*/
					   obtenerCorreo(solicitud.getCodEmisor(), "5",null, null, solicitud.getCodSucursal(), tipoCuenta, solicitud.getUsuarioDevuelve());
					   this.setTipoSolicitudCorreo("5"); 
					   this.modificarProrroga = false;
					   this.cambiarEnSap = true;
					 }
					 
					 this.setListaObservacionesPdf(scoringService.obtenerListaSolicitudObservaciones(this.solicitud.getId().getNumSolicitud()));
					 this.setListaMotivosRechazoPdf(scoringService.getSolicitudMotivoRechazoForSolicitud(this.solicitud.getId().getNumSolicitud()));
				 
				}
		}catch (Exception e) {
			log.error("Error, al eveluar la solicitud #0", e.getMessage());
			
		}
	}
	public String getObtenerCodigoNegocios(String descripcion){
		String codigo= null;
		if(this.conceptosNegociosSessions != null){
			for(ConceptosNegocio cn : conceptosNegociosSessions){
				log.debug("descripcion : #0, desnegocio #1",descripcion, cn.getDescripcion().trim()); 
				if((cn.getDescripcion().trim()).equals(descripcion.trim())){
					codigo = cn.getNegocio().trim();
					break;
				}
			}
		}
		return codigo;	
	}
	public SolicitudUsuarioCorreo getObtenerSolicitudUsuarioCorreo(String ususario){
		SolicitudUsuarioCorreo codigo= null;
		if(this.listaSolicitudUsuarioCorresSessions != null){
			for(SolicitudUsuarioCorreo cn : listaSolicitudUsuarioCorresSessions){
				if(((cn.getUsername().toLowerCase()).trim()).equals((ususario.toLowerCase()).trim())){
					codigo = cn;
					break;
				}
			}
		}
		return codigo;	
	}
	@SuppressWarnings("unchecked")
	public void evaludarDespuesAnalisis(LcredSolicitud solicitud){
		try{
			if(solicitud != null){
				this.setSolicitud(solicitud);
				cliente = new ClienteDTO();
				sacarListas();
				log.debug("Sucursal:"+ solicitud.getSucursalEmisor());
				obtenerSucursal(solicitud.getSucursalEmisor());
				
				/*setear los datos de cliente*/
				cliente.setRut(solicitud.getRutCliente());
				cliente.setRazonSocial(solicitud.getNomCliente());
				cliente.setGiro(solicitud.getGiroCliente());
				cliente.setDireccion(solicitud.getDirCliente());
				cliente.setFono(solicitud.getTelCliente());
				cliente.setFax(solicitud.getFaxCliente());
				cliente.setComuna(solicitud.getComCliente());
				cliente.setCiudad(solicitud.getCiuCliente());
				cliente.setSucursalCliente(sucursal.getDescripcion());
				cliente.setCanalVenta(solicitud.getCanal());
				cliente.setTipoCliente(solicitud.getTipoCliente());
				cliente.setLineaCreditoKH(solicitud.getLinCredito());
				cliente.setLineaCreditoKHUtilizado(solicitud.getLinCreditoUtiliz());
				cliente.setLineaCreditoKHDisponible(solicitud.getLinCreditoDisp());
				cliente.setEstadoLineaCreditoKH(solicitud.getEstadoLcKh());
				cliente.setNumeroRV(solicitud.getNroRv().toString());
				cliente.setSeguro(solicitud.getTipSeguro());
				cliente.setEstadoLineaEnCuotas(solicitud.getEstadoLcCuotas());
				cliente.setCodigoCondicionPago(solicitud.getConPago());
				cliente.setCodigoclasificacionRiesgo(solicitud.getClsRiesgo());
				cliente.setVentasTotal12Meses(solicitud.getVtaTotal12Meses());
				cliente.setCreacionSap(solicitud.getId().getFecSolicitud());	
				cliente.setDmVentasUno(solicitud.getDmVenta());
				cliente.setPrmFacturas(solicitud.getPrmFacturas());
				cliente.setCantMesesVentas(solicitud.getMesesVentas().longValue());
				cliente.setVentasProm12Meses(solicitud.getPrmVentas());
				cliente.setVigenciaSeguro(solicitud.getVigSeguro());
				cliente.setFactProm12Meses(solicitud.getPrmFacturas().longValue());
				
				lcredEstado = ObtenerEstadoSolictud(solicitud.getEstado());
				if(lcredEstado != null){
					cliente.setEstadoSolicitud(lcredEstado.getDesEstado());
					this.setModalAnalista(solicitud.getEstado());
				}else{
					cliente.setEstadoSolicitud(solicitud.getEstado());
				}
				
				cliente.setMontoSeguro(solicitud.getSeguroPesos());
				cliente.setMontoSeguroUf(solicitud.getSeguroUf().longValue());
				
				try{
					if(cliente.getCodigoCondicionPago()!=null){
						Object obj = intranetSapService.sacarDescripCondicionPago(cliente.getCodigoCondicionPago());
						if(obj != null){
							cliente.setCondicionPago(obj.toString());
						}else{
							cliente.setCondicionPago("No Clasificado");
						}
					}else{cliente.setCondicionPago("No Clasificado");}
					
				}catch (Exception e) {
					cliente.setCondicionPago("No Clasificado");
				}

				try{
					if(cliente.getCodigoclasificacionRiesgo() != null){
						Object obj = intranetSapService.sacarDescripClasificacionRiesgo(cliente.getCodigoclasificacionRiesgo());
						if(obj != null){
							cliente.setClasificacionRiesgo(obj.toString());
						}else{
							cliente.setClasificacionRiesgo("No Clasificado");
						}
					}else{cliente.setClasificacionRiesgo("No Clasificado");}
					
				}catch (Exception e) {
					cliente.setClasificacionRiesgo("No Clasificado");
				}
				
				String codigoCanal = solicitud.getCanal();
				if(codigoCanal != null){
					String kx = TipoCuentasKupferType.KX.getNombre().trim();
					String gc = TipoCuentasKupferType.GC.getNombre().trim();
					String mx = TipoCuentasKupferType.MX.getNombre().trim();
					if(kx.equals(codigoCanal.trim())){
						cliente.setCodigoCanal(TipoCuentasKupferType.KX);
					}
					if(gc.equals(codigoCanal.trim())){
						cliente.setCodigoCanal(TipoCuentasKupferType.GC);
					}
					if(mx.equals(codigoCanal.trim())){
						cliente.setCodigoCanal(TipoCuentasKupferType.MX);
					}
				}
				
				
				/*setar los datos de comportamiento comercial*/
				comportamiento = new CompComercialDTO();
				comportamiento.setDiasMoras(solicitud.getDiasMora());
				comportamiento.setDmPort(solicitud.getDm());
				comportamiento.setMontoTotalMoro(solicitud.getMorosidadMonto().longValue());
				comportamiento.setMontoTotalProt(solicitud.getProtestosMonto().longValue());
				comportamiento.setNumeroMoro(solicitud.getMorosidadNro());
				comportamiento.setNumeroProt(solicitud.getProtestosNro());
				
				/*setar los datos del exposicion de riesgo kupfer*/
				expoRiesgoKh = new ExpoRiesgoKhDTO();
				expoRiesgoKh.setPeakCredito(solicitud.getPeackCredito().longValue());
				expoRiesgoKh.setMontoRiesgoKupfer(solicitud.getRiesgoKupfer().longValue());
				long montoRiegoKupferPedidoPorceso = solicitud.getRiesgoKupfer().longValue() + solicitud.getMontoCuotas().longValue();
				expoRiesgoKh.setMontoRiesgoKupferPedidoProceso(montoRiegoKupferPedidoPorceso);
				expoRiesgoKh.setMontoPedidoProceso(solicitud.getMontoCuotas().longValue());
				long montoPeakCreditoPedidoProceso = solicitud.getPeackCredito().longValue() + solicitud.getMontoCuotas().longValue();
				expoRiesgoKh.setMontoPeakCreditoPedidoProceso(montoPeakCreditoPedidoProceso);
				expoRiesgoKh.setMontoAsegurado(solicitud.getMontoAsegurado().longValue());

				
				log.debug("solicitud.getTipTiposol() : #0", solicitud.getTipTiposol());
				 if((solicitud.getTipTiposol().trim()).equals(TipoSolicitudType.V1N.getNombre()) || 
				    (solicitud.getTipTiposol().trim()).equals(TipoSolicitudType.V1C.getNombre())){
						try{ 
							 venta = (LcredSolicitudVtapuntual)entityManager
									 .createQuery("Select vp from LcredSolicitudVtapuntual vp where vp.numSolicitud=:solAux")
									 .setParameter("solAux", solicitud.getId().getNumSolicitud()).getSingleResult();
						}catch (Exception e) {
							log.debug("no existe datos de venta puntual");
						}
				 }else if((solicitud.getTipTiposol().trim()).equals(TipoSolicitudType.LC1.getNombre()) || (solicitud.getTipTiposol().trim()).equals(TipoSolicitudType.LC2.getNombre()) ||
						 (solicitud.getTipTiposol().trim()).equals(TipoSolicitudType.LC3.getNombre())){
					    try{ 
							 credito = (LcredSolicitudLcredito)entityManager
									 .createQuery("Select lc from LcredSolicitudLcredito lc where lc.numSolicitud=:solAux")
									 .setParameter("solAux", solicitud.getId().getNumSolicitud()).getSingleResult();
						 }catch (Exception e) {
							log.debug("no existe datos de linea credito.");
						 }
						 
					 
				 }else if((solicitud.getTipTiposol().trim()).equals(TipoSolicitudType.CR1.getNombre()) || (solicitud.getTipTiposol().trim()).equals(TipoSolicitudType.CR2.getNombre()) ||
						 (solicitud.getTipTiposol().trim()).equals(TipoSolicitudType.CRP3.getNombre()) ||  (solicitud.getTipTiposol().trim()).equals(TipoSolicitudType.CRP4.getNombre())){
					 	
					  try{ 
						  condicion = (LcredSolicitudCondiciones)entityManager
								 .createQuery("Select sc from LcredSolicitudCondiciones sc where sc.numSolicitud=:solAux")
								 .setParameter("solAux", solicitud.getId().getNumSolicitud()).getSingleResult();
					  }catch (Exception e) {
						log.debug("no existe datos de condiciones.");
					  }		
						 
				 }else if((solicitud.getTipTiposol().trim()).equals(TipoSolicitudType.OS1.getNombre()) || (solicitud.getTipTiposol().trim()).equals(TipoSolicitudType.OS2.getNombre()) || 
						 (solicitud.getTipTiposol().trim()).equals(TipoSolicitudType.OS.getNombre())){/***************** Bloqueo y Desbloqueo ***********************/
					 	
					 	try{
							 bloqueo = (LcredSolicitudBloqueos)entityManager
									 .createQuery("Select sb from LcredSolicitudBloqueos sb where sb.numSolicitud=:solAux")
									 .setParameter("solAux", solicitud.getId().getNumSolicitud()).getSingleResult();
						}catch (Exception e) {
							log.debug("no existe datos de bloqueo o desbloqueo.");
						}
					 	
					 	solicitudOtra = scoringService.getSolicitudOtrasId(solicitud.getId().getNumSolicitud());
					 
				 }else if((solicitud.getTipTiposol().trim()).equals(TipoSolicitudType.OS3.getNombre())){/***************** Creacion DM ***********************/
					 try{
						   listaDms = scoringService.getSacarListaDms(solicitud.getId().getNumSolicitud());
						   if(listaDms != null){
							   this.setListaClienteDMs(listaDms);
						   }
					}catch (Exception e) {
						log.debug("no existe datos de los dm. #0",e.getMessage() );
					}		
					 	
					 solicitudOtra = scoringService.getSolicitudOtrasId(solicitud.getId().getNumSolicitud());
					 if(solicitudOtra != null){
						 log.debug("Existe resgistro en otra solicitud ");
					 }
				 }else if((solicitud.getTipTiposol().trim()).equals(TipoSolicitudType.OS4.getNombre())){/********************* Prorroga ********************/
					 try{
						 listaProrrogas = (List<LcredSolicitudProrroga>)entityManager
								 .createQuery("Select lp from LcredSolicitudProrroga lp where lp.id.numSolicitud=:solAux")
								 .setParameter("solAux", solicitud.getId().getNumSolicitud()).getResultList();	
							if(listaProrrogas != null && listaProrrogas.size() > 0){
								this.listaDoctoProrrogaAgregados = new ArrayList<DocumentoProrrogaDTO>();
								for(LcredSolicitudProrroga lp : listaProrrogas){
									DocumentoProrrogaDTO docto = new DocumentoProrrogaDTO();
									Date vencActual = DeStringADate(lp.getId().getVencActual());
									Date vencNuevo = DeStringADate(lp.getId().getVencNuevo());
									docto.setNumeroDocto(lp.getId().getNroCheque());
									docto.setMonto(lp.getId().getMonto().longValue());
									docto.setFechaVencActual(vencActual);
									docto.setFechaVencNuevo(vencNuevo);
									listaDoctoProrrogaAgregados.add(docto);
								}
							}
					}catch (Exception e) {
						log.debug("no existe datos de las prorrogas dm.");
					}	
					 
					 
					 solicitudOtra = scoringService.getSolicitudOtrasId(solicitud.getId().getNumSolicitud());
				 	if(solicitudOtra != null){
				 		this.setMotivoProrroga(solicitudOtra.getObservacionesInicial());
				 	}
				 }
			}
		}catch (Exception e) {
			log.error("Error, al eveluar la solictud #0", e.getMessage());
		}
	}
	public void solicitudSeleccionada(){
		try{
			try{
				if(idSolicitud != null){
					solicitud = entityManager.find(LcredSolicitud.class, idSolicitud);
				}

			}catch (Exception e) {
				log.error("Error, al sacar la solicitud seleccionada", e.getMessage());
			}

		}catch (Exception e) {
			log.error("Error, al sacar la solicitud seleccionada", e.getMessage());
		}
	}
	public void obtenerSucursal(String codigo){
		if(listaSucursales != null){
			for(Sucursal s : listaSucursales){
				if(s.getCodigo().equals(codigo)){
					setSucursal(s);
					sucursal = s;
					break;
				}
			}
		}
	}
	@SuppressWarnings("unchecked")
	public void sacarListas(){
		try{
			listaSucursales = (List<Sucursal>)entityManager.createQuery("select suc from Sucursal suc ").getResultList();
		}catch (Exception e) {
			log.error("Error, al sacar la lista de sucursales #0", e.getMessage());
		}
	}
	public LcredEstado ObtenerEstadoSolictud(String codigo){
		LcredEstado estado = null;
		try{
			estado = (LcredEstado)entityManager.find(LcredEstado.class, codigo);
		}catch (Exception e) {
			log.error("Error, al sacar la lista de sucursales #0", e.getMessage());
			estado = null;
		}
		return estado;
	}
	public void insertHitos(LcredSolicitud solAux, LcredEstado estadoAux, String accion ,int cantidad){
		try{
			SolicitudHitos hitos = new SolicitudHitos();
			if("RESPUESTA".equals(accion)){
				hitos.setEmisor("");
				hitos.setUsuarioActual(usuarioSegur.getAlias());
				hitos.setFechaHora(new Date());
				hitos.setCodigoEstado(estadoAux.getCodEstado());
				hitos.setDescripcionEstado(estadoAux.getDesEstado());
				hitos.setIdSolicitud(solAux.getId().getNumSolicitud());
				if(estadoAux != null && (estadoAux.getCodEstado().equals("B") || estadoAux.getCodEstado().equals("SA"))){
					hitos.setEmisor(usuarioSegur.getAlias());
					hitos.setCodEstadoDerivada(estadoAux.getCodEstado());
				}
				
				if(cantidad == 1){
					SolicitudUsuarioCorreo ucoreo = this.listaCorreoAnaDer.get(0);
					if(usuarioLogueado.getAlias().toLowerCase().equals("administrador")){
						hitos.setUsuarioActual(usuarioLogueado.getAlias());
					}else{
						hitos.setUsuarioActual("VARIOS");
					}
				}else{
					hitos.setUsuarioActual("VARIOS");
				}			

			}else if("NADA".equals(accion)){
				hitos.setEmisor("");
				hitos.setUsuarioActual(usuarioSegur.getAlias());
				hitos.setFechaHora(new Date());
				hitos.setCodigoEstado(estadoAux.getCodEstado());
				hitos.setDescripcionEstado(estadoAux.getDesEstado());
				hitos.setIdSolicitud(solAux.getId().getNumSolicitud());
				hitos.setUsuarioActual(usuarioSegur.getAlias());
			}
			try{
				long numero = scoringService.obtenerNumeroHitoToLog(1);
				hitos.setSystemId(numero);
				boolean exito = scoringService.persistSolicitudHitos(hitos);
				log.debug("verificacion si inserto registro hitos #0", exito);
				
			}catch (Exception e) {
				log.error("Error, al insertar el hitos de la solicitud #0", e.getMessage());
			}				
			
		}catch (Exception e) {
			log.error("Error, al insertar los hitos de respuesta.", e.getMessage());
		}
		
	}
	public void insertarLogs(LcredSolicitud sol, int opcion){
		/*ingreso de logs*/
		try{
			if(opcion == 1){/*solo esta revisando la solicitud*/
				String codigo = "Z";
				Estados estadoLogs = scoringService.obtenerEstados(codigo.charAt(0));
				StringBuffer cadena = new StringBuffer();
				boolean exito = false;
				if(estadoLogs != null){
					cadena.append("Revisando la solicitud. ");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), String.valueOf(estadoLogs.getCodEstado()), estadoLogs.getDesEstado(), cadena.toString());
				}else{
					cadena.append("Revisando la solicitud. ");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), "", "", cadena.toString());
				}
						
				log.debug("verificacion si inserto registro logs #0", exito);
			}else if(opcion == 2){/*aca se esta daando aprobaciones */
				String codigo = "A";
				Estados estadoLogs = scoringService.obtenerEstados(codigo.charAt(0));
				StringBuffer cadena = new StringBuffer();
				boolean exito = false;
				if(estadoLogs != null){
					cadena.append("Se da aprobaci√≥n la solicitud.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), String.valueOf(estadoLogs.getCodEstado()), estadoLogs.getDesEstado(), cadena.toString());
				}else{
					cadena.append("Se da aprobaci√≥n la solicitud.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), "", "", cadena.toString());
				}
						
				log.debug("verificacion si inserto registro logs #0", exito);
				
				
			}else if(opcion == 3){/*aca se cambia elestado salir sin modifica */
				String codigo = "X";
				Estados estadoLogs = scoringService.obtenerEstados(codigo.charAt(0));
				StringBuffer cadena = new StringBuffer();
				boolean exito = false;
				if(estadoLogs != null){
					cadena.append("Salir de la solicitud sin modificar.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), String.valueOf(estadoLogs.getCodEstado()), estadoLogs.getDesEstado(), cadena.toString());
				}else{
					cadena.append("Se da aprobaci√≥n la solicitud.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), "", "", cadena.toString());
				}
						
				log.debug("verificacion si inserto registro logs #0", exito);				
				
			}else if(opcion == 4){/*aca se cambia elestado salir con modifica */
				String codigo = "Y";
				Estados estadoLogs = scoringService.obtenerEstados(codigo.charAt(0));
				StringBuffer cadena = new StringBuffer();
				boolean exito = false;
				if(estadoLogs != null){
					cadena.append("Salir de la solicitud sin modificar.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), String.valueOf(estadoLogs.getCodEstado()), estadoLogs.getDesEstado(), cadena.toString());
				}else{
					cadena.append("Se da aprobaci√≥n la solicitud.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), "", "", cadena.toString());
				}
						
				log.debug("verificacion si inserto registro logs #0", exito);				
				
			}else if(opcion == 5){
				String codigo = "O";
				Estados estadoLogs = scoringService.obtenerEstados(codigo.charAt(0));
				StringBuffer cadena = new StringBuffer();
				boolean exito = false;
				if(estadoLogs != null){
					cadena.append("Ingresa de observaciones de  la solicitud.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), String.valueOf(estadoLogs.getCodEstado()), estadoLogs.getDesEstado(), cadena.toString());
				}else{
					cadena.append("Ingresa de observaciones de  la solicitud.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), "", "", cadena.toString());
				}
						
				log.debug("verificacion si inserto registro logs #0", exito);					
			}else if(opcion == 6){
				String codigo = "D";
				Estados estadoLogs = scoringService.obtenerEstados(codigo.charAt(0));
				StringBuffer cadena = new StringBuffer();
				boolean exito = false;
				if(estadoLogs != null){
					cadena.append("Devoluci√≥n de la solicitud.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), String.valueOf(estadoLogs.getCodEstado()), estadoLogs.getDesEstado(), cadena.toString());
				}else{
					cadena.append("Devoluci√≥n de la solicitud.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), "", "", cadena.toString());
				}
						
				log.debug("verificacion si inserto registro logs #0", exito);					
			}else if(opcion == 7){
				String codigo = "N";
				Estados estadoLogs = scoringService.obtenerEstados(codigo.charAt(0));
				StringBuffer cadena = new StringBuffer();
				boolean exito = false;
				if(estadoLogs != null){
					cadena.append("Anular de la solicitud.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), String.valueOf(estadoLogs.getCodEstado()), estadoLogs.getDesEstado(), cadena.toString());
				}else{
					cadena.append("Anular de la solicitud.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), "", "", cadena.toString());
				}
						
				log.debug("verificacion si inserto registro logs #0", exito);					
			}else if(opcion == 8){
				String codigo = "A";
				Estados estadoLogs = scoringService.obtenerEstados(codigo.charAt(0));
				StringBuffer cadena = new StringBuffer();
				boolean exito = false;
				if(estadoLogs != null){
					cadena.append("Aprobar de la solicitud.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), String.valueOf(estadoLogs.getCodEstado()), estadoLogs.getDesEstado(), cadena.toString());
				}else{
					cadena.append("Aprobar de la solicitud.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), "", "", cadena.toString());
				}
						
				log.debug("verificacion si inserto registro logs #0", exito);					
			}else if(opcion == 9){
				String codigo = "K";
				Estados estadoLogs = scoringService.obtenerEstados(codigo.charAt(0));
				StringBuffer cadena = new StringBuffer();
				boolean exito = false;
				if(estadoLogs != null){
					cadena.append("Analisis Ejecutivo de la solicitud.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), String.valueOf(estadoLogs.getCodEstado()), estadoLogs.getDesEstado(), cadena.toString());
				}else{
					cadena.append("Analisis Ejecutivo de la solicitud.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), "", "", cadena.toString());
				}
						
				log.debug("verificacion si inserto registro logs #0", exito);					
			}else if(opcion == 10){
				String codigo = "Q";
				Estados estadoLogs = scoringService.obtenerEstados(codigo.charAt(0));
				StringBuffer cadena = new StringBuffer();
				boolean exito = false;
				if(estadoLogs != null){
					cadena.append("Analisis Analista de la solicitud.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), String.valueOf(estadoLogs.getCodEstado()), estadoLogs.getDesEstado(), cadena.toString());
				}else{
					cadena.append("Analisis Analista de la solicitud.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), "", "", cadena.toString());
				}
						
				log.debug("verificacion si inserto registro logs #0", exito);					
			}else if(opcion == 11){ /*rechazo*/
				String codigo = "R";
				Estados estadoLogs = scoringService.obtenerEstados(codigo.charAt(0));
				StringBuffer cadena = new StringBuffer();
				boolean exito = false;
				if(estadoLogs != null){
					cadena.append("Rechazada de la solicitud.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), String.valueOf(estadoLogs.getCodEstado()), estadoLogs.getDesEstado(), cadena.toString());
				}else{
					cadena.append("Rechazada de la solicitud.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), "", "", cadena.toString());
				}
						
				log.debug("verificacion si inserto registro logs #0", exito);	
				
			}else if(opcion == 12){ /*enviado a seguro*/
				String codigo = "H";
				Estados estadoLogs = scoringService.obtenerEstados(codigo.charAt(0));
				StringBuffer cadena = new StringBuffer();
				boolean exito = false;
				if(estadoLogs != null){
					cadena.append("Envia a Seguro de la solicitud.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), String.valueOf(estadoLogs.getCodEstado()), estadoLogs.getDesEstado(), cadena.toString());
				}else{
					cadena.append("Envia a Seguro de la solicitud.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), "", "", cadena.toString());
				}
						
				log.debug("verificacion si inserto registro logs #0", exito);					
			}else if(opcion == 13){ /*enviar a analsis*/
				String codigo = "J";
				Estados estadoLogs = scoringService.obtenerEstados(codigo.charAt(0));
				StringBuffer cadena = new StringBuffer();
				boolean exito = false;
				if(estadoLogs != null){
					cadena.append("Solicitud Enviada a An√°lisis.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), String.valueOf(estadoLogs.getCodEstado()), estadoLogs.getDesEstado(), cadena.toString());
				}else{
					cadena.append("Solicitud Enviada a An√°lisis.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), "", "", cadena.toString());
				}
						
				log.debug("verificacion si inserto registro logs #0", exito);					
			}else if(opcion == 14){ /*enviar a aprobacion*/
				String codigo = "M";
				Estados estadoLogs = scoringService.obtenerEstados(codigo.charAt(0));
				StringBuffer cadena = new StringBuffer();
				boolean exito = false;
				if(estadoLogs != null){
					cadena.append("Solicitud Enviada a Aprobaci√≥n.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), String.valueOf(estadoLogs.getCodEstado()), estadoLogs.getDesEstado(), cadena.toString());
				}else{
					cadena.append("Solicitud Enviada a Aprobaci√≥n.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), "", "", cadena.toString());
				}
						
				log.debug("verificacion si inserto registro logs #0", exito);					
			}
			
			
			
		}catch (Exception e) {
			log.error("Error, al insertar el logs de la solicitud #0", e.getMessage());
		}
	}
	public void salir(){
	  try{
		if(solicitudSeleccionada != null){
			solicitud = (LcredSolicitud)entityManager.
					createQuery("select s from LcredSolicitud s where s.id.numSolicitud=:numSolicitud")
					.setParameter("numSolicitud", solicitudSeleccionada).getSingleResult();
			
			if(solicitud.getEstado().equals("I")){
				insertarLogs(solicitud,3);
				entityManager.createQuery("update LcredSolicitud set evaluar=0, usuarioActual=null  where id.numSolicitud=:sol")
							.setParameter("sol", solicitud.getId()
							.getNumSolicitud()).executeUpdate();
				entityManager.flush();
			}else {
				insertarLogs(solicitud,4);
				entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
							 .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
				entityManager.flush();
			}
		}
		log.debug("parametro :#0 ", tabGrilla);
	  }catch (Exception e) {
		log.error("error al devolverse y cambiar el estado de la evalucion. #0", e.getMessage());
	  }	
	  return ;
		
	}
	public void cambioEvaluacionSolicitud(LcredSolicitud sol){
		try{
			if(sol != null){
				entityManager.createQuery("update LcredSolicitud set evaluar=1 where id.numSolicitud=:sol")
				             .setParameter("sol",  sol.getId()
				             .getNumSolicitud())
				             .executeUpdate();
				entityManager.flush();
			}
			
		}catch (Exception e) {
			log.debug("Error al cambiar el estado de la evaluacion.");
		}
		
		
	}
	
	/*** Obtencion datos cuenta corriente***/
	private List <DeudaActual> ctaCteList = new ArrayList<DeudaActual>();
	public List<DeudaActual> getCtaCteList() {	return ctaCteList;	}
	
	public void informacionCtaCte(){
		/*limpiar la lista */
		ctaCteList = new ArrayList<DeudaActual>(0);
		this.setFechaDeauda(null);
		this.setMontoActualCuentaCorriente(new Long(0));
		
		/*fecha Actual*/
		setFechaActualCtaCte(new Date());
		
		SapSystem system = new SapSystem(globalParameters.getNameSap(),
				globalParameters.getIpSap(), globalParameters.getClientSap(), 
				globalParameters.getSystemNumberSap(),globalParameters.getUserSap(),
				globalParameters.getPasswordSap()); 

		Connect connect = new Connect(system);
		functionCtaCte = connect.getFunction("ZFIFN_CTACTE"); // Nombre RFC
		functionCtaCte.getImportParameterList().setValue("CODCLIENTE", cliente.getCleanRut().toUpperCase()); // Paso de parametros
		connect.execute(functionCtaCte);
		JCoTable datosCtaCte = functionCtaCte.getTableParameterList().getTable("DETALLE"); //tabla de salida
		log.debug(cliente.getCleanRut().toUpperCase());
		log.debug(datosCtaCte);
		
		for (int i = 0; i < datosCtaCte.getNumRows(); i++){
			DeudaActual ctaCte = new DeudaActual();
			datosCtaCte.setRow(i);
			ctaCte.setRut(cliente.getCleanRut().toUpperCase());
			ctaCte.setDctoContable(datosCtaCte.getValue("DOCTO_CONTABLE").toString());
			ctaCte.setFechaCont(datosCtaCte.getDate("FECHA_CONTABLE"));
			ctaCte.setClaseDoc(datosCtaCte.getValue("CLASE_DOCTO").toString());
			ctaCte.setNumDcto(datosCtaCte.getValue("NUM_DOCTO").toString());
			ctaCte.setNumFactura(datosCtaCte.getValue("NUM_FACTURA").toString());
			ctaCte.setFechaVcto(datosCtaCte.getDate("FEC_VCTO"));
			ctaCte.setIndCME(datosCtaCte.getValue("IND_CME").toString());
			ctaCte.setReferencia(datosCtaCte.getValue("REFERENCIA").toString());
			ctaCte.setMonto(((BigDecimal)datosCtaCte.getValue("MTO_DOCTO")).longValue());
			ctaCte.setCodCliente(datosCtaCte.getValue("CODCLIENTE").toString());
			ctaCte.setTexto(datosCtaCte.getValue("TEXTO").toString());
			ctaCte.setDiasMora(((BigDecimal)datosCtaCte.getValue("DIASMORA")).intValue());
			ctaCte.setFechaIngreso(new Date());
			this.montoActualCuentaCorriente += ctaCte.getMonto();
			ctaCteList.add(ctaCte);	
		}
		
		if(listaFechas == null){
			listaFechas = scoringService.getFechasCuentaCorriente(cliente.getCleanRut().toUpperCase());
		}
		
		
	}
	public void limpiarDatos(){
		if(ctaCteList != null){
			ctaCteList.clear();

		}
	}
	public void consultarInformacionCtaCteFechaDeterminada(){
		/*fecha Actual*/
		this.montoActualCuentaCorriente = new Long(0);
		
		if(this.fechaDeauda == null){
			FacesMessages.instance().add(Severity.WARN,"Debe seleccionar una fecha menos o igual a la actual.");
			return;
		}else{
			this.setFechaActualCtaCte(null);
			log.debug("la fecha seleccionada es #0", this.fechaDeauda);
		}
		SimpleDateFormat formatoDelTexto = new SimpleDateFormat("dd/MM/yyyy");
		Date fecha = null;
		try {
			 fecha = formatoDelTexto.parse(this.fechaDeauda);
		} catch (ParseException ex) {
			ex.printStackTrace();
			return;
		}		
		
		
		List<DeudaActual> listaDeudas = scoringService.getConsultarHistorialCuentaCorriente(cliente.getCleanRut().toUpperCase(), fecha);
		if(listaDeudas != null && listaDeudas.size() >0){
			for(DeudaActual da :listaDeudas){
				this.montoActualCuentaCorriente += da.getMonto();
			}
			ctaCteList = listaDeudas;
		}else{
			if(ctaCteList != null){
				ctaCteList = null;
			}
		}
		
	}	
	public void guardarInformacionCtaCte(){
		try{
			boolean ingresar = scoringService.getVerificarHistorialCuentaCorriente(cliente.getCleanRut().toUpperCase(), new Date());
			if(ingresar ==  false){
				if(ctaCteList != null && ctaCteList.size() > 0){
					for(DeudaActual ctaCte :ctaCteList){
						entityManager.persist(ctaCte);
					}
					entityManager.flush();
				}
				FacesMessages.instance().add(Severity.INFO,"Se guardo la informaci√≥n actual de la cuenta corriente con fecha actual.");
			}else{
				FacesMessages.instance().add(Severity.WARN,"Ya existe registros con la fecha actual.");
			}
			
		}catch (Exception e) {
			log.error("Error al guardar registro de la cuenta corriente del cliente #0", e.getMessage());
			FacesMessages.instance().add(Severity.ERROR,"Error al ingresar los registro de la cuenta corriente.");
		}
	}
	public void limpiarInformacionCtaCteFechaDeterminada(){
		try{
			this.setFechaDeauda(null);
			informacionCtaCte();
			
		}catch (Exception e) {
			log.error("error al limpiar la grilla y actualizar nuevamente ", e.getMessage());
		}
		
	}
	public void ingresoObservaciones(){
		if(this.solicitud != null && this.tipoSolicitudAux != null){
			log.debug("solicitud #0 tipo de solicitud #1", solicitud.getId().getNumSolicitud(), tipoSolicitudAux.getCodTipoSolicitud());
			this.observacionesModel = null;
			consultarObservacion();
		}
		
		
	}
	public void gnuardarObservaciones(){
		try{
			if(this.observacionesModel == null){
				FacesMessages.instance().add(Severity.ERROR,"Debe ingresar una observaci√≥n." );
				return;					
			}

			LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
			Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
			if(correlativo != null){
				id.setCorrelativo(correlativo);
				id.setFecha(new Date());
				id.setHora(new Date());
				id.setNumSolicitud(solicitud.getId().getNumSolicitud());
				id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
				id.setObservacion(this.observacionesModel);
				id.setUsuario(usuarioSegur.getAlias());
				LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
				obser.setId(id);
				scoringService.persistSolicitudObservaciones(obser);
				insertarLogs(solicitud, 5);
			}
			this.observacionesModel = null;
		}catch (Exception e) {
			log.error("error, al guardar la observaciones #0", e.getMessage());
		}
		
		consultarObservacion();
	}
	public void consultarObservacion(){
		try{
			if(this.solicitud != null){
				List<LcredSolicitudObservaciones> lista = scoringService.obtenerListaSolicitudObservaciones(this.solicitud.getId().getNumSolicitud());
				if(lista != null){
					this.setListaObservaciones(lista);
//					this.listaObservaciones = new ArrayList<LcredSolicitudObservaciones>();
//					for(LcredSolicitudObservaciones obs : lista){
//						String cadena = obs.getId().getObservacion();
//						if(cadena != null && cadena.length() < 170){
//							String[] vsplit = cadena.split(" ");
//							if(vsplit != null && vsplit.length > 1){
//								this.listaObservaciones.add(obs);
//							}else if(vsplit != null && vsplit.length == 1){
//								StringBuffer cadenaNueva = new StringBuffer();
//								Double cant = Double.parseDouble(String.valueOf(cadena.length()))/30;
//								int parteEntera = (int)cant.doubleValue();
//								Double decimal = cant - parteEntera;
//								if(decimal >= 0.5){
//									parteEntera++;
//								}
//								int comienzo = 0;
//								int limite = 30;
//								for(int i=0; i<parteEntera;i++){
//									
//									if((i+1)<parteEntera){
//										cadenaNueva.append(cadena.substring(comienzo, limite)).append(" ");
//									}
//									if(i == (parteEntera -1)){
//										cadenaNueva.append(cadena.substring(comienzo, cadena.length())).append(" ");
//									}
//									comienzo = (limite + 1);
//									limite = (comienzo - 1) + 30;
//								}
//								obs.getId().setObservacion(cadenaNueva.toString());
//								this.listaObservaciones.add(obs);
//							}
//						}else{
//							StringBuffer cadenaNueva = new StringBuffer();
//							String[] cadenaSplit = obs.getId().getObservacion().split(" ");
//							for(String frase : cadenaSplit){
//								if(frase != null && frase.length() < 30){
//									cadenaNueva.append(frase).append(" ");
//								}else{
//									Double cant = Double.parseDouble(String.valueOf(frase.length()))/30;
//									int parteEntera = (int)cant.doubleValue();
//									Double decimal = cant - parteEntera;
//									if(decimal >= 0.5){
//										parteEntera++;
//									}
//									int comienzo = 0;
//									int limite = 30;
//									for(int i=0; i<parteEntera;i++){
//										
//										if((i+1)<parteEntera){
//											cadenaNueva.append(frase.substring(comienzo, limite)).append(" ");
//										}
//										if(i == (parteEntera -1)){
//											cadenaNueva.append(frase.substring(comienzo, frase.length())).append(" ");
//										}
//										comienzo = (limite + 1);
//										limite = (comienzo - 1) + 30;
//									}
//									obs.getId().setObservacion(cadenaNueva.toString());
//								}
//							}
//						  this.listaObservaciones.add(obs);
//						}
//					}
				}
			}
		}catch (Exception e) {
			log.error("Error al sacar los aobservacioes de la solicitud selecionadas #0",e.getMessage());
		}
		
	}
	public List<LcredSolicitudObservaciones> consultarObservacionPorIdSolicitud(Long idSolicitud){
		List<LcredSolicitudObservaciones> listaFinales = new ArrayList<LcredSolicitudObservaciones>(0);
		try{
			if(idSolicitud != null){
				List<LcredSolicitudObservaciones> lista = scoringService.obtenerListaSolicitudObservacionesDesc(idSolicitud);
				if(lista != null){
					for(LcredSolicitudObservaciones obs : lista){
						String cadena = obs.getId().getObservacion();
						if(cadena != null && cadena.length() < 170){
							String[] vsplit = cadena.split(" ");
							if(vsplit != null && vsplit.length > 1){
								listaFinales.add(obs);
							}else if(vsplit != null && vsplit.length == 1){
								StringBuffer cadenaNueva = new StringBuffer();
								Double cant = Double.parseDouble(String.valueOf(cadena.length()))/30;
								int parteEntera = (int)cant.doubleValue();
								Double decimal = cant - parteEntera;
								if(decimal >= 0.5){
									parteEntera++;
								}
								int comienzo = 0;
								int limite = 30;
								for(int i=0; i<parteEntera;i++){
									
									if((i+1)<parteEntera){
										cadenaNueva.append(cadena.substring(comienzo, limite)).append(" ");
									}
									if(i == (parteEntera -1)){
										cadenaNueva.append(cadena.substring(comienzo, cadena.length())).append(" ");
									}
									comienzo = (limite + 1);
									limite = (comienzo - 1) + 30;
								}
								obs.getId().setObservacion(cadenaNueva.toString());
								listaFinales.add(obs);
							}
						}else{
							StringBuffer cadenaNueva = new StringBuffer();
							String[] cadenaSplit = obs.getId().getObservacion().split(" ");
							for(String frase : cadenaSplit){
								if(frase != null && frase.length() < 30){
									cadenaNueva.append(frase).append(" ");
								}else{
									Double cant = Double.parseDouble(String.valueOf(frase.length()))/30;
									int parteEntera = (int)cant.doubleValue();
									Double decimal = cant - parteEntera;
									if(decimal >= 0.5){
										parteEntera++;
									}
									int comienzo = 0;
									int limite = 30;
									for(int i=0; i<parteEntera;i++){
										
										if((i+1)<parteEntera){
											cadenaNueva.append(frase.substring(comienzo, limite)).append(" ");
										}
										if(i == (parteEntera -1)){
											cadenaNueva.append(frase.substring(comienzo, frase.length())).append(" ");
										}
										comienzo = (limite + 1);
										limite = (comienzo - 1) + 30;
									}
									obs.getId().setObservacion(cadenaNueva.toString());
								}
							}
							listaFinales.add(obs);
						}
					}
				}
			}
			if(listaFinales != null && listaFinales.size() > 0){
				return listaFinales;
			}else{
				return null;
			}
			
		}catch (Exception e) {
			log.error("Error al sacar las observacioes de la solicitud selecionadas #0",e.getMessage());
			return null;
		}
		
	}	
	public List<ConceptoDTO> obntenerObservacionesEnConcepto(Long idSolicitud){
		List<ConceptoDTO> listaConceptosFinales = null;
		try{
			if(idSolicitud != null){
				List<LcredSolicitudObservaciones> lista = scoringService.obtenerListaSolicitudObservacionesDesc(idSolicitud);
				if(lista != null && lista.size() > 0 ){
					listaConceptosFinales = new ArrayList<ConceptoDTO>(0);
					for(LcredSolicitudObservaciones lso : lista){
						ConceptoDTO nuevo = new ConceptoDTO();
						nuevo.setCodigo(lso.getId().getCorrelativo().toString() +" - "+lso.getId().getUsuario() );
						nuevo.setUsuario(lso.getId().getUsuario());
						nuevo.setDescripcion(lso.getId().getObservacion());
						listaConceptosFinales.add(nuevo);
					}
				}
			}
			
			
		}catch (Exception e) {
			log.error("error, al organizar las observaaciones #0", e.getMessage());
		}
		return listaConceptosFinales;
	}

	public List<ConceptoDTO> obntenerObservacionesEnConceptoSoloDescripcion(Long idSolicitud){
		List<ConceptoDTO> listaConceptosFinales = null;
		try{
			if(idSolicitud != null){
				List<LcredSolicitudObservaciones> lista = scoringService.obtenerListaSolicitudObservacionesDesc(idSolicitud);
				if(lista != null && lista.size() > 0 ){
					listaConceptosFinales = new ArrayList<ConceptoDTO>(0);
					for(LcredSolicitudObservaciones lso : lista){
						ConceptoDTO nuevo = new ConceptoDTO();
						nuevo.setCodigo(lso.getId().getUsuario() );
						nuevo.setUsuario(lso.getId().getUsuario());
						nuevo.setDescripcion(lso.getId().getObservacion());
						listaConceptosFinales.add(nuevo);
						break;
					}
				}
			}
			
			
		}catch (Exception e) {
			log.error("error, al organizar las observaaciones #0", e.getMessage());
		}
		return listaConceptosFinales;
	}
	
	
	public void limpiarObservaciones(){
		this.listaObservaciones = null;
		this.observacionesModel = null;
		
	}
	public void ingresoDevolucion(){
	 log.debug("metodo inicio del ingresoDevolucion()");	
		if(this.paginaIngreso == 11 || this.paginaIngreso == 12){
			if(this.solicitud != null && this.tipoSolicitudAux != null){
				log.debug("solicitud #0 tipo de solicitud #1", solicitud.getId().getNumSolicitud(), tipoSolicitudAux.getCodTipoSolicitud());
				if(solicitud != null){
					if(solicitud.getEstado().equals("DE")){
						this.mensajeGlogal = "La solicitud fue devuelta al remitente para correci√≥n.";
						return;
					}else if(solicitud.getEstado().equals("I") || solicitud.getEstado().equals("N") || solicitud.getEstado().equals("E")){
						this.mensajeGlogal = null;
					}else{
						this.mensajeGlogal = "La solicitud no esta en estado inicial ni analisis analista para devolver al remitente.";
						return;
					}
				}
				
				if(this.normalCuota != null || this.montoNuevo != null || this.pieNuevo != null){
					if(this.normalCuota == null){
						this.mensajeGlogal = "Debe ingresar el tipo de venta de la solicitud.";
						return;				
					}else{
						if("".equals(this.normalCuota)){
							this.mensajeGlogal = "Debe ingresar el tipo de venta de la solicitud.";
							return;							
						}
					}
					
					this.modificarVenta = false;
				}
				
				if(this.listaUsuarioCorreoagregados ==null){
					this.mensajeGlogal = "Debe ingresar los usuarios para el envio de correo.";
					return;
				}else{
					if(this.listaUsuarioCorreoagregados.size() == 0 ){
						this.mensajeGlogal = "Debe ingresar los usuarios para el envio de correo.";
						return ;
					}
				}
			
				if(this.observacionesFinales ==null){
					this.mensajeGlogal = "Debe ingresar una observaci√≥n final.";
					return;
				}else{
					if("".equals(this.observacionesFinales)){
						this.mensajeGlogal = "Debe ingresar una observaci√≥n final.";
						return ;
					}
				}
				
				this.mensajeGlogal = null;
			}else{
				this.mensajeGlogal = "La solicitud no tiene asociada el tipo de solicitud...";
			}
		}else if(this.paginaIngreso == 21 || this.paginaIngreso == 22 || this.paginaIngreso == 23 ){
		
			if(this.solicitud != null && this.tipoSolicitudAux != null){
				log.debug("solicitud #0 tipo de solicitud #1", solicitud.getId().getNumSolicitud(), tipoSolicitudAux.getCodTipoSolicitud());
				/*verificacion de estado de la solicitud*/
				if(solicitud != null){
					if(solicitud.getEstado().equals("DE")){
						this.mensajeGlogal = "La solicitud fue devuelta al remitente para correci√≥n.";
						return;
					}else if(solicitud.getEstado().equals("I") || solicitud.getEstado().equals("N") || solicitud.getEstado().equals("E")  ){
						this.mensajeGlogal = null;
					}else{
						this.mensajeGlogal = "La solicitud no esta en estado inicial ni analisis analista para devolver al remitente.";
						return;
					}
				}
				
				/*verificar si se cambian los datos.*/
				if(this.innNomRiesgoNueva != null){
					if(this.montoLineaCreditoNuevo == null){
						this.mensajeGlogal = "Debe ingresar el monto de la solictud.";
						return;				
					}else{
						if(this.montoLineaCreditoNuevo == 0){
							this.mensajeGlogal = "Debe ingresar el monto de la solictud.";
							return;							
						}
					}					
					
					if(this.clsRiesgoNuevo == null){
						this.mensajeGlogal = "Debe seleccionar la nueva condici√≥n de riesgo.";
						return;							
					}
					
					if(this.cPagoNuevo == null){
						this.mensajeGlogal = "Debe seleccionar la nueva condici√≥n de pago.";
						return;							
					}
					
					this.modificarCredito = true;
				}
				if(this.listaUsuarioCorreoagregados ==null){
					this.mensajeGlogal = "Debe ingresar los usuarios para el envio de correo.";
					return;
				}else{
					if(this.listaUsuarioCorreoagregados.size() == 0 ){
						this.mensajeGlogal = "Debe ingresar los usuarios para el envio de correo.";
						return ;
					}
				}
				
				if(this.observacionesFinales ==null){
					this.mensajeGlogal = "Debe ingresar una observaci√≥n final.";
					return;
				}else{
					if("".equals(this.observacionesFinales)){
						this.mensajeGlogal = "Debe ingresar una observaci√≥n final.";
						return ;
					}
				}
				this.mensajeGlogal = null;				
			}else{
				this.mensajeGlogal = "La solicitud no tiene asociada el tipo de solicitud...";
			}	
		}else if(this.paginaIngreso == 31){
			if(this.solicitud != null && this.tipoSolicitudAux != null){
				log.debug("solicitud #0 tipo de solicitud #1", solicitud.getId().getNumSolicitud(), tipoSolicitudAux.getCodTipoSolicitud());

				/*verificacion de estado de la solicitud*/
				if(solicitud != null){
					if(solicitud.getEstado().equals("DE")){
						this.mensajeGlogal = "La solicitud fue devuelta al remitente para correci√≥n.";
						return;
					}else if(solicitud.getEstado().equals("I") || solicitud.getEstado().equals("N") || solicitud.getEstado().equals("E")){
						this.mensajeGlogal = null;
					}else{
						this.mensajeGlogal = "La solicitud no esta en estado inicial ni analisis analista para devolver al remitente.";
						return;
					}
				}
				
				/*verificar si se cambian los datos.*/
				if(condicionRiesgoNew == true || condicionPagoNew == true){
					if(condicionPagoNew == true ){
						if(this.clsRiesgoNuevo == null){
							this.mensajeGlogal = "Debe seleccionar la condici√≥n de riesgo nueva.";
							return;							
						}
					}
					if(condicionRiesgoNew == true){
						if(this.cPagoNuevo == null){
							this.mensajeGlogal = "Debe seleccionar la condici√≥n de pago nuevo.";
							return;								
						}
					}
					this.modificarCondicion = true;
				}
				
				if(this.listaUsuarioCorreoagregados ==null){
					this.mensajeGlogal = "Debe ingresar los usuarios para el envio de correo.";
					return;
				}else{
					if(this.listaUsuarioCorreoagregados.size() == 0 ){
						this.mensajeGlogal = "Debe ingresar los usuarios para el envio de correo.";
						return ;
					}
				}
				
				if(this.observacionesFinales ==null){
					this.mensajeGlogal = "Debe ingresar una observaci√≥n final.";
					return;
				}else{
					if("".equals(this.observacionesFinales)){
						this.mensajeGlogal = "Debe ingresar una observaci√≥n final.";
						return ;
					}
				}

				this.mensajeGlogal = null;					
			}else{
				this.mensajeGlogal = "La solicitud no tiene asociada el tipo de solicitud...";
			}	
			
		}else if(this.paginaIngreso == 41){/* bloqueo y desbloqueo*/
			if(this.solicitud != null && this.tipoSolicitudAux != null){
				log.debug("solicitud #0 tipo de solicitud #1", solicitud.getId().getNumSolicitud(), tipoSolicitudAux.getCodTipoSolicitud());

				/*verificacion de estado de la solicitud*/
				if(solicitud != null){
					if(solicitud.getEstado().equals("DE")){
						this.mensajeGlogal = "La solicitud fue devuelta al remitente para correci√≥n.";
						return;
					}else if(solicitud.getEstado().equals("I") || solicitud.getEstado().equals("N") || solicitud.getEstado().equals("E")){
						this.mensajeGlogal = null;
					}else{
						this.mensajeGlogal = "La solicitud no esta en estado inicial ni analisis analista para devolver al remitente.";
						return;
					}
				}				
				
				if(this.opcionBloqueoDesbloqueoNew != null || !"".equals(this.opcionBloqueoDesbloqueoNew)){
					if(String.valueOf(this.paginaIngreso).equals(this.opcionBloqueoDesbloqueoNew)){
						this.modificarbloqueoToDesbloqueo = false;
					}else{
						this.modificarbloqueoToDesbloqueo = true;
					}
				}

				if(this.observacionesFinales ==null){
					this.mensajeGlogal = "Debe ingresar una observaci√≥n final.";
					return;
				}else{
					if("".equals(this.observacionesFinales)){
						this.mensajeGlogal = "Debe ingresar una observaci√≥n final.";
						return ;
					}
				}
				this.mensajeGlogal = null;	
			}else{
				this.mensajeGlogal = "La solicitud no tiene asociada el tipo de solicitud...";
			}
		}else if (this.paginaIngreso == 43){/* creacion de dm*/
			if(this.solicitud != null && this.tipoSolicitudAux != null){
				log.debug("solicitud #0 tipo de solicitud #1", solicitud.getId().getNumSolicitud(), tipoSolicitudAux.getCodTipoSolicitud());

				/*verificacion de estado de la solicitud*/
				if(solicitud != null){
					if(solicitud.getEstado().equals("DE")){
						this.mensajeGlogal = "La solicitud fue devuelta al remitente para correci√≥n.";
						return;
					}else if(solicitud.getEstado().equals("I") || solicitud.getEstado().equals("N") || solicitud.getEstado().equals("E")){
						this.mensajeGlogal = null;
					}else{
						this.mensajeGlogal = "La solicitud no esta en estado inicial ni analisis analista para devolver al remitente.";
						return;
					}
				}				
				
				if(this.listaClienteDMs == null){
					this.mensajeGlogal = "No existen de dms en la lista, favor revisar... ";
					return;					
				}else{
					if(this.listaClienteDMs.size() == 0){
						this.mensajeGlogal = "No existen de dms en la lista, favor revisar... ";
						return;						
					}
				}
				
				if(this.observacionesFinales == null){
					this.mensajeGlogal = "Debe ingresar una observaci√≥n final.";
					return;
				}else{
					if("".equals(this.observacionesFinales)){
						this.mensajeGlogal = "Debe ingresar una observaci√≥n final.";
						return;
					}
				}
				
				
				this.modificarCreacionDM = true;
				this.mensajeGlogal = null;	
			}else{
				this.mensajeGlogal = "La solicitud no tiene asociada el tipo de solicitud...";
			}
		}else if(this.paginaIngreso == 44){/* prorroga de cheques*/
			if(this.solicitud != null && this.tipoSolicitudAux != null){
				log.debug("solicitud #0 tipo de solicitud #1", solicitud.getId().getNumSolicitud(), tipoSolicitudAux.getCodTipoSolicitud());

				/*verificacion de estado de la solicitud*/
				if(solicitud != null){
					if(solicitud.getEstado().equals("DE")){
						this.mensajeGlogal = "La solicitud fue devuelta al remitente para correci√≥n.";
						return;
					}else if(solicitud.getEstado().equals("I") || solicitud.getEstado().equals("N") || solicitud.getEstado().equals("E")){
						this.mensajeGlogal = null;
					}else{
						this.mensajeGlogal = "La solicitud no esta en estado inicial ni analisis analista para devolver al remitente.";
						return;
					}
				}	
				
				if(this.listaProrrogas == null){
					this.mensajeGlogal = "No existen de dms en la lista, favor revisar... ";
					return;					
				}else{
					if(this.listaProrrogas.size() == 0){
						this.mensajeGlogal = "No existen de dms en la lista, favor revisar... ";
						return;						
					}
				}
				
				
				if(this.observacionesFinales ==null){
					this.mensajeGlogal = "Debe ingresar una observaci√≥n final.";
					return;
				}else{
					if("".equals(this.observacionesFinales)){
						this.mensajeGlogal = "Debe ingresar una observaci√≥n final.";
						return;
					}
				}				
				
				this.modificarProrroga = true;
				this.mensajeGlogal = null;	
			}else{
				this.mensajeGlogal = "La solicitud no tiene asociada el tipo de solicitud...";
			}
		}
		log.debug("metodo final del ingresoDevolucion()");	
	}
	public String devorlverSolcicitud(){
		String devolver = null;
		try{
			
			if(this.paginaIngreso == 11 || this.paginaIngreso == 12){/*venta nomal y en cuotas*/
				if(solicitud != null && venta != null){
					if(this.modificarVenta){
						solicitud.setEstado("DE");
						solicitud.setUsuarioActual(solicitud.getCodEmisor());
						solicitud.setDevolver(true);
						solicitud.setUsuarioDevuelve(usuarioSegur.getAlias());
						
						venta.setStatusSolicitud(solicitud.getEstado());
					}else{
						solicitud.setEstado("DE");
						solicitud.setUsuarioActual(solicitud.getCodEmisor());
						solicitud.setDevolver(true);
						solicitud.setUsuarioDevuelve(usuarioSegur.getAlias());
						venta.setStatusSolicitud(solicitud.getEstado());
					}
					
					boolean exito = scoringService.mergerSolicitud(solicitud);
					boolean exitoVenta = scoringService.mergerSolicitudVentaPuntual(venta);
					
					if(exito == true && exitoVenta == true){
						this.mensajeGlogal = "Se devuelve La solicitud N¬∞ "+ solicitud.getId().getNumSolicitud() +" al emisor.";
						/*se agrega la observaciones final de una aprobacion final */
						LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
						Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							id.setCorrelativo(correlativo);
							id.setFecha(new Date());
							id.setHora(new Date());
							id.setNumSolicitud(solicitud.getId().getNumSolicitud());
							id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							id.setObservacion(this.observacionesFinales);
							id.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(id);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}						
						
						
						List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
						if(listaFileUploadedDTOs != null && listaFileUploadedDTOs.size() != 0){
							for(FileUploadedDTO archivo :listaFileUploadedDTOs){
							   try {							
									OutputStream ostream = null;
									String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
									nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);
									
									String url = "archivosRespuesta"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
									
									//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
									ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
									log.debug("url #0",archivo.getUploadItem().getContentType());
									IOUtils.copyStream(ostream, istream);
									ostream.flush();
									ostream.close();
									istream.close();
									//guardar datos en la BD
									ArchivoAdjunto archivoAux = new ArchivoAdjunto();
									archivoAux.setSolicitud(solicitud);
									archivoAux.setUrl(url);
									archivoAux.setUbicacion("");
									archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
									archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
									archivoAux.setUsuario(usuarioLogueado);	
									archivoAux.setFechaCreacion(new Date());
									entityManager.persist(archivoAux);
									entityManager.flush();
									ConceptoDTO objetoAux = new ConceptoDTO();
									objetoAux.setNombreArchivo(nombreArchivo);
									objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
									listaArchivoGuardadoResp.add(objetoAux);
									objetoAux = null;
									
								} catch (FileNotFoundException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}
								catch (IOException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}catch (Exception e) {
									e.printStackTrace();
								}							
							}	
						}
						
						List<ConceptoDTO> lista = scoringService.getConceptoMonto(solicitud.getId().getNumSolicitud());
						List<ConceptoDTO> listaProducto = scoringService.getProductos(solicitud.getId().getNumSolicitud());
						List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
						
						
						
						if(listaUsuarioCorreoagregados != null){
							Locale locale = new Locale("es","CL");
							/*setando los varlores del dto para el correo*/
							ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
							contenidoEmail.setTituloRespuesta("Devoluci√≥n solicitud ");
							contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
							contenidoEmail.setColor("AZUL");
							contenidoEmail.setAccion("Se devuelve de la Solicitud al Emisor");
							contenidoEmail.setAccionRespuesta("");
							contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
							contenidoEmail.setOpcionFinal(3);
							contenidoEmail.setRespuestaFinalSolicitud(this.observacionesFinales);
							contenidoEmail.setSolicitud(solicitud);
							NumberFormat numberFormatter;
							StringBuffer rutNombre = new StringBuffer();
							rutNombre.append(cliente.getRut());
							rutNombre.append(" / ");
							rutNombre.append(modificarTexto(cliente.getRazonSocial()));
							contenidoEmail.setRutNombre(rutNombre.toString());
							contenidoEmail.setSoloNombre(cliente.getRazonSocial());
							contenidoEmail.setCanalVenta(cliente.getCanalVenta());
							contenidoEmail.setSucursal(sucursal.getDescripcion());
							
							UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
							if(ususarioEmisor != null){
								contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
							}else{
								contenidoEmail.setEmisor(solicitud.getCodEmisor());
							}							
							contenidoEmail.setTipoSolicitud("Venta Puntual");
							contenidoEmail.setTipoVentas(modificarTexto(tipoSolicitudAux.getDesTipoSolicitud()));
							
							numberFormatter = NumberFormat.getNumberInstance(locale);
							log.debug(numberFormatter.format(venta.getMontoInicial()));
							
							contenidoEmail.setMontoMasIva(numberFormatter.format(venta.getMontoInicial()));
							contenidoEmail.setMontoPie(numberFormatter.format(venta.getMontoPieInicial()));
							contenidoEmail.setMargenNegocio(String.valueOf(numberFormatter.format(this.margenGlogal)));
							contenidoEmail.setFormaPago(this.formaPago);
							contenidoEmail.setMotivoCompra(this.motivoCompra);
							
							contenidoEmail.setPeakCredito(numberFormatter.format(expoRiesgoKh.getPeakCredito()));
							if("VIG".equals(cliente.getVigenciaSeguro().trim())){
								contenidoEmail.setLineaSeguro(numberFormatter.format(expoRiesgoKh.getMontoAsegurado()));
							}else{
								contenidoEmail.setLineaSeguro(numberFormatter.format(0));
							}								
							//contenidoEmail.setLineaSeguro(numberFormatter.format(clienteTarget.getMontoSeguro()));
							contenidoEmail.setRisgoKupfer(numberFormatter.format(expoRiesgoKh.getMontoRiesgoKupfer()));
							contenidoEmail.setListaProductos(listaProducto);
							contenidoEmail.setListaConceptoMontos(lista);
							contenidoEmail.setListaArchivos(listaArchivoGuardado);
							contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
							contenidoEmail.setListaObservaciones(listaObservaciones);
							
							List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
							if(listaUsuarioCorreoagregados != null){
								for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
									if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !ucdto.getUsername().equals(usuarioLogueado.getAlias().trim())  ){
										log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
										Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
										if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
											if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
												ultimaListaCorreoPrueba.add(usuarioAux);	
												usuarioAux = new Usuariosegur();
											}	
										}
									}
								}
							}	
							
							/*al emisor colocando el emisor*/
							Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
							if(emisorCorreo != null){
								ultimaListaCorreoPrueba.add(emisorCorreo);
								emisorCorreo = null;
							}
							
							Usuariosegur correoAdministrador = scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
							if(correoAdministrador != null){
								ultimaListaCorreoPrueba.add(correoAdministrador);
								correoAdministrador = null;
							}
							
							contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);							
							try{
								if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
									emailAlerta.enviarRespuestaSolicitudVenta(contenidoEmail);	
								}	
							}catch (Exception e) {
								log.debug("paso por el error #0"+ e.getMessage());
							}							
						}
						
						insertarLogs(solicitud, 6);
						LcredEstado estado = ObtenerEstadoSolictud("DE");
						insertHitos(solicitud, estado, "NADA",0);
						entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
						             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
						entityManager.flush();
						if(paginaVolver.equals("Listado")){
							devolver="devolverListaAprobar";
						}else if(paginaVolver.equals("ListaEstado")){
							devolver="devolverListaEstados";
						}
					}
				}	
			}else if(this.paginaIngreso == 21 || this.paginaIngreso == 22 || this.paginaIngreso == 23 ){ /*solicitudes innominales, nominales, riesgo kupfer*/

				if(solicitud != null && credito != null ){
					if(this.modificarCredito){
						solicitud.setEstado("DE");
						solicitud.setUsuarioActual(solicitud.getCodEmisor());
						solicitud.setDevolver(true);
						credito.setStatusSolicitud(solicitud.getEstado());
					}else{
						solicitud.setEstado("DE");
						solicitud.setUsuarioActual(solicitud.getCodEmisor());
						solicitud.setDevolver(true);
						credito.setStatusSolicitud(solicitud.getEstado());
					}					
					
					/*actualizaciones la solicitud */
					boolean exito = scoringService.mergerSolicitud(solicitud);
					/*actualizaciones de solicitud de Cr√©dito*/
					boolean exitoCredito = scoringService.mergerSolicitudLineaCredito(credito);
					
					if(exito == true && exitoCredito == true){
						Locale locale = new Locale("es","CL");
						NumberFormat numberFormatter;
						numberFormatter = NumberFormat.getNumberInstance(locale);
						List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0);
						this.mensajeGlogal = "La solicitud "+ solicitud.getId().getNumSolicitud() +" fue devuelta alremitente.";
						/*se agrega la observaciones final de una aprobacion final */
						LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
						Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							id.setCorrelativo(correlativo);
							id.setFecha(new Date());
							id.setHora(new Date());
							id.setNumSolicitud(solicitud.getId().getNumSolicitud());
							id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							id.setObservacion(this.observacionesFinales);
							id.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(id);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}							
						
						
						if(listaFileUploadedDTOs != null && listaFileUploadedDTOs.size() != 0){
							for(FileUploadedDTO archivo :listaFileUploadedDTOs){
							   try {							
									OutputStream ostream = null;
									String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
									nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);

									String url = "archivosRespuestaLC"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
									
									
									//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
									ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
									log.debug("url #0",archivo.getUploadItem().getContentType());
									IOUtils.copyStream(ostream, istream);
									ostream.flush();
									ostream.close();
									istream.close();
									//guardar datos en la BD
									ArchivoAdjunto archivoAux = new ArchivoAdjunto();
									archivoAux.setSolicitud(solicitud);
									archivoAux.setUrl(url);
									archivoAux.setUbicacion("");
									archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
									archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
									archivoAux.setUsuario(usuarioLogueado);		
									archivoAux.setFechaCreacion(new Date());
									entityManager.persist(archivoAux);
									entityManager.flush();
									ConceptoDTO objetoAux = new ConceptoDTO();
									objetoAux.setNombreArchivo(nombreArchivo);
									objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
									listaArchivoGuardadoResp.add(objetoAux);
									objetoAux = null;
									
								} catch (FileNotFoundException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}
								catch (IOException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}catch (Exception e) {
									e.printStackTrace();
								}							
							}		
						}
						
						/* sacar los datos concecptos involucrados*/
						List<SolicitudConceptosNegocioLC> listaConceptoInvolucarado = scoringService.getListarSolicitudConceptosNegocioLC(solicitud.getId().getNumSolicitud());						 
						/*crear lista de concepto de involucrados*/
						List<ConceptoDTO> conceptosInvolucrado = new ArrayList<ConceptoDTO>(0);
						if(listaConceptoInvolucarado != null){
							for(SolicitudConceptosNegocioLC scn : listaConceptoInvolucarado){
								ConceptoDTO ci = new ConceptoDTO();
								ci.setDescripcion(scn.getConceptosNegocio().getDescripcion());
								ci.setMontoFormateado(numberFormatter.format(scn.getMonto()));
								conceptosInvolucrado.add(ci);
								ci=null;
							}
						}
						
						List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
						
						
						if(listaUsuarioCorreoagregados != null){
							ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
							contenidoEmail.setTituloRespuesta("Devoluci√≥n solicitud ");
							contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
							contenidoEmail.setColor("AZUL");
							contenidoEmail.setAccion("Se devuelve de la Solicitud al Emisor");
							contenidoEmail.setAccionRespuesta("");
							contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
							contenidoEmail.setOpcionFinal(3);
							contenidoEmail.setRespuestaFinalSolicitud(this.observacionesFinales);
							contenidoEmail.setSolicitud(solicitud);
							
							/*setando los varlores del dto para el correo*/
							StringBuffer rutNombre = new StringBuffer();
							rutNombre.append(cliente.getRut());
							rutNombre.append(" / ");
							rutNombre.append(modificarTexto(cliente.getRazonSocial()));
							contenidoEmail.setRutNombre(rutNombre.toString());
							contenidoEmail.setSoloNombre(solicitud.getNomCliente());
							contenidoEmail.setCanalVenta(modificarTexto(solicitud.getCanal()));

							Sucursal suc = obtenerObjetoSucursal(solicitud.getCodSucursal());
							if(suc != null){
								contenidoEmail.setSucursal(suc.getDescripcion());
							}else{
								contenidoEmail.setSucursal(solicitud.getCodSucursal());
							}
							
							UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
							if(ususarioEmisor != null){
								contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
							}else{
								contenidoEmail.setEmisor(modificarTexto(solicitud.getCodEmisor()));
							}
							contenidoEmail.setTipoSolicitud("Linea de Cr√©dito.");
							contenidoEmail.setTipoLineaCredito(tipoSolicitudAux.getDesTipoSolicitud());

							if("VIG".equals(solicitud.getVigSeguro().trim())){
								contenidoEmail.setLineaSeguroActual(numberFormatter.format(expoRiesgoKh.getMontoAsegurado()));
							}else{
								contenidoEmail.setLineaSeguroActual(numberFormatter.format(0));
							}
							
							if(this.modificarCredito){
								log.debug(numberFormatter.format(this.montoLineaCreditoNuevo));
								contenidoEmail.setMontoSolicitado(numberFormatter.format(this.montoLineaCreditoNuevo));
								contenidoEmail.setCondicionRiesgo(this.clsRiesgoNuevo);
								contenidoEmail.setCondicionPago(this.cPagoNuevo);
								
							}else{
								contenidoEmail.setMontoSolicitado(numberFormatter.format(this.montoCredito));
								contenidoEmail.setCondicionRiesgo(this.clsRiesgo);
								contenidoEmail.setCondicionPago(this.cPago);
							}
							
							contenidoEmail.setProyecto(credito.getDpDescripcionProyecto());
							contenidoEmail.setMontoProyecto(credito.getDpMonto());
							contenidoEmail.setPlazoEjecucion(modificarTexto(credito.getDpPlazoEjecucion()));
							contenidoEmail.setPotencialCompra(credito.getDpPotencialCompra());
							
							
							List<String> listaSocios = new ArrayList<String>(0);
							if(credito.getDpSocios() != null){
								String[] array = credito.getDpSocios().split(",");
								if(array != null){
									for(String s : array){
										listaSocios.add(s);
									}
								}
							}
							
						    /*datos de lineas credito solCredito */
							contenidoEmail.setListaSocios(listaSocios);
							contenidoEmail.setListaConceptoMontos(conceptosInvolucrado);
							contenidoEmail.setListaArchivos(listaArchivoGuardado);
							contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
							contenidoEmail.setListaObservaciones(listaObservaciones);
							List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
							if(listaUsuarioCorreoagregados != null){
								for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
									if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !ucdto.getUsername().equals(usuarioLogueado.getAlias().trim())  ){
										log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
										Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
										if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
											if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
												ultimaListaCorreoPrueba.add(usuarioAux);	
												usuarioAux = new Usuariosegur();
											}											
										}
									}
								}
							}	
							
							/*eliminar esto, cuando se establaque la solucion*/
							Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
							if(emisorCorreo != null){
								ultimaListaCorreoPrueba.add(emisorCorreo);
								emisorCorreo = null;
							}
							Usuariosegur correoAdministrador = scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
							if(correoAdministrador != null){
								ultimaListaCorreoPrueba.add(correoAdministrador);
								correoAdministrador = null;
							}							
							
							contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);							
							
							try{
								if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
									emailAlerta.enviarRespuestaSolicitudLinea(contenidoEmail);	
								}	
							}catch (Exception e) {
								log.debug("paso por el error #0"+ e.getMessage());
							}								
						}
						
						insertarLogs(solicitud, 6);
						LcredEstado estado = ObtenerEstadoSolictud("DE");
						insertHitos(solicitud, estado,"NADA", 0 );
						entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
						             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
						entityManager.flush();
						if(paginaVolver.equals("Listado")){
							devolver="devolverListaAprobar";
						}else if(paginaVolver.equals("ListaEstado")){
							devolver="devolverListaEstados";
						}
					}
				}
			}else if(this.paginaIngreso == 31 ){/* Devolver  la solicitiudes condiciones */
				if(solicitud != null && condicion != null ){
					if(this.modificarCondicion){
						solicitud.setEstado("DE");
						solicitud.setUsuarioActual(solicitud.getCodEmisor());
						solicitud.setDevolver(true);
						condicion.setStatusSolicitud(solicitud.getEstado());
					}else{
						solicitud.setEstado("DE");
						solicitud.setUsuarioActual(solicitud.getCodEmisor());
						solicitud.setDevolver(true);
						condicion.setStatusSolicitud(solicitud.getEstado());
						
					}
					
					/*actualizaciones la solicitud */
					boolean exito = scoringService.mergerSolicitud(solicitud);
					/*actualizaciones de solicitud de condicion*/
					boolean exitoCondicion = scoringService.mergerSolicitudCondiciones(condicion);
					
					if(exito == true && exitoCondicion == true){
						List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
						this.mensajeGlogal = "La solicitud "+ solicitud.getId().getNumSolicitud() +" fue devuelta alremitente.";
						/*se agrega la observaciones final de una aprobacion final */
						LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
						Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							id.setCorrelativo(correlativo);
							id.setFecha(new Date());
							id.setHora(new Date());
							id.setNumSolicitud(solicitud.getId().getNumSolicitud());
							id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							id.setObservacion(this.observacionesFinales);
							id.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(id);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}	
						if(listaFileUploadedDTOs != null && listaFileUploadedDTOs.size() != 0){
							for(FileUploadedDTO archivo :listaFileUploadedDTOs){
							   try {							
									OutputStream ostream = null;
									String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
									nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);

									String url = "archivosRespuestaCC"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
									
									
									//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
									ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
									log.debug("url #0",archivo.getUploadItem().getContentType());
									IOUtils.copyStream(ostream, istream);
									ostream.flush();
									ostream.close();
									istream.close();
									//guardar datos en la BD
									ArchivoAdjunto archivoAux = new ArchivoAdjunto();
									archivoAux.setSolicitud(solicitud);
									archivoAux.setUrl(url);
									archivoAux.setUbicacion("");
									archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
									archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
									archivoAux.setUsuario(usuarioLogueado);	
									archivoAux.setFechaCreacion(new Date());
									entityManager.persist(archivoAux);
									entityManager.flush();
									ConceptoDTO objetoAux = new ConceptoDTO();
									objetoAux.setNombreArchivo(nombreArchivo);
									objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
									listaArchivoGuardadoResp.add(objetoAux);
									objetoAux = null;
									
								} catch (FileNotFoundException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}
								catch (IOException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}catch (Exception e) {
									e.printStackTrace();
								}							
							}		
						}						
						
						List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
						
						
						if(listaUsuarioCorreoagregados != null){
							/*setando los varlores del dto para el correo*/
							ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
							contenidoEmail.setTituloRespuesta("Devoluci√≥n solicitud ");
							contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
							contenidoEmail.setColor("AZUL");
							contenidoEmail.setAccion("Se devuelve de la Solicitud al Emisor");
							contenidoEmail.setAccionRespuesta("");
							contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
							contenidoEmail.setOpcionFinal(3);
							contenidoEmail.setRespuestaFinalSolicitud(this.observacionesFinales);
							contenidoEmail.setSolicitud(solicitud);
							
							StringBuffer rutNombre = new StringBuffer();
							rutNombre.append(cliente.getRut());
							rutNombre.append(" / ");
							rutNombre.append(modificarTexto(cliente.getRazonSocial()));
							contenidoEmail.setRutNombre(rutNombre.toString());
							contenidoEmail.setSoloNombre(cliente.getRazonSocial());
							contenidoEmail.setCanalVenta(modificarTexto(cliente.getCanalVenta()));
							
							Sucursal suc = obtenerObjetoSucursal(solicitud.getCodSucursal());
							if(suc != null){
								contenidoEmail.setSucursal(suc.getDescripcion());
							}else{
								contenidoEmail.setSucursal(solicitud.getCodSucursal());
							}
							
							UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
							if(ususarioEmisor != null){
								contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
							}else{
								contenidoEmail.setEmisor(solicitud.getCodEmisor());
							}							
							
							contenidoEmail.setTipoSolicitud("Cambio de Condiciones.");
							
							if(this.modificarCondicion){
								if(this.condicionRiesgoNew == true && this.condicionPagoNew == false){
									contenidoEmail.setTipoLineaCredito("Condiciones de Riesgo.");	
									contenidoEmail.setCondicionRiesgo(cliente.getClasificacionRiesgo());
									contenidoEmail.setCondicionPago("");
									contenidoEmail.setCondicionRiesgoNuevo(this.clsRiesgoNuevo);								
									contenidoEmail.setCondicionPagoNuevo("");
								
								}else if(this.condicionRiesgoNew == false && this.condicionPagoNew == true){
									contenidoEmail.setTipoLineaCredito("Condiciones de Pago.");
									contenidoEmail.setCondicionRiesgo("");
									contenidoEmail.setCondicionPago(cliente.getCondicionPago());
									contenidoEmail.setCondicionRiesgoNuevo("");								
									contenidoEmail.setCondicionPagoNuevo(this.cPagoNuevo);									
								
								}else if(this.condicionRiesgoNew == true && this.condicionPagoNew == true){
									contenidoEmail.setTipoLineaCredito("Condiciones "+ this.tipoSolicitudAux.getDesTipoSolicitud());
									contenidoEmail.setCondicionRiesgo(cliente.getClasificacionRiesgo());
									contenidoEmail.setCondicionPago(cliente.getCondicionPago());
									contenidoEmail.setCondicionRiesgoNuevo(this.clsRiesgoNuevo);								
									contenidoEmail.setCondicionPagoNuevo(this.cPagoNuevo);
								}								
							}else{
								
								if(this.condicionRiesgo == true && this.condicionPago == false){
									contenidoEmail.setTipoLineaCredito("Condiciones de Riesgo.");	
									contenidoEmail.setCondicionRiesgo(cliente.getClasificacionRiesgo());
									contenidoEmail.setCondicionPago("");
									contenidoEmail.setCondicionRiesgoNuevo(this.clsRiesgo);								
									contenidoEmail.setCondicionPagoNuevo("");
								
								}else if(this.condicionRiesgo == false && this.condicionPago == true){
									contenidoEmail.setTipoLineaCredito("Condiciones de Pago.");
									contenidoEmail.setCondicionRiesgo("");
									contenidoEmail.setCondicionPago(cliente.getCondicionPago());
									contenidoEmail.setCondicionRiesgoNuevo("");								
									contenidoEmail.setCondicionPagoNuevo(this.cPago);									
								
								}else if(this.condicionRiesgo == true && this.condicionPago == true){
									contenidoEmail.setTipoLineaCredito("Condiciones "+ this.tipoSolicitudAux.getDesTipoSolicitud());
									contenidoEmail.setCondicionRiesgo(cliente.getClasificacionRiesgo());
									contenidoEmail.setCondicionPago(cliente.getCondicionPago());
									contenidoEmail.setCondicionRiesgoNuevo(this.clsRiesgo);								
									contenidoEmail.setCondicionPagoNuevo(this.cPago);
								}								
							}
							contenidoEmail.setMotivoCambio(condicion.getMotivoCambio());
						    /*datos de lineas credito solCredito */
							contenidoEmail.setListaArchivos(listaArchivoGuardado);
							contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
							contenidoEmail.setListaObservaciones(listaObservaciones);
							

							List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
							if(listaUsuarioCorreoagregados != null){
								for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
									if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !ucdto.getUsername().equals(usuarioLogueado.getAlias().trim())  ){
										log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
										Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
										if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
											if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
												ultimaListaCorreoPrueba.add(usuarioAux);	
												usuarioAux = new Usuariosegur();
											}											
										}
									}
								}
							}	
							
							/*eliminar esto, cuando se establaque la solucion*/
							Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
							if(emisorCorreo != null){
								ultimaListaCorreoPrueba.add(emisorCorreo);
								emisorCorreo = null;
							}
							Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
							if(correoAdministrador != null){
								ultimaListaCorreoPrueba.add(correoAdministrador);
								correoAdministrador = null;
							}
							contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);								
							try{
								if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
									emailAlerta.enviarRespuestaSolicitudCondiciones(contenidoEmail);	
								}	
							}catch (Exception e) {
								log.debug("paso por el error #0"+ e.getMessage());
							}	
						}
						
						insertarLogs(solicitud, 6);
						LcredEstado estado = ObtenerEstadoSolictud("DE");
						insertHitos(solicitud, estado, "NADA", 0);
						entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
						             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
						entityManager.flush();
						if(paginaVolver.equals("Listado")){
							devolver="devolverListaAprobar";
						}else if(paginaVolver.equals("ListaEstado")){
							devolver="devolverListaEstados";
						}						
					}
				}
			}else if(this.paginaIngreso == 41){/*solicitud de bloqueo y desbloqueo*/
				if(solicitud != null && bloqueo != null && solicitudOtra != null){
					solicitud.setEstado("DE");
					solicitud.setUsuarioActual(solicitud.getCodEmisor());
					solicitud.setDevolver(true);
					
					if(this.modificarbloqueoToDesbloqueo){
						solicitudOtra.setStatusSolicitud(solicitud.getEstado());
					}else{
						solicitudOtra.setStatusSolicitud(solicitud.getEstado());
					}

					
					/*actualizaciones la solicitud */
					boolean exito = scoringService.mergerSolicitud(solicitud);
					/*actualizaciones de solicitud de Bloqueo to Desbloqueo*/
					boolean exitoBD = scoringService.mergerSolicitudBloqueoToDesbloqueo(bloqueo);					
					/*actualizaciones de solicitud de Otras solicitudes*/
					boolean exitoOS = scoringService.mergerSolicitudOtrasSolicitudes(solicitudOtra);					
					
					if(exito == true && exitoBD == true && exitoOS){
						List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
						this.mensajeGlogal = "La solicitud "+ solicitud.getId().getNumSolicitud() +" fue devuelta alremitente.";						
						/*se agrega la observaciones final de una aprobacion final */
						LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
						Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							id.setCorrelativo(correlativo);
							id.setFecha(new Date());
							id.setHora(new Date());
							id.setNumSolicitud(solicitud.getId().getNumSolicitud());
							id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							id.setObservacion(this.observacionesFinales);
							id.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(id);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}							
						if(listaFileUploadedDTOs != null && listaFileUploadedDTOs.size() != 0){
							for(FileUploadedDTO archivo :listaFileUploadedDTOs){
							   try {							
									OutputStream ostream = null;
									String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
									nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);

									String url = "archivosRespuestaOS"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
									
									
									//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
									ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
									log.debug("url #0",archivo.getUploadItem().getContentType());
									IOUtils.copyStream(ostream, istream);
									ostream.flush();
									ostream.close();
									istream.close();
									//guardar datos en la BD
									ArchivoAdjunto archivoAux = new ArchivoAdjunto();
									archivoAux.setSolicitud(solicitud);
									archivoAux.setUrl(url);
									archivoAux.setUbicacion("");
									archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
									archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
									archivoAux.setUsuario(usuarioLogueado);	
									archivoAux.setFechaCreacion(new Date());
									entityManager.persist(archivoAux);
									entityManager.flush();
									ConceptoDTO objetoAux = new ConceptoDTO();
									objetoAux.setNombreArchivo(nombreArchivo);
									objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
									listaArchivoGuardadoResp.add(objetoAux);
									objetoAux = null;
									
								} catch (FileNotFoundException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}
								catch (IOException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}catch (Exception e) {
									e.printStackTrace();
								}							
							}		
						}							
						List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
						
						if(listaUsuarioCorreoagregados != null){
							/*setando los varlores del dto para el correo*/
							ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
							contenidoEmail.setTituloRespuesta("Devoluci√≥n solicitud ");
							contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
							contenidoEmail.setColor("AZUL");
							contenidoEmail.setAccion("Se devuelve de la Solicitud al Emisor");
							contenidoEmail.setAccionRespuesta("");
							contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
							contenidoEmail.setOpcionFinal(3);
							contenidoEmail.setRespuestaFinalSolicitud(this.observacionesFinales);
							contenidoEmail.setSolicitud(solicitud);
							
							StringBuffer rutNombre = new StringBuffer();
							rutNombre.append(cliente.getRut());
							rutNombre.append(" / ");
							rutNombre.append(modificarTexto(cliente.getRazonSocial()));
							contenidoEmail.setRutNombre(rutNombre.toString());
							contenidoEmail.setSoloNombre(cliente.getRazonSocial());
							contenidoEmail.setCanalVenta(cliente.getCanalVenta());
							
							Sucursal suc = obtenerObjetoSucursal(solicitud.getCodSucursal());
							if(suc != null){
								contenidoEmail.setSucursal(suc.getDescripcion());
							}else{
								contenidoEmail.setSucursal(solicitud.getCodSucursal());
							}
							
							UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
							if(ususarioEmisor != null){
								contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
							}else{
								contenidoEmail.setEmisor(solicitud.getCodEmisor());
							}							
							contenidoEmail.setTipoSolicitud("Bloqueo / Desbloqueo.");
							
							if("41".equals(this.opcionBloqueoDesbloqueo)){
								contenidoEmail.setTipoBloqueoDesbloqueo("Bloqueo.");
		
							}else if("42".equals(this.opcionBloqueoDesbloqueo)){
								contenidoEmail.setTipoBloqueoDesbloqueo("Desbloqueo.");
							}
							
							contenidoEmail.setMotivoBloqueoDesbloqueo(this.motivoBloDesbloqueo);
							contenidoEmail.setObservacionesBloqueoDesblorqueo(this.motivoBloDesbloqueo);

						    /*datos de lineas credito solCredito */
							contenidoEmail.setListaArchivos(listaArchivoGuardado);
							contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
							contenidoEmail.setListaObservaciones(listaObservaciones);

							List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
							if(listaUsuarioCorreoagregados != null){
								for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
									if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !ucdto.getUsername().equals(usuarioLogueado.getAlias().trim())  ){
										log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
										Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
										if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
											if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
												ultimaListaCorreoPrueba.add(usuarioAux);	
												usuarioAux = new Usuariosegur();
											}
										}
									}
								}
							}	
							
							/*eliminar esto, cuando se establaque la solucion*/
							Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
							if(emisorCorreo != null){
								ultimaListaCorreoPrueba.add(emisorCorreo);
								emisorCorreo = null;
							}
							Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
							if(correoAdministrador != null){
								ultimaListaCorreoPrueba.add(correoAdministrador);
								correoAdministrador = null;
							}							
							
							contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);									
							
							try{
								if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
									emailAlerta.enviarRespuestaSolicitudBloqueoDesbloqueo(contenidoEmail);	
								}	
							}catch (Exception e) {
								log.debug("paso por el error #0"+ e.getMessage());
							}	
						}						

						insertarLogs(solicitud, 6);
						LcredEstado estado = ObtenerEstadoSolictud("DE");
						insertHitos(solicitud, estado, "NADA", 0);
						entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
						             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
						entityManager.flush();
						if(paginaVolver.equals("Listado")){
							devolver="devolverListaAprobar";
						}else if(paginaVolver.equals("ListaEstado")){
							devolver="devolverListaEstados";
						}						
					}
				}
			}else if(this.paginaIngreso == 43){/* creacion de dm */
				if(solicitud != null && listaClienteDMs != null && solicitudOtra != null){
					if(this.modificarCreacionDM){
						solicitud.setEstado("DE");
						solicitud.setUsuarioActual(solicitud.getCodEmisor());
						solicitud.setDevolver(true);
						
						solicitudOtra.setStatusSolicitud(solicitud.getEstado());
						
						/*actualizaciones la solicitud */
						boolean exito = scoringService.mergerSolicitud(solicitud);
						/*actualizaciones de solicitud de Otras solicitudes*/
						boolean exitoOS = scoringService.mergerSolicitudOtrasSolicitudes(solicitudOtra);							
						
						if(exito == true && exitoOS == true){
							List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
							this.mensajeGlogal = "La solicitud "+ solicitud.getId().getNumSolicitud() +" fue devuelta alremitente.";						
							/*se agrega la observaciones final de una aprobacion final */
							LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
							Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
							if(correlativo != null){
								id.setCorrelativo(correlativo);
								id.setFecha(new Date());
								id.setHora(new Date());
								id.setNumSolicitud(solicitud.getId().getNumSolicitud());
								id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
								id.setObservacion(this.observacionesFinales);
								id.setUsuario(usuarioSegur.getAlias());
								LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
								obser.setId(id);
								scoringService.persistSolicitudObservaciones(obser);
								insertarLogs(solicitud, 5);
							}								
							
							if(listaFileUploadedDTOs != null && listaFileUploadedDTOs.size() != 0){
								for(FileUploadedDTO archivo :listaFileUploadedDTOs){
								   try {							
										OutputStream ostream = null;
										String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
										nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);
										String url = "archivosRespuestaOS"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
										
										
										//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
										ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
										log.debug("url #0",archivo.getUploadItem().getContentType());
										IOUtils.copyStream(ostream, istream);
										ostream.flush();
										ostream.close();
										istream.close();
										//guardar datos en la BD
										ArchivoAdjunto archivoAux = new ArchivoAdjunto();
										archivoAux.setSolicitud(solicitud);
										archivoAux.setUrl(url);
										archivoAux.setUbicacion("");
										archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
										archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
										archivoAux.setUsuario(usuarioLogueado);	
										archivoAux.setFechaCreacion(new Date());
										entityManager.persist(archivoAux);
										entityManager.flush();
										ConceptoDTO objetoAux = new ConceptoDTO();
										objetoAux.setNombreArchivo(nombreArchivo);
										objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
										listaArchivoGuardadoResp.add(objetoAux);
										objetoAux = null;
										
									} catch (FileNotFoundException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}
									catch (IOException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}catch (Exception e) {
										e.printStackTrace();
									}							
								}		
							}	
							
							
							List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
							if(listaUsuarioCorreoagregados != null){
								/*setando los varlores del dto para el correo*/
								ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
								contenidoEmail.setTituloRespuesta("Devoluci√≥n solicitud ");
								contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
								contenidoEmail.setColor("AZUL");
								contenidoEmail.setAccion("Se devuelve de la Solicitud al Emisor");
								contenidoEmail.setAccionRespuesta("");
								contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
								contenidoEmail.setOpcionFinal(3);
								contenidoEmail.setRespuestaFinalSolicitud(this.observacionesFinales);
								contenidoEmail.setSolicitud(solicitud);
								
								StringBuffer rutNombre = new StringBuffer();
								rutNombre.append(cliente.getRut());
								rutNombre.append(" / ");
								rutNombre.append(modificarTexto(cliente.getRazonSocial()));
								contenidoEmail.setRutNombre(rutNombre.toString());
								contenidoEmail.setSoloNombre(cliente.getRazonSocial());
								contenidoEmail.setCanalVenta(cliente.getCanalVenta());
								
								Sucursal suc = obtenerObjetoSucursal(solicitud.getCodSucursal());
								if(suc != null){
									contenidoEmail.setSucursal(suc.getDescripcion());
								}else{
									contenidoEmail.setSucursal(solicitud.getCodSucursal());
								}
								
								UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
								if(ususarioEmisor != null){
									contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
								}else{
									contenidoEmail.setEmisor(solicitud.getCodEmisor());
								}	
								
								contenidoEmail.setTipoSolicitud("Creacion de DM");
								contenidoEmail.setTipoDM("DM");
								
								
							    /*datos de archivos */
								contenidoEmail.setListaArchivos(listaArchivoGuardado);
								contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
								
								
								/*datos de los DMS*/
								List<CreacionDmDTO> listaDms = new ArrayList<CreacionDmDTO>(0);
								CreacionDmDTO obejtoDm =  null;
								for(LcredSolicitudDm docto : listaClienteDMs){
									if(docto != null){
									   obejtoDm = new CreacionDmDTO();
									   obejtoDm.setRut(docto.getId().getRut());
									   obejtoDm.setNombre(docto.getId().getNombre());
									   obejtoDm.setOficinaVentas(docto.getId().getOficinaVentas());
									   obejtoDm.setZona(docto.getId().getZona());
									   obejtoDm.setListaPrecio(docto.getId().getListaPrecio());
									   obejtoDm.setSector(docto.getId().getSector());
									   obejtoDm.setVendTelefono(docto.getId().getVendTelefono());
									   obejtoDm.setVendTerreno(docto.getId().getVendTerreno());
									   obejtoDm.setCobrador(docto.getId().getCobrador());
									   obejtoDm.setCondExpedicion(docto.getId().getCondExpedicion());
									   obejtoDm.setCondPago(docto.getId().getCondPago());
									   listaDms.add(obejtoDm);
									}
								}
						
								contenidoEmail.setListaCreacionDM(listaDms);
								contenidoEmail.setListaObservaciones(listaObservaciones);
								
								List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
								if(listaUsuarioCorreoagregados != null){
									for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
										if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !ucdto.getUsername().equals(usuarioLogueado.getAlias().trim())  ){
											log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
												if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
													ultimaListaCorreoPrueba.add(usuarioAux);	
													usuarioAux = new Usuariosegur();
												}												
											}
										}
									}
								}	
								
								/*eliminar esto, cuando se establaque la solucion*/
								Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
								if(emisorCorreo != null){
									ultimaListaCorreoPrueba.add(emisorCorreo);
									emisorCorreo = null;
								}
								Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
								if(correoAdministrador != null){
									ultimaListaCorreoPrueba.add(correoAdministrador);
									correoAdministrador = null;
								}								
								contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);										
								try{
									if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
										emailAlerta.enviarSolicitudRespuestaDm(contenidoEmail);	
									}	
								}catch (Exception e) {
									log.debug("paso por el error #0"+ e.getMessage());
								}	
							}								
						
							insertarLogs(solicitud, 6);
							LcredEstado estado = ObtenerEstadoSolictud("DE");
							insertHitos(solicitud, estado, "NADA", 0);
							entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
							             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
							entityManager.flush();
							if(paginaVolver.equals("Listado")){
								devolver="devolverListaAprobar";
							}else if(paginaVolver.equals("ListaEstado")){
								devolver="devolverListaEstados";
							}
						}	
					}
				}		
			}else if(this.paginaIngreso == 44){/* prorroga de cheques*/
				if(solicitud != null && listaProrrogas != null && solicitudOtra != null){
					if(this.modificarProrroga){
						Locale locale = new Locale("es","CL");
						NumberFormat numberFormatter;
						numberFormatter = NumberFormat.getNumberInstance(locale);
						
						solicitud.setEstado("DE");
						solicitud.setUsuarioActual(solicitud.getCodEmisor());
						solicitud.setDevolver(true);
						
						solicitudOtra.setStatusSolicitud(solicitud.getEstado());
						
						/*actualizaciones la solicitud */
						boolean exito = scoringService.mergerSolicitud(solicitud);
						/*actualizaciones de solicitud de Otras solicitudes*/
						boolean exitoOS = scoringService.mergerSolicitudOtrasSolicitudes(solicitudOtra);
						if(exito == true && exitoOS == true){
							List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
							this.mensajeGlogal = "La solicitud "+ solicitud.getId().getNumSolicitud() +" fue devuelta alremitente.";						
							/*se agrega la observaciones final de una aprobacion final */
							LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
							Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
							if(correlativo != null){
								id.setCorrelativo(correlativo);
								id.setFecha(new Date());
								id.setHora(new Date());
								id.setNumSolicitud(solicitud.getId().getNumSolicitud());
								id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
								id.setObservacion(this.observacionesFinales);
								id.setUsuario(usuarioSegur.getAlias());
								LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
								obser.setId(id);
								scoringService.persistSolicitudObservaciones(obser);
								insertarLogs(solicitud, 5);
							}								
							if(listaFileUploadedDTOs != null && listaFileUploadedDTOs.size() != 0){
								for(FileUploadedDTO archivo :listaFileUploadedDTOs){
								   try {							
										OutputStream ostream = null;
										String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
										nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);
										String url = "archivosRespuestaOS"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
										
										
										//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
										ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
										log.debug("url #0",archivo.getUploadItem().getContentType());
										IOUtils.copyStream(ostream, istream);
										ostream.flush();
										ostream.close();
										istream.close();
										//guardar datos en la BD
										ArchivoAdjunto archivoAux = new ArchivoAdjunto();
										archivoAux.setSolicitud(solicitud);
										archivoAux.setUrl(url);
										archivoAux.setUbicacion("");
										archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
										archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
										archivoAux.setUsuario(usuarioLogueado);	
										archivoAux.setFechaCreacion(new Date());
										entityManager.persist(archivoAux);
										entityManager.flush();
										ConceptoDTO objetoAux = new ConceptoDTO();
										objetoAux.setNombreArchivo(nombreArchivo);
										objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
										listaArchivoGuardadoResp.add(objetoAux);
										objetoAux = null;
										
									} catch (FileNotFoundException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}
									catch (IOException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}catch (Exception e) {
										e.printStackTrace();
									}							
								}		
							}	
							
							/* creacion de lista */
							List<ProrrogaDTO> listaProrrogasAux = new ArrayList<ProrrogaDTO>(0);
							ProrrogaDTO obejtoProrroga =  null;
							for(LcredSolicitudProrroga docto : listaProrrogas){
								if(docto != null){
								   obejtoProrroga = new ProrrogaDTO();
								   obejtoProrroga.setNumeroDocto(docto.getId().getNroCheque());
								   obejtoProrroga.setMontoFormateado(numberFormatter.format(docto.getId().getMonto()));
								   obejtoProrroga.setMotivoProrroga(this.motivoProrroga);
								   obejtoProrroga.setFechaVencicmiento(docto.getId().getVencActual());
								   obejtoProrroga.setFechaSolicitado(docto.getId().getVencNuevo());
								   listaProrrogasAux.add(obejtoProrroga);
								}
							}									
							
							List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
							
							
							if(listaUsuarioCorreoagregados != null){
								//EmailAlertaContactoMensajeHelper emailAlerta = null;
								/*setando los varlores del dto para el correo*/
								ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
								contenidoEmail.setTituloRespuesta("Devoluci√≥n solicitud ");
								contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
								contenidoEmail.setColor("AZUL");
								contenidoEmail.setAccion("Se devuelve de la Solicitud al Emisor");
								contenidoEmail.setAccionRespuesta("");
								contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
								contenidoEmail.setOpcionFinal(3);
								contenidoEmail.setRespuestaFinalSolicitud(this.observacionesFinales);
								contenidoEmail.setSolicitud(solicitud);
								
								StringBuffer rutNombre = new StringBuffer();
								rutNombre.append(cliente.getRut());
								rutNombre.append(" / ");
								rutNombre.append(modificarTexto(cliente.getRazonSocial()));
								contenidoEmail.setRutNombre(rutNombre.toString());
								contenidoEmail.setSoloNombre(cliente.getRazonSocial());
								contenidoEmail.setCanalVenta(cliente.getCanalVenta());
								
								Sucursal suc = obtenerObjetoSucursal(solicitud.getCodSucursal());
								if(suc != null){
									contenidoEmail.setSucursal(suc.getDescripcion());
								}else{
									contenidoEmail.setSucursal(solicitud.getCodSucursal());
								}
								
								UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
								if(ususarioEmisor != null){
									contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
								}else{
									contenidoEmail.setEmisor(solicitud.getCodEmisor());
								}	
								
								contenidoEmail.setTipoSolicitud("Prorroga de Cheque");
								contenidoEmail.setTipoProrroga("Prorroga.");
								contenidoEmail.setMotivoProrroga(this.motivoProrroga);
								
								
							    /*datos de archivos */
								contenidoEmail.setListaArchivos(listaArchivoGuardado);
								contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
								
								/*datos de prorrogas*/
								contenidoEmail.setListaProrrogas(listaProrrogasAux);
								contenidoEmail.setListaObservaciones(listaObservaciones);
								
								List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
								if(listaUsuarioCorreoagregados != null){
									for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
										if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !ucdto.getUsername().equals(usuarioLogueado.getAlias().trim()) ){
											log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
												if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
													ultimaListaCorreoPrueba.add(usuarioAux);	
													usuarioAux = new Usuariosegur();
												}
											}
										}
										
									}
								}	
								/*eliminar esto, cuando se establaque la solucion*/
								Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
								if(emisorCorreo != null){
									ultimaListaCorreoPrueba.add(emisorCorreo);
									emisorCorreo = null;
								}
								Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
								if(correoAdministrador != null){
									ultimaListaCorreoPrueba.add(correoAdministrador);
									correoAdministrador = null;
								}								
								contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);		
								try{
									if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
										emailAlerta.enviarSolicitudRespuestaProrroga(contenidoEmail);	
									}	
								}catch (Exception e) {
									log.debug("paso por el error #0"+ e.getMessage());
								}
							}								
							
						
							insertarLogs(solicitud, 6);
							LcredEstado estado = ObtenerEstadoSolictud("DE");
							insertHitos(solicitud, estado, "NADA", 0);
							entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
							             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
							entityManager.flush();
							if(paginaVolver.equals("Listado")){
								devolver="devolverListaAprobar";
							}else if(paginaVolver.equals("ListaEstado")){
								devolver="devolverListaEstados";
							}
						}	
					}
				}		
			}
		}catch (Exception e) {
			log.error("Error al devolver la solicitud #0", e.getMessage());
		}
		return devolver;		
	}
	public  void limpiaMensajeGlobal(){
		setMensajeGlogal(null);
	}
	public void salirDevolucionSolicitud(){
	  log.debug("salir del pop.");	
	  if(this.salirDelMensaje == false){
		  this.salirDelMensaje = true;
	  }
	}
	public String salirRespuestaIrListado(){
		String devolver = null;
		try{
			if(paginaVolver.equals("Listado")){
				devolver="devolverListaAprobar";
			}else if(paginaVolver.equals("ListaEstado")){
				devolver="devolverListaEstados";
			}
		}catch (Exception e) {
			log.error("Error, al salir de la solicitud", e.getMessage());
		}
		return devolver;
	}
	
	/**************************Adjuntar archivos***********************/
	
	private List<UploadItem> uploadFile = new ArrayList<UploadItem>();
	private String nombreArchivoTarget = new String();
		
	public List<UploadItem> getUploadFile() { return uploadFile; }
	public void setUploadFile(List<UploadItem> uploadFile) { this.uploadFile = uploadFile; }
	public String getNombreArchivoTarget() { return nombreArchivoTarget; }
	public void setNombreArchivoTarget(String nombreArchivoTarget) { this.nombreArchivoTarget = nombreArchivoTarget; }
	public void guardarArchivo(String carpeta) {
		
		if(uploadFile.size() > 0){
			if(uploadFile == null || uploadFile.isEmpty()) {
				FacesMessages.instance().add(Severity.ERROR, "El archivo no ha sido cargado" );
				return;
			}
			if(uploadFile.get(0) == null) {
				FacesMessages.instance().add(Severity.ERROR, "El archivo no ha sido cargado" );
				return;
			}
			if(listaFileUploadedDTOs == null ){
				listaFileUploadedDTOs = new ArrayList<FileUploadedDTO>(0);
			}else{
				log.debug("cantidad de registro en la lista #0", listaFileUploadedDTOs.size());
			}
			
			FileUploadedDTO file = null;
			for(UploadItem archivo :uploadFile){
				file = new FileUploadedDTO();
				file.setTipo(this.tipoSolicitudAux);				
				file.setUploadItem(archivo);
				file.setNombreArchivo(archivo.getFileName());
				try{
					if(archivo != null){
						try{
							FileInputStream fin = new FileInputStream(archivo.getFile());
							byte fileContent[] = new byte[(int)archivo.getFileSize()];
							fin.read(fileContent);
							Attachment archivoAbjunto = new Attachment();
							archivoAbjunto.setContentType(archivo.getContentType());
							archivoAbjunto.setData(fileContent);
							archivoAbjunto.setName(archivo.getFileName());
							archivoAbjunto.setSize(archivo.getFileSize());
							entityManager.persist(archivoAbjunto);
							entityManager.flush();
							file.setArchivo(archivoAbjunto);
							file.setEliminar(true);
						} catch (Exception e) {
							FacesMessages.instance().add(Severity.WARN,"A ocurrido un error al momento de cargar el archivo para la solicitud.");
						}
					}
				}catch (Exception e) {
					log.error("Error, al gurdar los archivo temporalmente #0", e.getMessage());
				}
				listaFileUploadedDTOs.add(file);
				file = null;
			}
			uploadFile.clear();
			log.debug("size #0",nombreArchivoTarget);
		}
		
		/*Modificacion RHURTADO*/
		List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
		if(listaFileUploadedDTOs != null && listaFileUploadedDTOs.size() != 0){
			for(FileUploadedDTO archivo :listaFileUploadedDTOs){
			   try {							
					OutputStream ostream = null;
					String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
					nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);
					
					String url = "archivosRespuesta"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
					String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
					InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
					
					//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
					ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
					log.debug("url #0",archivo.getUploadItem().getContentType());
					IOUtils.copyStream(ostream, istream);
					ostream.flush();
					ostream.close();
					istream.close();
					//guardar datos en la BD
					ArchivoAdjunto archivoAux = new ArchivoAdjunto();
					archivoAux.setSolicitud(solicitud);
					archivoAux.setUrl(url);
					archivoAux.setUbicacion("");
					archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
					archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
					archivoAux.setUsuario(usuarioLogueado);	
					archivoAux.setFechaCreacion(new Date());
					entityManager.persist(archivoAux);
					entityManager.flush();
					ConceptoDTO objetoAux = new ConceptoDTO();
					objetoAux.setNombreArchivo(nombreArchivo);
					objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
					listaArchivoGuardadoResp.add(objetoAux);
					objetoAux = null;
					
				} catch (FileNotFoundException e) {
					log.error("error al guardar archivo #0", e.toString());
					FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
				}
				catch (IOException e) {
					log.error("error al guardar archivo #0", e.toString());
					FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
				}catch (Exception e) {
					e.printStackTrace();
				}							
			}	
			/*Modificacion RHURTADO*/

		}

	}
	
	
	
	
	/******************************************************************/
	
	public void agregarArchivos(String nombrearchivo){
		if(uploadFile != null){
			LcredTipoSolicitud tipo = entityManager.find(LcredTipoSolicitud.class, String.valueOf(paginaIngreso));
			for(UploadItem uploadItem: uploadFile){
				FileUploadedDTO archivoDto = new FileUploadedDTO();
				archivoDto.setNombreArchivo(nombrearchivo);
				archivoDto.setUploadItem(uploadItem);
				archivoDto.setTipo(tipo);
				listaFileUploadedDTOs.add(archivoDto);
			}
		}
	}
	public void eliminarArchivo(FileUploadedDTO archivoAux){
		if(archivoAux != null){
			entityManager.remove(archivoAux.getArchivo());
			entityManager.flush();
			listaFileUploadedDTOs.remove(archivoAux);
		}
	}	
	public void obtenerOpcionNormalCuota(){
		if(this.normalCuota != null){
			log.debug("selccionado : #0", this.normalCuota);
		}
		
	}
	public void obtenerMontoNuevo(){
		try{
			if(this.montoNuevo != null){
				log.debug("monto nuevo  #0", this.montoNuevo);
			}
			if(this.pieNuevo != null){
				log.debug("monto nuevo  #0", this.pieNuevo);
			}
			if(this.montoLineaCreditoNuevo != null){
				log.debug("monto nuevo de la linea de Cr√©dito #0", this.montoLineaCreditoNuevo);
				if(this.montoLineaCredito != null && this.montoLineaCreditoNuevo != null){
					if(this.montoLineaCredito.longValue() != this.montoLineaCreditoNuevo.longValue()){
						this.modificarCredito = true;
					}
				}
				
			}			
		}catch (Exception e) {
			log.error("Error, al formatear los montos #0", e.getMessage());
		}
	}
	public void obtenerOpcionInnNomRiesgo(){
		if(this.innNomRiesgo != null){
			log.debug("selccionado innNomRiesgo : #0", this.innNomRiesgo);
		}
		
		if(this.innNomRiesgoNueva != null){
			log.debug("selccionado innNomRiesgoNueva : #0", this.innNomRiesgoNueva);
			if(this.innNomRiesgo != null && !(this.innNomRiesgo.trim()).equals(this.innNomRiesgoNueva.trim())){
				this.modificarCredito = true;
			}
		}
		
		
	}
	public void obtenerCondicionRiesgo(){
		if(this.clsRiesgo != null){
			log.debug("El clasificacion de riesgo es #0", this.clsRiesgo);
		}
		if(this.clsRiesgoNuevo != null){
			log.error("El nuevo clasificacion de riesgo es #0", this.clsRiesgoNuevo);
			if(this.clsRiesgo != null && this.clsRiesgoNuevo != null){
				if(!(this.clsRiesgo.trim()).equals(this.clsRiesgoNuevo.trim())){
					this.modificarCredito = true;
				}
			}
		}
	}	
	public void obtenerCondicionPago(){
		if(this.cPago != null){
			log.debug("El condicion de pago es #0", this.cPago);
		}
		if(this.cPagoNuevo != null){
			log.debug("El nuevo condicion de pago es #0", this.cPagoNuevo);
			if(this.cPago != null && this.cPagoNuevo != null){
				if(!(this.cPago.trim()).equals(this.cPagoNuevo.trim())){
					this.modificarCredito = true;
				}
			}
		}
		
	}
	public void obtenerCondicionRiesgoNuevo(){
		if(this.clsRiesgoNuevo != null){
			log.debug("El clasificacion de riesgo nuevo es #0", this.clsRiesgoNuevo);
			if(this.clsRiesgo != null && this.clsRiesgoNuevo != null){
				if(!(this.clsRiesgo.trim()).equals(this.clsRiesgoNuevo.trim())){
					this.modificarCondicion = true;
				}
			}
			
		}
	}	
	public void obtenerCondicionPagoNuevo(){
		if(this.cPagoNuevo != null){
			log.debug("El condicion de pago nuevo es #0", this.cPagoNuevo);
			if(this.cPago != null && this.cPagoNuevo != null){
				if(!(this.cPago.trim()).equals(this.cPagoNuevo.trim())){
					this.modificarCondicion = true;
				}
			}
		}
	}	
	public void evaluarInnominalNominalRKupfer(String codigoClsRiesgo, String codigoCdnPago ){
		setClsRiesgo(null); 
		setcPago(null);
		listaStringClsRiesgos = new ArrayList<String>(0); 
		listaStringCdnPagos = new ArrayList<String>(0);		
		try{
			
			/*recorrer la lista para encontrar los codigo*/
			if(this.listaClsRiesgos != null){
				for(ClsRiesgoDTO cls : this.listaClsRiesgos){
					//log.error("codigo de la clasificacion de riesgo #0", cls.getCodigo());
					StringBuffer cadena = new StringBuffer();
					cadena.append((cls.getCodigo().trim())); cadena.append("-"); cadena.append((cls.getDescripcion().trim()));
					if(this.paginaIngreso != 24){
						if(cls != null  && (cls.getCodigo().trim()).equals(codigoClsRiesgo)){
							//log.error("clasificacion de riesgo #0", cadena.toString());
							setClsRiesgo(cadena.toString());
						}
						listaStringClsRiesgos.add(cadena.toString());
						cadena = null;
					}else{
						if(cls != null  && ((cls.getCodigo().trim()).equals("005") || (cls.getCodigo().trim()).equals("008"))){
							//log.error("clasificacion de riesgo #0", cadena.toString());
							if(this.clsRiesgo == null){
								setClsRiesgo(cadena.toString());
								listaStringClsRiesgos.add(cadena.toString());
							}else{
								listaStringClsRiesgos.add(cadena.toString());
							}
							cadena = null;
						}
					}
				}
			}
			
			if(this.listaCondicionPagos != null){
				for(CPagoDTO obj : this.listaCondicionPagos){
					//log.error("codigo de la condicion de riesgo #0", obj.getCodigo());
					StringBuffer cadena = new StringBuffer();
					cadena.append((obj.getCodigo().trim())); cadena.append("-"); cadena.append((obj.getDescripcion().trim()));
					
					if(this.paginaIngreso != 24){
						if(obj != null  && obj.getCodigo().equals(codigoCdnPago) ){
							//log.error("condicion de riesgo #0", cadena.toString());
							setcPago(cadena.toString());
						}
						listaStringCdnPagos.add(cadena.toString());
						cadena = null;
					}else if(this.paginaIngreso == 24){
						if(obj != null  && obj.getCodigo().equals(codigoCdnPago) ){
							//log.error("condicion de riesgo #0", cadena.toString());
							setcPago(cadena.toString());
							listaStringCdnPagos.add(cadena.toString());
							cadena = null;	
							break;
						}
					}
				}					
			}			
			
		}catch (Exception e) {
			log.error("Error, a evaluar los combo #0", e.getMessage());
		}
		
		
	}
	
	public void evaluarInnominalNominalRKupferNuevo(String codigoClsRiesgo, String codigoCdnPago ){
		setClsRiesgoNuevo(null); 
		setcPagoNuevo(null);
		listaStringClsRiesgosNuevos = new ArrayList<String>(0); 
		listaStringCdnPagosNuevos = new ArrayList<String>(0);		
		try{
			
			/*recorrer la lista para encontrar los codigo*/
			if(this.listaClsRiesgos != null){
				for(ClsRiesgoDTO cls : this.listaClsRiesgos){
					//log.error("codigo de la clasificacion de riesgo #0", cls.getCodigo());
					StringBuffer cadena = new StringBuffer();
					cadena.append((cls.getCodigo().trim())); cadena.append("-"); cadena.append((cls.getDescripcion().trim()));
					if(this.paginaIngreso != 24){
						if(cls != null  && (cls.getCodigo().trim()).equals(codigoClsRiesgo)){
							//log.error("clasificacion de riesgo #0", cadena.toString());
							setClsRiesgoNuevo(cadena.toString());
						}
						listaStringClsRiesgosNuevos.add(cadena.toString());
						cadena = null;
					}else{
						if(cls != null  && ((cls.getCodigo().trim()).equals("005") || (cls.getCodigo().trim()).equals("008"))){
							//log.error("clasificacion de riesgo #0", cadena.toString());
							if(this.clsRiesgo == null){
								setClsRiesgo(cadena.toString());
								listaStringClsRiesgosNuevos.add(cadena.toString());
							}else{
								listaStringClsRiesgosNuevos.add(cadena.toString());
							}
							cadena = null;
						}
					}
				}
			}
			
			if(this.listaCondicionPagos != null){
				for(CPagoDTO obj : this.listaCondicionPagos){
					//log.error("codigo de la condicion de riesgo #0", obj.getCodigo());
					StringBuffer cadena = new StringBuffer();
					cadena.append((obj.getCodigo().trim())); cadena.append("-"); cadena.append((obj.getDescripcion().trim()));
					
					if(this.paginaIngreso != 24){
						if(obj != null  && obj.getCodigo().equals(codigoCdnPago) ){
							//log.error("condicion de riesgo #0", cadena.toString());
							setcPagoNuevo(cadena.toString());
						}
						listaStringCdnPagosNuevos.add(cadena.toString());
						cadena = null;
					}else if(this.paginaIngreso == 24){
						if(obj != null  && obj.getCodigo().equals(codigoCdnPago) ){
							//log.error("condicion de riesgo #0", cadena.toString());
							setcPagoNuevo(cadena.toString());
							listaStringCdnPagosNuevos.add(cadena.toString());
							cadena = null;	
							break;
						}
					}
				}					
			}			
			
		}catch (Exception e) {
			log.error("Error, a evaluar los combo #0", e.getMessage());
		}
		
		
	}
	
	
	public void habilitarComboCondicion(String opcion){
		if("CondicionRiesgo".equals(opcion)){
			if(comboCRiesgo){comboCRiesgo = false;}else{comboCRiesgo=true;}
			setClsRiesgoNuevo(null);
		}else if("CondicionPago".equals(opcion)){
			if(comboCPago){ comboCPago = false;}else{comboCPago=true;}
			setcPagoNuevo(null);
		}
	}
	public void seleccionOpcionesBloqueoDesbloqueo(){
		if(this.opcionBloqueoDesbloqueo != null){
			log.debug("la opcion seleccionada es #0", this.opcionBloqueoDesbloqueo);
		}else{
			log.debug("error de seleccion bloqueo/desbloqueo viene vacio");
		}
	}
	public void seleccionOpcionesBloqueoDesbloqueoNew(){
		if(this.opcionBloqueoDesbloqueoNew != null){
			log.debug("la nueva opcion seleccionada es #0", this.opcionBloqueoDesbloqueoNew);
			if(this.opcionBloqueoDesbloqueo != null && this.opcionBloqueoDesbloqueoNew != null ){
				if(!(this.opcionBloqueoDesbloqueo.trim()).equals(this.opcionBloqueoDesbloqueoNew.trim())){
					this.modificarbloqueoToDesbloqueo = true;
				}
			}
		}else{
			log.debug("error de seleccion viene vacio");
		}
	}
	public void obtenerCorreo(String usarioAux, String tipoSolicitud,List<String> listaConceptos, List<String> listaNegocio, String sucSolicitud, int canal, String ejecutivo){
		/*va a buscar los destinatarios de las solictudes*/
		Sucursal sucursalAux = null;
		try{
			if(listaDestinatarios != null){
				listaDestinatarios.clear();
			}
			if(sucSolicitud != null){
				sucursalAux = scoringService.obtenerSucursalForCodigo(sucSolicitud);
			}
			if(sucursalAux != null){
				listaDestinatarios = scoringService.obtenerListaDestinatario(
						String.valueOf(this.tipoSolicitudCodigo), 
                        String.valueOf(cliente.getCodigoCanal().ordinal()), 
                        sucursal.getZona(), 
                        sucursal.getCodigo(), 
                        "", 
                        "");	
			}else{
				listaDestinatarios = scoringService.obtenerListaDestinatario(
						String.valueOf(this.tipoSolicitudCodigo), 
                        String.valueOf(cliente.getCodigoCanal().ordinal()), 
                        sucursal.getZona(), 
                        sucursal.getCodigo(), 
                        "", 
                        "");					
			}
			
			if(listaDestinatarios != null){
				listaUsuarioSegurDTO = new ArrayList<UsuarioSegurDTO>(0);
				listaUsuarioCorreoagregados = new ArrayList<SolicitudUsuarioCorreo>(0);
				/*ingreso del emisor y del ejecutivo*/
				if(usarioAux != null){
					UsuarioSegurDTO user = scoringService.sacarDatosSessionUsuario(usarioAux);
					if(user != null){
						SolicitudUsuarioCorreo nuevo = getObtenerSolicitudUsuarioCorreo(user.getAlias());
						if(nuevo == null){
							nuevo = new SolicitudUsuarioCorreo();
							nuevo.setUsername(user.getAlias());
							nuevo.setNombre(user.getNombre());
							nuevo.setCorreo(user.getCorreo());
							nuevo.setEvaluar(false);
							nuevo.setConfirmar(false);
							nuevo = scoringService.persistSolicitudCorreo(nuevo);
							//nuevo.setCorreo(usuarioCorreo.getCorreo());
							listaUsuarioCorreoagregados.add(nuevo);
						}else{
							if(nuevo.getEvaluar() == false){
								nuevo.setConfirmar(false);
								//nuevo.setCorreo(usuarioCorreo.getCorreo());
								listaUsuarioCorreoagregados.add(nuevo);
							}else{
								nuevo.setEvaluar(false);
								nuevo.setConfirmar(false);
								nuevo = scoringService.mergerSolicitudCorreo(nuevo);
								//nuevo.setCorreo(usuarioCorreo.getCorreo());
								listaUsuarioCorreoagregados.add(nuevo);
							}
						}
					}
				}
				if(ejecutivo != null){
					UsuarioSegurDTO ejecutivoAux = scoringService.sacarDatosSessionUsuario(ejecutivo);
					if(ejecutivoAux != null){
						SolicitudUsuarioCorreo nuevoEjecutivo = getObtenerSolicitudUsuarioCorreo(ejecutivoAux.getAlias());
						if(nuevoEjecutivo == null){
							nuevoEjecutivo = new SolicitudUsuarioCorreo();
							nuevoEjecutivo.setUsername(ejecutivoAux.getAlias());
							nuevoEjecutivo.setNombre(ejecutivoAux.getNombre());
							nuevoEjecutivo.setCorreo(ejecutivoAux.getCorreo());
							nuevoEjecutivo.setEvaluar(false);
							nuevoEjecutivo.setConfirmar(false);
							nuevoEjecutivo = scoringService.persistSolicitudCorreo(nuevoEjecutivo);
							//nuevo.setCorreo(usuarioCorreo.getCorreo());
							listaUsuarioCorreoagregados.add(nuevoEjecutivo);
						}else{
							if(nuevoEjecutivo.getEvaluar() == false){
								nuevoEjecutivo.setConfirmar(false);
								//nuevo.setCorreo(usuarioCorreo.getCorreo());
								listaUsuarioCorreoagregados.add(nuevoEjecutivo);
							}else{
								nuevoEjecutivo.setEvaluar(false);
								nuevoEjecutivo.setConfirmar(false);
								nuevoEjecutivo = scoringService.mergerSolicitudCorreo(nuevoEjecutivo);
								//nuevo.setCorreo(usuarioCorreo.getCorreo());
								listaUsuarioCorreoagregados.add(nuevoEjecutivo);
							}
						}
					}
				}
				
				
				
				
				/*evaluacion de la solicitud y el usuario */
				try{
					if(listaDestinatarios != null){
						for(DestinatarioDTO dto : listaDestinatarios){
							if(dto != null){
								UsuarioSegurDTO usuarioSegur =  scoringService.sacarDatosSessionUsuario(dto.getUsername());	
								if(dto.getTipoSolicitud().equals("1") || dto.getTipoSolicitud().equals("2") || dto.getTipoSolicitud().equals("3")|| dto.getTipoSolicitud().equals("5")){
									if(usuarioSegur != null){
										if(scoringService.obtenerHabilitacionPorSucursal(usuarioSegur.getIdPersonal(),sucursal.getCodigo(), cliente.getCodigoCanal().ordinal())){
											if(paginaIngreso == 11 || paginaIngreso == 12 || paginaIngreso == 21 || paginaIngreso == 22 || paginaIngreso == 23){
												boolean validoNegocio = false;
												boolean validoConcepto = false;
												//List<Integer> listaPerfiles =  scoringService.obtenerPerfilesDelUsuario(usuarioSegur.getIdPersonal());
												List<FuncionesType> listafunciones = scoringService.obtenerFuncionesUsuario(usuarioSegur.getIdPersonal());
												if(listaNegocio != null && listaNegocio.size() != 0){
													for(String codigo : listaNegocio){
														if(listafunciones != null){
															for(FuncionesType ft : listafunciones){
																if(ft != null && ft.ordinal() != 0){
																	//log.debug("codigo de usuario: #0 y nombre  #1", usuarioSegur.getIdPersonal(), usuarioSegur.getNombre());
																	//log.debug("negocio #0", codigo);
																	//log.debug("canal #0  y codigo canal #1",cliente.getCodigoCanal(), canal);
																	//log.debug("funcion  #0 y codigo de funcion #1", ft, ft.ordinal());
																	
																	validoNegocio = scoringService.obtenerHabilitacionUsuario(usuarioSegur.getIdPersonal(),
																														codigo.trim(), 
																														canal, 
																														ft.ordinal());
																	
																	//log.debug("resultado #0", validoNegocio);
																	if(validoNegocio){
																		break;
																	}
															    }
															}
														}
													}
												}
												if(listaConceptos != null && listaConceptos.size() != 0){
													for(String codigo : listaConceptos){
														if(listafunciones != null){
															for(FuncionesType ft : listafunciones){
																if(ft != null && ft.ordinal() != 0){
																	//log.debug("codigo de usuario: #0 y nombre  #1", usuarioSegur.getIdPersonal(), usuarioSegur.getNombre());
																	//log.debug("negocio #0", codigo);
																	//log.debug("canal #0  y codigo canal #1", cliente.getCodigoCanal(), canal);
																	//log.debug("funcion  #0 y codigo de funcion #1", ft, ft.ordinal());
																	
																	validoConcepto = scoringService.obtenerHabilitacionUsuario(usuarioSegur.getIdPersonal(),
																														codigo.trim(), 
																														canal, 
																														ft.ordinal());
																	
																	//log.debug("resultado #0", validoConcepto);
																	if(validoConcepto){
																		break;
																	}
															    }
															}
														}
														if(validoConcepto){
															break;
														}													
													}
												}								
												
												if(paginaIngreso == 11 || paginaIngreso == 12){
													if(validoNegocio == true && validoConcepto == true){
														SolicitudUsuarioCorreo suc =  getObtenerSolicitudUsuarioCorreo(usuarioSegur.getAlias());
														if(suc == null){
															suc = new SolicitudUsuarioCorreo();
															suc.setConfirmar(false);
															suc.setCorreo(usuarioSegur.getCorreo());
															suc.setEvaluar(false);
															suc.setNombre(usuarioSegur.getNombre());
															suc.setUsername(usuarioSegur.getAlias());
															suc = scoringService.persistSolicitudCorreo(suc);
															if(listaDescripcionUsuariosCorreos != null){
																if(!listaDescripcionUsuariosCorreos.contains(suc)){
																	listaDescripcionUsuariosCorreos.add(suc);
																}
															}else{
																listaDescripcionUsuariosCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
																listaDescripcionUsuariosCorreos.add(suc);
															}
														}else{
															if(suc.getEvaluar() == false){
																suc.setConfirmar(false);
																suc = scoringService.persistSolicitudCorreo(suc);
																
																if(listaDescripcionUsuariosCorreos != null){
																	if(!listaDescripcionUsuariosCorreos.contains(suc)){
																		listaDescripcionUsuariosCorreos.add(suc);
																	}
																}else{
																	listaDescripcionUsuariosCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
																	listaDescripcionUsuariosCorreos.add(suc);
																}															
															
															}else{
																suc.setEvaluar(false);
																suc.setConfirmar(false);
																suc = scoringService.mergerSolicitudCorreo(suc);
																
																if(listaDescripcionUsuariosCorreos != null){
																	if(!listaDescripcionUsuariosCorreos.contains(suc)){
																		listaDescripcionUsuariosCorreos.add(suc);
																	}
																}else{
																	listaDescripcionUsuariosCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
																	listaDescripcionUsuariosCorreos.add(suc);
																}
															}
														}
													}else{
														if(usuarioSegur.isObligatorio()){
															SolicitudUsuarioCorreo suc =  getObtenerSolicitudUsuarioCorreo(usuarioSegur.getAlias());
															if(suc == null){
																suc = new SolicitudUsuarioCorreo();
																suc.setConfirmar(false);
																suc.setCorreo(usuarioSegur.getCorreo());
																suc.setEvaluar(false);
																suc.setNombre(usuarioSegur.getNombre());
																suc.setUsername(usuarioSegur.getAlias());
																
																suc = scoringService.persistSolicitudCorreo(suc);
																
																if(listaDescripcionUsuariosCorreos != null){
																	if(!listaDescripcionUsuariosCorreos.contains(suc)){
																		listaDescripcionUsuariosCorreos.add(suc);
																	}
																}else{
																	listaDescripcionUsuariosCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
																	listaDescripcionUsuariosCorreos.add(suc);
																}
																
															}else{
																if(suc.getEvaluar() == false){
																	suc.setConfirmar(false);
																	if(listaDescripcionUsuariosCorreos != null){
																		if(!listaDescripcionUsuariosCorreos.contains(suc)){
																			listaDescripcionUsuariosCorreos.add(suc);
																		}
																	}else{
																		listaDescripcionUsuariosCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
																		listaDescripcionUsuariosCorreos.add(suc);
																	}
																	
																}else{
																	suc.setEvaluar(false);
																	suc.setConfirmar(false);
																	suc = scoringService.mergerSolicitudCorreo(suc);
																	if(listaDescripcionUsuariosCorreos != null){
																		if(!listaDescripcionUsuariosCorreos.contains(suc)){
																			listaDescripcionUsuariosCorreos.add(suc);
																		}
																	}else{
																		listaDescripcionUsuariosCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
																		listaDescripcionUsuariosCorreos.add(suc);
																	}
																}
															}
														}else{
															SolicitudUsuarioCorreo suc =  getObtenerSolicitudUsuarioCorreo(usuarioSegur.getAlias());
															if(suc == null){
																suc = new SolicitudUsuarioCorreo();
																suc.setConfirmar(true);
																suc.setCorreo(usuarioSegur.getCorreo());
																suc.setEvaluar(true);
																suc.setNombre(usuarioSegur.getNombre());
																suc.setUsername(usuarioSegur.getAlias());
																
																suc = scoringService.persistSolicitudCorreo(suc);
																if(listaUsuarioCorreos != null){
																	if(!listaUsuarioCorreos.contains(suc)){
																		listaUsuarioCorreos.add(suc);
																	}
																}else{
																	listaUsuarioCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
																	listaUsuarioCorreos.add(suc);
																}
																
																if(listaDescripcionUsuariosCorreos != null){
																	if(!listaDescripcionUsuariosCorreos.contains(suc)){
																		listaDescripcionUsuariosCorreos.add(suc);
																	}
																}else{
																	listaDescripcionUsuariosCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
																	listaDescripcionUsuariosCorreos.add(suc);
																}
																
															}else{
																if(suc.getEvaluar() == false){
																	suc.setEvaluar(true);
																	suc.setConfirmar(true);
																	if(listaUsuarioCorreos != null){
																		if(!listaUsuarioCorreos.contains(suc)){
																			listaUsuarioCorreos.add(suc);
																		}
																	}else{
																		listaUsuarioCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
																		listaUsuarioCorreos.add(suc);
																	}
																	
																	if(listaDescripcionUsuariosCorreos != null){
																		if(!listaDescripcionUsuariosCorreos.contains(suc)){
																			listaDescripcionUsuariosCorreos.add(suc);
																		}
																	}else{
																		listaDescripcionUsuariosCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
																		listaDescripcionUsuariosCorreos.add(suc);
																	}
																}else{
																	suc.setEvaluar(true);
																	suc.setConfirmar(true);
																	suc = scoringService.mergerSolicitudCorreo(suc);
																	if(listaUsuarioCorreos != null){
																		if(!listaUsuarioCorreos.contains(suc)){
																			listaUsuarioCorreos.add(suc);
																		}
																	}else{
																		listaUsuarioCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
																		listaUsuarioCorreos.add(suc);
																	}
																	
																	if(listaDescripcionUsuariosCorreos != null){
																		if(!listaDescripcionUsuariosCorreos.contains(suc)){
																			listaDescripcionUsuariosCorreos.add(suc);
																		}
																	}else{
																		listaDescripcionUsuariosCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
																		listaDescripcionUsuariosCorreos.add(suc);
																	}
																}
															}														
														}
													}
												}else if(paginaIngreso == 21 || paginaIngreso == 22 || paginaIngreso ==23){
													if(validoNegocio == true){
														SolicitudUsuarioCorreo suc =  getObtenerSolicitudUsuarioCorreo(usuarioSegur.getAlias());
														if(suc == null){
															suc = new SolicitudUsuarioCorreo();
															suc.setConfirmar(false);
															suc.setCorreo(usuarioSegur.getCorreo());
															suc.setEvaluar(false);
															suc.setNombre(usuarioSegur.getNombre());
															suc.setUsername(usuarioSegur.getAlias());
															suc = scoringService.persistSolicitudCorreo(suc);
															if(listaDescripcionUsuariosCorreos != null){
																if(!listaDescripcionUsuariosCorreos.contains(suc)){
																	listaDescripcionUsuariosCorreos.add(suc);
																}
															}else{
																listaDescripcionUsuariosCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
																listaDescripcionUsuariosCorreos.add(suc);
															}
															
														}else{
															if(suc.getEvaluar() == false){
																suc.setConfirmar(false);
																suc = scoringService.persistSolicitudCorreo(suc);
																if(listaDescripcionUsuariosCorreos != null){
																	if(!listaDescripcionUsuariosCorreos.contains(suc)){
																		listaDescripcionUsuariosCorreos.add(suc);
																	}
																}else{
																	listaDescripcionUsuariosCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
																	listaDescripcionUsuariosCorreos.add(suc);
																}															
															}else{
																suc.setEvaluar(false);
																suc.setConfirmar(false);
																suc = scoringService.mergerSolicitudCorreo(suc);
																
																if(listaDescripcionUsuariosCorreos != null){
																	if(!listaDescripcionUsuariosCorreos.contains(suc)){
																		listaDescripcionUsuariosCorreos.add(suc);
																	}
																}else{
																	listaDescripcionUsuariosCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
																	listaDescripcionUsuariosCorreos.add(suc);
																}
															
															}
														}
													}else{
														if(usuarioSegur.isObligatorio()){
															SolicitudUsuarioCorreo suc =  getObtenerSolicitudUsuarioCorreo(usuarioSegur.getAlias());
															if(suc == null){
																suc = new SolicitudUsuarioCorreo();
																suc.setConfirmar(false);
																suc.setCorreo(usuarioSegur.getCorreo());
																suc.setEvaluar(false);
																suc.setNombre(usuarioSegur.getNombre());
																suc.setUsername(usuarioSegur.getAlias());
																
																suc = scoringService.persistSolicitudCorreo(suc);
																if(listaDescripcionUsuariosCorreos != null){
																	if(!listaDescripcionUsuariosCorreos.contains(suc)){
																		listaDescripcionUsuariosCorreos.add(suc);
																	}
																}else{
																	listaDescripcionUsuariosCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
																	listaDescripcionUsuariosCorreos.add(suc);
																}
																
															}else{
																if(suc.getEvaluar() == false){
																	suc.setConfirmar(false);
																	if(listaDescripcionUsuariosCorreos != null){
																		if(!listaDescripcionUsuariosCorreos.contains(suc)){
																			listaDescripcionUsuariosCorreos.add(suc);
																		}
																	}else{
																		listaDescripcionUsuariosCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
																		listaDescripcionUsuariosCorreos.add(suc);
																	}
																}else{
																	suc.setEvaluar(false);
																	suc.setConfirmar(false);
																	suc = scoringService.mergerSolicitudCorreo(suc);
																	if(listaDescripcionUsuariosCorreos != null){
																		if(!listaDescripcionUsuariosCorreos.contains(suc)){
																			listaDescripcionUsuariosCorreos.add(suc);
																		}
																	}else{
																		listaDescripcionUsuariosCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
																		listaDescripcionUsuariosCorreos.add(suc);
																	}
																}
															}
														}else{
															SolicitudUsuarioCorreo suc =  getObtenerSolicitudUsuarioCorreo(usuarioSegur.getAlias());
															if(suc == null){
																suc = new SolicitudUsuarioCorreo();
																suc.setConfirmar(true);
																suc.setCorreo(usuarioSegur.getCorreo());
																suc.setEvaluar(true);
																suc.setNombre(usuarioSegur.getNombre());
																suc.setUsername(usuarioSegur.getAlias());
																
																suc = scoringService.persistSolicitudCorreo(suc);
																if(listaUsuarioCorreos != null){
																	if(!listaUsuarioCorreos.contains(suc)){
																		listaUsuarioCorreos.add(suc);
																	}
																}else{
																	listaUsuarioCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
																	listaUsuarioCorreos.add(suc);
																}
																
																if(listaDescripcionUsuariosCorreos != null){
																	if(!listaDescripcionUsuariosCorreos.contains(suc)){
																		listaDescripcionUsuariosCorreos.add(suc);
																	}
																}else{
																	listaDescripcionUsuariosCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
																	listaDescripcionUsuariosCorreos.add(suc);
																}
																
															}else{
																if(suc.getEvaluar() == false){
																	suc.setConfirmar(true);
																	if(listaUsuarioCorreos != null){
																		if(!listaUsuarioCorreos.contains(suc)){
																			listaUsuarioCorreos.add(suc);
																		}
																	}else{
																		listaUsuarioCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
																		listaUsuarioCorreos.add(suc);
																	}
																	
																	if(listaDescripcionUsuariosCorreos != null){
																		if(!listaDescripcionUsuariosCorreos.contains(suc)){
																			listaDescripcionUsuariosCorreos.add(suc);
																		}
																	}else{
																		listaDescripcionUsuariosCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
																		listaDescripcionUsuariosCorreos.add(suc);
																	}
																}else{
																	suc.setEvaluar(true);
																	suc.setConfirmar(true);
																	suc = scoringService.mergerSolicitudCorreo(suc);
																	if(listaUsuarioCorreos != null){
																		if(!listaUsuarioCorreos.contains(suc)){
																			listaUsuarioCorreos.add(suc);
																		}
																	}else{
																		listaUsuarioCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
																		listaUsuarioCorreos.add(suc);
																	}
																	
																	if(listaDescripcionUsuariosCorreos != null){
																		if(!listaDescripcionUsuariosCorreos.contains(suc)){
																			listaDescripcionUsuariosCorreos.add(suc);
																		}
																	}else{
																		listaDescripcionUsuariosCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
																		listaDescripcionUsuariosCorreos.add(suc);
																	}
																}
															}														
														}
													}
												}
											}else{/*es para otras solicitudes */
												boolean validoCanalVenta = scoringService.obtenerAsignacionCanalVentaDelUsuario(usuarioSegur.getIdPersonal(), canal);
												if(validoCanalVenta){
													SolicitudUsuarioCorreo suc =  getObtenerSolicitudUsuarioCorreo(usuarioSegur.getAlias());
													if(suc == null){
														suc = new SolicitudUsuarioCorreo();
														suc.setConfirmar(false);
														suc.setCorreo(usuarioSegur.getCorreo());
														suc.setEvaluar(false);
														suc.setNombre(usuarioSegur.getNombre());
														suc.setUsername(usuarioSegur.getAlias());
														suc = scoringService.persistSolicitudCorreo(suc);
														if(listaDescripcionUsuariosCorreos != null){
															if(!listaDescripcionUsuariosCorreos.contains(suc)){
																listaDescripcionUsuariosCorreos.add(suc);
															}
														}else{
															listaDescripcionUsuariosCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
															listaDescripcionUsuariosCorreos.add(suc);
														}
													}else{
														if(suc.getEvaluar() == false){
															suc.setConfirmar(false);
															suc = scoringService.persistSolicitudCorreo(suc);
															if(listaDescripcionUsuariosCorreos != null){
																if(!listaDescripcionUsuariosCorreos.contains(suc)){
																	listaDescripcionUsuariosCorreos.add(suc);
																}
															}else{
																listaDescripcionUsuariosCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
																listaDescripcionUsuariosCorreos.add(suc);
															}															
														}else{
															suc.setEvaluar(false);
															suc.setConfirmar(false);
															suc = scoringService.mergerSolicitudCorreo(suc);
															
														
															if(listaDescripcionUsuariosCorreos != null){
																if(!listaDescripcionUsuariosCorreos.contains(suc)){
																	listaDescripcionUsuariosCorreos.add(suc);
																}
															}else{
																listaDescripcionUsuariosCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
																listaDescripcionUsuariosCorreos.add(suc);
															}
															
														}
													}
												}else{
													if(usuarioSegur.isObligatorio()){
														SolicitudUsuarioCorreo suc =  getObtenerSolicitudUsuarioCorreo(usuarioSegur.getAlias());
														if(suc == null){
															suc = new SolicitudUsuarioCorreo();
															suc.setConfirmar(false);
															suc.setCorreo(usuarioSegur.getCorreo());
															suc.setEvaluar(false);
															suc.setNombre(usuarioSegur.getNombre());
															suc.setUsername(usuarioSegur.getAlias());
															
															suc = scoringService.persistSolicitudCorreo(suc);
															if(listaDescripcionUsuariosCorreos != null){
																if(!listaDescripcionUsuariosCorreos.contains(suc)){
																	listaDescripcionUsuariosCorreos.add(suc);
																}
															}else{
																listaDescripcionUsuariosCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
																listaDescripcionUsuariosCorreos.add(suc);
															}
															
														}else{
															if(suc.getEvaluar() == false){
																suc.setConfirmar(false);
																if(listaDescripcionUsuariosCorreos != null){
																	if(!listaDescripcionUsuariosCorreos.contains(suc)){
																		listaDescripcionUsuariosCorreos.add(suc);
																	}
																}else{
																	listaDescripcionUsuariosCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
																	listaDescripcionUsuariosCorreos.add(suc);
																}
															}else{
																suc.setEvaluar(false);
																suc.setConfirmar(false);
																suc = scoringService.mergerSolicitudCorreo(suc);
																if(listaDescripcionUsuariosCorreos != null){
																	if(!listaDescripcionUsuariosCorreos.contains(suc)){
																		listaDescripcionUsuariosCorreos.add(suc);
																	}
																}else{
																	listaDescripcionUsuariosCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
																	listaDescripcionUsuariosCorreos.add(suc);
																}
															}
														}
													}else{
														SolicitudUsuarioCorreo suc =  getObtenerSolicitudUsuarioCorreo(usuarioSegur.getAlias());
														if(suc == null){
															suc = new SolicitudUsuarioCorreo();
															suc.setConfirmar(true);
															suc.setCorreo(usuarioSegur.getCorreo());
															suc.setEvaluar(true);
															suc.setNombre(usuarioSegur.getNombre());
															suc.setUsername(usuarioSegur.getAlias());
															
															suc = scoringService.persistSolicitudCorreo(suc);
															if(listaUsuarioCorreos != null){
																if(!listaUsuarioCorreos.contains(suc)){
																	listaUsuarioCorreos.add(suc);
																}
															}else{
																listaUsuarioCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
																listaUsuarioCorreos.add(suc);
															}
															
															if(listaDescripcionUsuariosCorreos != null){
																if(!listaDescripcionUsuariosCorreos.contains(suc)){
																	listaDescripcionUsuariosCorreos.add(suc);
																}
															}else{
																listaDescripcionUsuariosCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
																listaDescripcionUsuariosCorreos.add(suc);
															}
															
														}else{
															if(suc.getEvaluar() == false){
																suc.setEvaluar(true);
																suc.setConfirmar(true);
																if(listaUsuarioCorreos != null){
																	if(!listaUsuarioCorreos.contains(suc)){
																		listaUsuarioCorreos.add(suc);
																	}
																}else{
																	listaUsuarioCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
																	listaUsuarioCorreos.add(suc);
																}
																
																if(listaDescripcionUsuariosCorreos != null){
																	if(!listaDescripcionUsuariosCorreos.contains(suc)){
																		listaDescripcionUsuariosCorreos.add(suc);
																	}
																}else{
																	listaDescripcionUsuariosCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
																	listaDescripcionUsuariosCorreos.add(suc);
																}
															}else{
																suc.setEvaluar(true);
																suc.setConfirmar(true);
																suc = scoringService.mergerSolicitudCorreo(suc);
																if(listaUsuarioCorreos != null){
																	if(!listaUsuarioCorreos.contains(suc)){
																		listaUsuarioCorreos.add(suc);
																	}
																}else{
																	listaUsuarioCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
																	listaUsuarioCorreos.add(suc);
																}
																
																if(listaDescripcionUsuariosCorreos != null){
																	if(!listaDescripcionUsuariosCorreos.contains(suc)){
																		listaDescripcionUsuariosCorreos.add(suc);
																	}
																}else{
																	listaDescripcionUsuariosCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
																	listaDescripcionUsuariosCorreos.add(suc);
																}
															}
														}														
													}
												}
											}
									   }	
									}
								}else{
									if(listaUsuarioSegurDTO != null){
										if(!listaUsuarioSegurDTO.contains(usuarioSegur)){
											listaUsuarioSegurDTO.add(usuarioSegur);
										}
									}else{
										listaUsuarioSegurDTO = new ArrayList<UsuarioSegurDTO>(0);
										listaUsuarioSegurDTO.add(usuarioSegur);
									}
								}
							}
						}
					}
				}catch (Exception e) {
					log.error("Error al sacar los datos del usaurio #0", e.getMessage());
				}				
			}
			log.debug(listaUsuarioCorreoagregados.size());
			log.debug(listaDescripcionUsuariosCorreos.size());	
			agregarCorreosObligatorios();
		}catch (Exception e) {
			log.error("Error, sacar los destinatarios : #0", e.getMessage());
		}
	}
	public void agregarCorreosObligatorios(){
		List<UsuarioCorreoDTO> listaUsuarios = scoringService.getListaUsuariosSegur();
		boolean exiete = false; 
		try{
			if(listaUsuarios != null){
				for(UsuarioCorreoDTO uc : listaUsuarios){
					for(SolicitudUsuarioCorreo uc2: listaDescripcionUsuariosCorreos){
						if((uc.getAlias().toLowerCase()).trim().equals((uc2.getUsername().toLowerCase()).trim())){
							exiete = true;
						}
					}
					if(exiete == false){
						if(!"ADMINISTRADOR".equals(usuarioSegur.getAlias())){
						SolicitudUsuarioCorreo suc =  getObtenerSolicitudUsuarioCorreo(usuarioSegur.getAlias());
						if(suc == null){
							suc = new SolicitudUsuarioCorreo();
							suc.setConfirmar(false);
							suc.setCorreo(suc.getCorreo());
							suc.setEvaluar(false);
							suc.setNombre(suc.getNombre());
							suc.setUsername(suc.getUsername());
							
							suc = scoringService.persistSolicitudCorreo(suc);
							if(listaDescripcionUsuariosCorreos != null){
								if(!listaDescripcionUsuariosCorreos.contains(suc)){
									listaDescripcionUsuariosCorreos.add(suc);
								}
							}else{
								listaDescripcionUsuariosCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
								listaDescripcionUsuariosCorreos.add(suc);
							}
							
						}else{
							if(listaDescripcionUsuariosCorreos != null){
								if(!listaDescripcionUsuariosCorreos.contains(suc)){
									listaDescripcionUsuariosCorreos.add(suc);
								}
							}else{
								listaDescripcionUsuariosCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
								listaDescripcionUsuariosCorreos.add(suc);
							}
						  }
					   }
					}else{
						exiete = false;
					}
				}
			}
			log.debug(listaUsuarioCorreoagregados.size());
			log.debug(listaDescripcionUsuariosCorreos.size());
		}catch (Exception e) {
			log.error("Error al agregar los correos obligatorios #1", e.getMessage());
		}
	}
	
	/* agregar usuario correo*/
	public void agregarUsuarioCorreoListaUsuarioCorreoReserva(){
		if(this.listaUsuarioCorreoagregadosSel != null && this.listaUsuarioCorreoagregadosSel.size() > 0){
			for(SolicitudUsuarioCorreo uc : listaUsuarioCorreoagregadosSel){
				SolicitudUsuarioCorreo usuCorreoAux =  buscarUsuarioCorreo(uc.getNombre());
				if(usuCorreoAux != null){
					if(listaUsuarioCorreoagregados.contains(usuCorreoAux)){
						this.usuarioCorreo = null;
					}else{
						listaUsuarioCorreoagregados.add(usuCorreoAux);
						this.usuarioCorreo = null;
						this.mensajeExplicativo = null;
					}
				}
			}
			listaUsuarioCorreoagregadosSel = null;
			
		}else{setMensajeExplicativo("Debe seleccionar el Usuario.");}
	}	
	public void eliminarUsuarioCorreoListaAgregado(UsuarioCorreoDTO usuarioCorreoAux){
		if(usuarioCorreoAux != null){
			listaUsuarioCorreoagregados.remove(usuarioCorreoAux);
		}
	}	
	public void eliminarUsuarioCorreoListaAgregado(SolicitudUsuarioCorreo usuarioCorreoAux){
		if(usuarioCorreoAux != null){
			listaUsuarioCorreoagregados.remove(usuarioCorreoAux);
		}
		ingresarModelCorreo();
	}	
	public SolicitudUsuarioCorreo buscarUsuarioCorreo(String codigo){
		SolicitudUsuarioCorreo usuarioCorreo = null;
		if(listaUsuarioCorreos != null && codigo != null){
			for(SolicitudUsuarioCorreo u: listaUsuarioCorreos){
				if(u.getNombre().equals(codigo)){
					usuarioCorreo = u;
					usuarioCorreo.setConfirmar(false);
					break;
				}
			}
		}
		return usuarioCorreo;
	}
	public void ingresarModelCorreo(){
		this.setUsuarioCorreo(null);
		this.setMensajeExplicativo(null);
		List<SolicitudUsuarioCorreo> listaNueva = null;
		listaUsuarioCorreoagregadosSel = new ArrayList<SolicitudUsuarioCorreo>(0);
		if(listaUsuarioCorreos != null && solicitud != null){
			if(listaDescripcionUsuariosCorreos == null){
				listaDescripcionUsuariosCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
			}
			for(SolicitudUsuarioCorreo suc : listaDescripcionUsuariosCorreos){
				if(listaNueva != null){
					boolean existe = false;
					for(SolicitudUsuarioCorreo sucAux :listaNueva){
						if(suc.getNombre().equals(sucAux.getNombre())){
							existe = true;
						}
					}
					
					if(existe == false){
						listaNueva.add(suc);
					}else{
						existe = false;
					}
				}else{
					listaNueva = new ArrayList<SolicitudUsuarioCorreo>(0);
					listaNueva.add(suc);
				}
				
				if(!listaDescripcionUsuariosCorreos.contains(suc)){
					listaDescripcionUsuariosCorreos.add(suc);
				}
			}
		}
	}
	public void obtenerUsuarioCorreo(){
		if(this.usuarioCorreo != null){
			log.debug("El usaurio seleccionado es el siguiente #0", this.usuarioCorreo.getNombre());
		}
	}
	public void sacarLogSolicitud(){
		SolicitudDTO sol = null;
		try{
			if(solicitud != null && cliente != null){
				sol = new SolicitudDTO();
				sol.setIdSolictud(solicitud.getId().getNumSolicitud());
				sol.setRazonSocial(cliente.getRazonSocial());
				sol.setEstado(cliente.getEstadoSolicitud());
				
				globalHitosLogdService.setSolicitud(sol);
				List<SolicitudLogs> listaSolicitudesLogs = scoringService.getSolicitudLogs(sol.getIdSolictud());
				if(listaSolicitudesLogs != null){
					globalHitosLogdService.setListaLogs(listaSolicitudesLogs);
				}
			}
		}catch (Exception e) {
			log.error("Error, al desplegar los datos de la solicitud", e.getMessage());
		}
		
		
	}
	public void  obtenerAprobarRecharzar(){
		if(this.aprobarRechazar != null){
			log.debug("la opcion selecionada es #0", this.aprobarRechazar);
		}
	}
	public void obtenerAnalisisAprobacion(){
		try{
		Sucursal  sucursalAux = null;
		int tipoCuenta  = 0 ;
		if("Mixto".equals(solicitud.getCanal())){
			tipoCuenta  = TipoCuentasKupferType.MX.ordinal();
		}else if("Kupfer Express".equals(solicitud.getCanal())){
			tipoCuenta  = TipoCuentasKupferType.KX.ordinal();
		}else if("Grandes Cuentas".equals(solicitud.getCanal())){
			tipoCuenta = TipoCuentasKupferType.GC.ordinal();
		}	
		
		if(this.analisisAprobacion != null && this.analisisAprobacion.equals("Analisis")){
			this.habilitaSoloAprobacion = false;
		}else{
			this.habilitaSoloAprobacion = true;
		}
		
		if(listaDestinatarios != null){
			listaDestinatarios.clear();
		}
		
		if(solicitud.getCodSucursal() != null){
			sucursalAux = scoringService.obtenerSucursalForCodigo(solicitud.getCodSucursal());
		}
		
		
		
		
		if(sucursalAux != null){
			
			listaDestinatarios = scoringService.obtenerListaDestinatario(
					String.valueOf(this.tipoSolicitudCodigo), 
                    String.valueOf(cliente.getCodigoCanal().ordinal()), 
                    sucursalAux.getZona(), 
                    sucursalAux.getCodigo(), 
                    "", 
                    "");				
//			listaDestinatarios = scoringService.obtenerListaDestinatario(usuarioLogueado.getAlias(), "01", 
//	                        cliente.getCodigoCanal().name(), 
//	                        sucursalAux.getZona(), 
//	                        sucursalAux.getCodigo(), 
//	                        solicitud.getRiesgoKupfer().longValue(), 
//	                        this.tipoSolicitudCorreo);	
		}else{
			listaDestinatarios = scoringService.obtenerListaDestinatario(
					String.valueOf(this.tipoSolicitudCodigo), 
                    String.valueOf(cliente.getCodigoCanal().ordinal()), 
                    sucursal.getZona(), 
                    sucursal.getCodigo(), 
                    "", 
                    "");				
//			listaDestinatarios = scoringService.obtenerListaDestinatario(usuarioLogueado.getAlias(), "01", 
//                    cliente.getCodigoCanal().name(), 
//                    sucursal.getZona(), 
//                    sucursal.getCodigo(), 
//                    solicitud.getRiesgoKupfer().longValue(), 
//                    this.tipoSolicitudCorreo);					
		}
		
		
		if(this.analisisAprobacion != null ){
			//listaDescripcionUsuariosCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
			log.debug("selccionado  : #0", this.analisisAprobacion);
			if(solicitud != null){
				
				if(this.listaDestinatarios != null){
					for(DestinatarioDTO dto : listaDestinatarios){
						if(dto != null){
							UsuarioSegurDTO usuarioSegur =  scoringService.sacarDatosSessionUsuario(dto.getUsername());	
							if(dto.getTipoSolicitud().equals("1") || dto.getTipoSolicitud().equals("2") || dto.getTipoSolicitud().equals("3")|| dto.getTipoSolicitud().equals("5")){
								if(usuarioSegur != null){
									
									if(scoringService.obtenerHabilitacionPorSucursal(usuarioSegur.getIdPersonal(),sucursal.getCodigo(), cliente.getCodigoCanal().ordinal())){
									if(paginaIngreso == 11 || paginaIngreso == 12 || paginaIngreso == 21 || paginaIngreso == 22 || paginaIngreso == 23){
										boolean validoNegocio = false;
										boolean validoConcepto = false;
										//List<Integer> listaPerfiles =  scoringService.obtenerPerfilesDelUsuario(usuarioSegur.getIdPersonal());
										List<FuncionesType> listafunciones = scoringService.obtenerFuncionesUsuario(usuarioSegur.getIdPersonal());
										if(listaCodigoNegocio != null && listaCodigoNegocio.size() != 0){
											boolean quebreFuera = false;
											for(String codigo : listaCodigoNegocio){
												if(listafunciones != null){
													for(FuncionesType ft : listafunciones){
														if(ft != null && ft.ordinal() != 0){
															log.debug("codigo de usuario: #0 y nombre  #1", usuarioSegur.getIdPersonal(), usuarioSegur.getNombre());
															log.debug("negocio #0", codigo);
															log.debug("canal #0  y codigo canal #1",cliente.getCodigoCanal(), tipoCuenta);
															log.debug("funcion  #0 y codigo de funcion #1", ft, ft.ordinal());
															
															validoNegocio = scoringService.obtenerHabilitacionUsuario(usuarioSegur.getIdPersonal(),
																												codigo.trim(), 
																												tipoCuenta, 
																												ft.ordinal());
															
															log.debug("resultado #0", validoNegocio);
															if(validoNegocio){
																quebreFuera = true;
																break;
															}
													    }
													}
													if(quebreFuera){
														break;
													}
												}
											}
										}
										if(listaCodigoConcepto != null && listaCodigoConcepto.size() != 0){
											boolean quebreFuera = false;
											for(String codigo : listaCodigoConcepto){
												if(listafunciones != null){
													for(FuncionesType ft : listafunciones){
														if(ft != null && ft.ordinal() != 0){
															log.debug("codigo de usuario: #0 y nombre  #1", usuarioSegur.getIdPersonal(), usuarioSegur.getNombre());
															log.debug("negocio #0", codigo);
															log.debug("canal #0  y codigo canal #1", cliente.getCodigoCanal(), tipoCuenta);
															log.debug("funcion  #0 y codigo de funcion #1", ft, ft.ordinal());
															
															validoConcepto = scoringService.obtenerHabilitacionUsuario(usuarioSegur.getIdPersonal(),
																												codigo.trim(), 
																												tipoCuenta, 
																												ft.ordinal());
															
															log.debug("resultado #0", validoConcepto);
															if(validoConcepto){
																quebreFuera = true;
																break;
															}
													    }
													}
													if(quebreFuera){
														break;
													}
												}
											}
										}								
										
										if(paginaIngreso == 11 || paginaIngreso == 12){
											if(validoNegocio == true && validoConcepto == true){
												SolicitudUsuarioCorreo suc =  getObtenerSolicitudUsuarioCorreo(usuarioSegur.getAlias());
												if(suc == null){
													suc = new SolicitudUsuarioCorreo();
													suc.setConfirmar(false);
													suc.setCorreo(usuarioSegur.getCorreo());
													suc.setEvaluar(false);
													suc.setNombre(usuarioSegur.getNombre());
													suc.setUsername(usuarioSegur.getAlias());
													suc = scoringService.persistSolicitudCorreo(suc);
													if(listaDescripcionUsuariosCorreos != null){
														if(!listaDescripcionUsuariosCorreos.contains(suc)){
															listaDescripcionUsuariosCorreos.add(suc);
														}
													}else{
														listaDescripcionUsuariosCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
														listaDescripcionUsuariosCorreos.add(suc);
													}
													if(listaUsuarioCorreos != null){
														if(!listaUsuarioCorreos.contains(suc)){
															listaUsuarioCorreos.add(suc);
														}
													}else{
														listaUsuarioCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
														listaUsuarioCorreos.add(suc);
													}													
												}else{
													if(suc.getEvaluar() == false){
														suc.setConfirmar(false);
														suc = scoringService.persistSolicitudCorreo(suc);
														if(listaDescripcionUsuariosCorreos != null){
															if(!listaDescripcionUsuariosCorreos.contains(suc)){
																listaDescripcionUsuariosCorreos.add(suc);
															}
														}else{
															listaDescripcionUsuariosCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
															listaDescripcionUsuariosCorreos.add(suc);
														}															
														if(listaUsuarioCorreos != null){
															if(!listaUsuarioCorreos.contains(suc)){
																listaUsuarioCorreos.add(suc);
															}
														}else{
															listaUsuarioCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
															listaUsuarioCorreos.add(suc);
														}	
													}else{
														suc.setEvaluar(false);
														suc.setConfirmar(false);
														suc = scoringService.mergerSolicitudCorreo(suc);
														
														if(listaDescripcionUsuariosCorreos != null){
															if(!listaDescripcionUsuariosCorreos.contains(suc)){
																listaDescripcionUsuariosCorreos.add(suc);
															}
														}else{
															listaDescripcionUsuariosCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
															listaDescripcionUsuariosCorreos.add(suc);
														}
														if(listaUsuarioCorreos != null){
															if(!listaUsuarioCorreos.contains(suc)){
																listaUsuarioCorreos.add(suc);
															}
														}else{
															listaUsuarioCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
															listaUsuarioCorreos.add(suc);
														}	
														
													}
												}
											}
										}else if(paginaIngreso == 21 || paginaIngreso == 22 || paginaIngreso ==23){
											if(validoNegocio == true){
												SolicitudUsuarioCorreo suc =  getObtenerSolicitudUsuarioCorreo(usuarioSegur.getAlias());
												if(suc == null){
													suc = new SolicitudUsuarioCorreo();
													suc.setConfirmar(false);
													suc.setCorreo(usuarioSegur.getCorreo());
													suc.setEvaluar(false);
													suc.setNombre(usuarioSegur.getNombre());
													suc.setUsername(usuarioSegur.getAlias());
													suc = scoringService.persistSolicitudCorreo(suc);
													if(listaDescripcionUsuariosCorreos != null){
														if(!listaDescripcionUsuariosCorreos.contains(suc)){
															listaDescripcionUsuariosCorreos.add(suc);
														}
													}else{
														listaDescripcionUsuariosCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
														listaDescripcionUsuariosCorreos.add(suc);
													}
													if(listaUsuarioCorreos != null){
														if(!listaUsuarioCorreos.contains(suc)){
															listaUsuarioCorreos.add(suc);
														}
													}else{
														listaUsuarioCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
														listaUsuarioCorreos.add(suc);
													}	
												}else{
													if(suc.getEvaluar() == false){
														suc.setConfirmar(false);
														suc = scoringService.persistSolicitudCorreo(suc);
														if(listaDescripcionUsuariosCorreos != null){
															if(!listaDescripcionUsuariosCorreos.contains(suc)){
																listaDescripcionUsuariosCorreos.add(suc);
															}
														}else{
															listaDescripcionUsuariosCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
															listaDescripcionUsuariosCorreos.add(suc);
														}	
														if(listaUsuarioCorreos != null){
															if(!listaUsuarioCorreos.contains(suc)){
																listaUsuarioCorreos.add(suc);
															}
														}else{
															listaUsuarioCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
															listaUsuarioCorreos.add(suc);
														}	
														
													}else{
														suc.setEvaluar(false);
														suc.setConfirmar(false);
														suc = scoringService.mergerSolicitudCorreo(suc);
														
														if(listaDescripcionUsuariosCorreos != null){
															if(!listaDescripcionUsuariosCorreos.contains(suc)){
																listaDescripcionUsuariosCorreos.add(suc);
															}
														}else{
															listaDescripcionUsuariosCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
															listaDescripcionUsuariosCorreos.add(suc);
														}
														if(listaUsuarioCorreos != null){
															if(!listaUsuarioCorreos.contains(suc)){
																listaUsuarioCorreos.add(suc);
															}
														}else{
															listaUsuarioCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
															listaUsuarioCorreos.add(suc);
														}	
														
													}
												}
											}
										}
									}else{/*es para otras solicitudes */
										boolean validoCanalVenta = scoringService.obtenerAsignacionCanalVentaDelUsuario(usuarioSegur.getIdPersonal(), tipoCuenta);
										if(validoCanalVenta){
											SolicitudUsuarioCorreo suc =  getObtenerSolicitudUsuarioCorreo(usuarioSegur.getAlias());
											if(suc == null){
												suc = new SolicitudUsuarioCorreo();
												suc.setConfirmar(false);
												suc.setCorreo(usuarioSegur.getCorreo());
												suc.setEvaluar(false);
												suc.setNombre(usuarioSegur.getNombre());
												suc.setUsername(usuarioSegur.getAlias());
												suc = scoringService.persistSolicitudCorreo(suc);
												if(listaDescripcionUsuariosCorreos != null){
													if(!listaDescripcionUsuariosCorreos.contains(suc)){
														listaDescripcionUsuariosCorreos.add(suc);
													}
												}else{
													listaDescripcionUsuariosCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
													listaDescripcionUsuariosCorreos.add(suc);
												}
												if(listaUsuarioCorreos != null){
													if(!listaUsuarioCorreos.contains(suc)){
														listaUsuarioCorreos.add(suc);
													}
												}else{
													listaUsuarioCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
													listaUsuarioCorreos.add(suc);
												}	
												
											}else{
												if(suc.getEvaluar() == false){
													suc.setConfirmar(false);
													suc = scoringService.persistSolicitudCorreo(suc);
													if(listaDescripcionUsuariosCorreos != null){
														if(!listaDescripcionUsuariosCorreos.contains(suc)){
															listaDescripcionUsuariosCorreos.add(suc);
														}
													}else{
														listaDescripcionUsuariosCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
														listaDescripcionUsuariosCorreos.add(suc);
													}	
													if(listaUsuarioCorreos != null){
														if(!listaUsuarioCorreos.contains(suc)){
															listaUsuarioCorreos.add(suc);
														}
													}else{
														listaUsuarioCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
														listaUsuarioCorreos.add(suc);
													}	
													
												}else{
													suc.setEvaluar(false);
													suc.setConfirmar(false);
													suc = scoringService.mergerSolicitudCorreo(suc);
													
													if(listaDescripcionUsuariosCorreos != null){
														if(!listaDescripcionUsuariosCorreos.contains(suc)){
															listaDescripcionUsuariosCorreos.add(suc);
														}
													}else{
														listaDescripcionUsuariosCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
														listaDescripcionUsuariosCorreos.add(suc);
													}
													if(listaUsuarioCorreos != null){
														if(!listaUsuarioCorreos.contains(suc)){
															listaUsuarioCorreos.add(suc);
														}
													}else{
														listaUsuarioCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
														listaUsuarioCorreos.add(suc);
													}	
													
												}
											}
										}
									}
								  }	
								}
							}
						}
					}					
				}
			}
		  }
		}catch (Exception e) {
			log.error("Error al sacar los correo dependiendo del los datos de las olicitud #0", e.getMessage());
		}
			
		if(listaDescripcionUsuariosCorreos != null && listaDescripcionUsuariosCorreos.size() > 0){
			log.debug("cantidad de registro : #0", listaDescripcionUsuariosCorreos.size());
		}
	}
	
	
	/* agregar usuario correo*/
	public void agregarUsuarioCorreoListaAnalisisDerivacion(){
		try{
			if(this.listaCorreoSeleccionado == null){
				setMensajeExplicativo("Debe seleccionar el o los  Usuarios que quiere agregar a la grillas.");
				FacesMessages.instance().add(Severity.WARN,"Debe seleccionar el o los  Usuarios que quiere agregar a la grillas.");
				return;
			}
			
			if(this.listaCorreoSeleccionado != null && this.listaCorreoSeleccionado.size() > 0){
				for(SolicitudUsuarioCorreo suc: this.listaCorreoSeleccionado){
					SolicitudUsuarioCorreo usuCorreoAux =  buscarUsuarioCorreo(suc.getNombre());
					if(usuCorreoAux != null){
						if(listaCorreoAnaDer.contains(usuCorreoAux)){
							setMensajeExplicativo("existe");
							log.debug("informacion : #0", "El usuario "+ this.usuarioCorreo.getNombre().toLowerCase() + " ya fue agregado a la lista.");
							this.usuarioCorreo = null;
						}else{
							usuCorreoAux.setConfirmar(false);
							listaCorreoAnaDer.add(usuCorreoAux);
							this.usuarioCorreo = null;
							this.mensajeExplicativo = null;
						}
					}					
				}
				
				this.listaCorreoSeleccionado.clear();
			}
			
			
		}catch (Exception e) {
			log.error("Error, ingresar los usuarios a la grilla. #0", e.getMessage());
		}
	}
	public void agregarTodosUsuarioCorreoListaAnalisisDerivacion(){
		try{
			if(this.listaDescripcionUsuariosCorreos == null){
				setMensajeExplicativo("No existe usuario en la lista de disponible.");
				FacesMessages.instance().add(Severity.WARN,"No existe usuario en la lista de disponible.");
				return;
			}
			
			if(this.listaDescripcionUsuariosCorreos != null && this.listaDescripcionUsuariosCorreos.size() > 0){
				for(SolicitudUsuarioCorreo suc: this.listaDescripcionUsuariosCorreos){
					SolicitudUsuarioCorreo usuCorreoAux =  buscarUsuarioCorreo(suc.getNombre());
					if(usuCorreoAux != null){
						if(!listaCorreoAnaDer.contains(usuCorreoAux)){
							listaCorreoAnaDer.add(usuCorreoAux);
						}
					}					
				}
			}			
		}catch (Exception e) {
			log.error("Error, al agregar con todos los usuarios #0", e.getMessage());
		}
	}
	public void eliminarTodosUsuarioCorreoListaAnalisisDerivacion(){
		this.setUsuarioCorreo(null);
		this.listaCorreoAnaDer = new ArrayList<SolicitudUsuarioCorreo>(0);
		this.listaCorreoSeleccionado = new ArrayList<SolicitudUsuarioCorreo>(0);
		obtenerAnalisisAprobacion();
	}	
	public void eliminarCorreoAnalisisDerivacion(SolicitudUsuarioCorreo usuarioCorreoAux){
		if(usuarioCorreoAux != null){
			listaCorreoAnaDer.remove(usuarioCorreoAux);
		}
	}
	public void ingresoDerivarSolicitud(){
		if(this.solicitud != null && this.tipoSolicitudAux != null){
			log.debug("solicitud #0 tipo de solicitud #1", solicitud.getId().getNumSolicitud(), tipoSolicitudAux.getCodTipoSolicitud());
			if(solicitud != null){
				if(solicitud.getEstado().equals("P")){
					this.mensajeGlogal = "La solicitud esta procesada y/o aprobada.";
					return;
				}else if(solicitud.getEstado().equals("I") || 
						solicitud.getEstado().equals("DC") || 
						solicitud.getEstado().equals("DR")){
					this.mensajeGlogal = "La Solicitud no esta en estado de analizar y/o pedir aprobaci√≥n.";
					return;
				}else if(solicitud.getEstado().equals("B") || 
						solicitud.getEstado().equals("SA")){
						if(solicitud.getEstado().equals("B")){
							this.mensajeGlogal = "La Solicitud ya fue esta enviada a analisis.";
						}else if(solicitud.getEstado().equals("SA")){
							this.mensajeGlogal = "La Solicitud ya fue enviada aprobaci√≥n.";
						}
						return;
				}else{
					this.mensajeGlogal = null;
				}
			}

			if(this.listaUsuarioCorreoagregados ==null){
				this.mensajeGlogal = "Debe ingresar los usuarios para el envio de correo.";
				return;
			}else{
				if(this.listaUsuarioCorreoagregados.size() == 0 ){
					this.mensajeGlogal = "Debe ingresar los usuarios para el envio de correo.";
					return ;
				}
			}
			
			this.setUsuarioCorreo(null);
			this.listaCorreoAnaDer = new ArrayList<SolicitudUsuarioCorreo>(0);
			this.listaDescripcionUsuariosCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
			this.listaCorreoSeleccionado = new ArrayList<SolicitudUsuarioCorreo>(0);
			this.habilitaSoloAprobacion = false;
			this.mensajeGlogal = null;
		}else{
			this.mensajeGlogal = "La solicitud no tiene asociada el tipo de solicitud...";
		}

	}
	public void analizarToDerivar(){
		this.mensajeGlogal = null;
		this.habilitaMensajeDerivacion = false;
		int cantidad = 0;
		List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
		List<UsuarioCorreoDTO> listaCorreos = new ArrayList<UsuarioCorreoDTO>(0);
		LcredEstado estadoAux = null;
		try{
			
				if(this.habilitaSoloAprobacion == true){
					if(this.aprobarRechazar == null){
						FacesMessages.instance().add(Severity.ERROR,"Debe seleccionar su opini√≥n (Aprobar / Rechazar).");
						this.habilitaMensajeDerivacion = true;
					}else{
						if("".equals(this.aprobarRechazar)){
							FacesMessages.instance().add(Severity.ERROR,"Debe seleccionar su opini√≥n (Aprobar / Rechazar).");
							this.habilitaMensajeDerivacion = true;					
						}
					}
					
					if(this.mensajeAprobacionSolicitud == null){
						FacesMessages.instance().add(Severity.ERROR,"Debe ingresar una observaci√≥n final de aprobaci√≥n.");
						this.habilitaMensajeDerivacion = true;
					}else{ 
						if("".equals(this.mensajeAprobacionSolicitud)){
							FacesMessages.instance().add(Severity.ERROR,"Debe ingresar una observaci√≥n final de aprobaci√≥n.");
							this.habilitaMensajeDerivacion = true;
						}
					}			
				}
				
				if(usuarioSegur != null && (usuarioSegur.getAlias().toLowerCase()).equals("administrador")){
					
				}else{
					if(this.mensajeAnalisisAprobacion == null){
						FacesMessages.instance().add(Severity.ERROR,"Debe ingresar alguna observaciones para derivar la solicitud.");
						this.habilitaMensajeDerivacion = true;
						return;				
					}else{
						if("".equals(this.mensajeAnalisisAprobacion)){
							FacesMessages.instance().add(Severity.ERROR,"Debe ingresar alguna observaciones para derivar la solicitud.");
							this.habilitaMensajeDerivacion = true;
							return;						
						}
					}			
				}
				
				
				if(this.listaCorreoAnaDer == null){
					FacesMessages.instance().add(Severity.ERROR,"Debe seleccionar por lo menos un usuario.");
					this.habilitaMensajeDerivacion = true;
					return;				
				}else{
					
					if(analisisAprobacion!=null && analisisAprobacion.equals("Aprueba")){
						 cantidad = 0;
						if(this.listaCorreoAnaDer.size() == 0){
							FacesMessages.instance().add(Severity.ERROR,"Debe seleccionar por lo menos un usuario.");
							this.habilitaMensajeDerivacion = true;	
							return;						
						}
						
						for(SolicitudUsuarioCorreo suc :  this.listaCorreoAnaDer){
							if(suc.getConfirmar() != null && suc.getConfirmar().booleanValue() == true){
								cantidad ++;
							}
						}
						if(cantidad == 0){
							FacesMessages.instance().add(Severity.ERROR,"Debe seleccionar por lo menos un usuario obligatorio.");
							this.habilitaMensajeDerivacion = true;	
							return;						
						}
					}else if(analisisAprobacion!=null && analisisAprobacion.equals("Analisis")){
						cantidad = 0;
						if(this.listaCorreoAnaDer.size() > 1){
							FacesMessages.instance().add(Severity.ERROR,"Para analisis debe solo seleccionar un usuario.");
							this.habilitaMensajeDerivacion = true;	
							return;						
						}
						for(SolicitudUsuarioCorreo suc :  this.listaCorreoAnaDer){
							if(suc.getConfirmar() != null && suc.getConfirmar().booleanValue() == true){
								cantidad ++;
							}
						}
						if(cantidad == 0){
							FacesMessages.instance().add(Severity.ERROR,"Debe seleccionar como obligatorio el usuario elejido.");
							this.habilitaMensajeDerivacion = true;	
							return;						
						}					
					}else{
						FacesMessages.instance().add(Severity.ERROR,"Se produjo un error de datos, favor refrecar los datos.");
						this.habilitaMensajeDerivacion = true;	
						return;							
					}
				}
				
			if(this.paginaIngreso == 11 || this.paginaIngreso == 12){
				
				if(solicitud != null && venta != null){
					if(analisisAprobacion!=null && analisisAprobacion.equals("Analisis")){
						solicitud.setEstado("B");
						solicitud.setEstadoEvaluacion("B");
						solicitud.setDevolver(false);
						venta.setStatusSolicitud(solicitud.getEstado());
						if(cantidad == 1){
							SolicitudUsuarioCorreo ucoreo = this.listaCorreoAnaDer.get(0);
							solicitud.setUsuarioActual(ucoreo.getUsername());
						}else{
							solicitud.setUsuarioActual("VARIOS");
						}
						/*se agrega la observaciones final de una aprobacion final */
						LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
						Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							id.setCorrelativo(correlativo);
							id.setFecha(new Date());
							id.setHora(new Date());
							id.setNumSolicitud(solicitud.getId().getNumSolicitud());
							id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							id.setObservacion(this.mensajeAnalisisAprobacion);
							id.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(id);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}
						estadoAux = scoringService.obtenerEstado("B");							
					}else {
						solicitud.setEstado("SA");
						solicitud.setEstadoEvaluacion("SA");
						solicitud.setDevolver(false);
						venta.setStatusSolicitud(solicitud.getEstado());
						if(cantidad == 1){
							SolicitudUsuarioCorreo ucoreo = this.listaCorreoAnaDer.get(0);
							solicitud.setUsuarioActual(ucoreo.getUsername());
						}else{
							solicitud.setUsuarioActual("VARIOS");
						}
						
						/*se agrega la observaciones final de una aprobacion final */
						StringBuffer primeraCadena = new StringBuffer();
						LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
						Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							id.setCorrelativo(correlativo);
							id.setFecha(new Date());
							id.setHora(new Date());
							id.setNumSolicitud(solicitud.getId().getNumSolicitud());
							id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							primeraCadena.append("opini√≥n: \n ");
							primeraCadena.append(this.aprobarRechazar);
							id.setObservacion(primeraCadena.toString());
							id.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(id);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}	
						
						/*se agrega la observaciones final de una aprobacion final */
						StringBuffer tereceraCadena = new StringBuffer();
						LcredSolicitudObservacionesId idTercera = new LcredSolicitudObservacionesId();
						Long correlativoTercera = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							idTercera.setCorrelativo(correlativoTercera);
							idTercera.setFecha(new Date());
							idTercera.setHora(new Date());
							idTercera.setNumSolicitud(solicitud.getId().getNumSolicitud());
							idTercera.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							tereceraCadena.append("Motivo Usuario: \n");
							tereceraCadena.append(this.mensajeAprobacionSolicitud);
							idTercera.setObservacion(tereceraCadena.toString());
							idTercera.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(idTercera);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}							
						
						
						
						/*se agrega la observaciones final de una aprobacion final */
						StringBuffer segundaCadena = new StringBuffer();
						LcredSolicitudObservacionesId idAux = new LcredSolicitudObservacionesId();
						Long correlativo1 = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo1 != null){
							idAux.setCorrelativo(correlativo1);
							idAux.setFecha(new Date());
							idAux.setHora(new Date());
							idAux.setNumSolicitud(solicitud.getId().getNumSolicitud());
							idAux.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							segundaCadena.append("Observaci√≥n:\n ");
							segundaCadena.append(this.mensajeAnalisisAprobacion);
							idAux.setObservacion(segundaCadena.toString());
							idAux.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(idAux);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}	
						
						// Rechazar aprobarRechazar
						if(this.aprobarRechazar.equals("Aprobar")){
							LcredEstado estAux = scoringService.obtenerEstado("AE");
							insertHitos(solicitud, estAux, "NADA", 0);

							Long numero = scoringService.getSolicitudUsuarioDerivacionMaximo();
							SolicitudUsuarioDerivada sud = new SolicitudUsuarioDerivada();
							sud.setSystemId(numero);
							sud.setIdSolicitud(solicitud.getId().getNumSolicitud());
							sud.setEstado(estAux);
							sud.setFechaHora(new Date());
							sud.setUsuario(usuarioLogueado);
							sud.setConfirmacionObligatoria(true);
							sud.setConfirmacion(true);
							sud.setCodEstadoDerivada("AE");
							sud.setUsernameAutorizacion(usuarioLogueado.getAlias());
							boolean exitoingreso = scoringService.persitSolicitudUsuarioDerivacion(sud);
							log.debug(exitoingreso);
							
						}else{
							LcredEstado estAux = scoringService.obtenerEstado("RE");
							insertHitos(solicitud, estAux, "NADA", 0);	
							
							Long numero = scoringService.getSolicitudUsuarioDerivacionMaximo();
							SolicitudUsuarioDerivada sud = new SolicitudUsuarioDerivada();
							sud.setSystemId(numero);
							sud.setIdSolicitud(solicitud.getId().getNumSolicitud());
							sud.setEstado(estAux);
							sud.setFechaHora(new Date());
							sud.setUsuario(usuarioLogueado);
							sud.setConfirmacionObligatoria(true);
							sud.setConfirmacion(true);
							sud.setCodEstadoDerivada("RE");
							sud.setUsernameAutorizacion(usuarioLogueado.getAlias());
							boolean exitoingreso = scoringService.persitSolicitudUsuarioDerivacion(sud);
							log.debug(exitoingreso);
						}
						
						estadoAux = scoringService.obtenerEstado("SA");
					}
					
					try{
						 /* proceso de derivacion antes de actualizar */
						if(listaCorreoAnaDer != null && listaCorreoAnaDer.size() > 0){
							UsuarioCorreoDTO usuarioCorreoDTO = null;
							for( SolicitudUsuarioCorreo usuarioCorreo: listaCorreoAnaDer){
								usuarioCorreoDTO = new UsuarioCorreoDTO();
								usuarioCorreoDTO.setAlias(usuarioCorreo.getUsername());
								usuarioCorreoDTO.setNombreUsuario(usuarioCorreo.getNombre());
								usuarioCorreoDTO.setCorreoElectronico(usuarioCorreo.getCorreo());//usuarioCorreo.getCorreo()								
								listaCorreos.add(usuarioCorreoDTO);
								usuarioCorreoDTO = null;
								
								if(!usuarioCorreo.getUsername().equals("Especial")){
									/*ingreso de inngreso de correo a derivacion y aprobacion*/
									Usuariosegur user = scoringService.getUsuarioUsuarioSegurForUsername(usuarioCorreo.getUsername(), usuarioCorreo.getCorreo());	
									if(user != null){
										SolicitudUsuarioDerivada sud = null;// scoringService.getSolicitudUsuarioDerivacionForSolicitudIpPersonal(solicitud.getId().getNumSolicitud(), user.getIdPersonal());
										if(sud == null){
											Long numero = scoringService.getSolicitudUsuarioDerivacionMaximo();
											sud = new SolicitudUsuarioDerivada();
											sud.setSystemId(numero);
											sud.setIdSolicitud(solicitud.getId().getNumSolicitud());
											sud.setEstado(estadoAux);
											sud.setFechaHora(new Date());
											sud.setUsuario(user);
											sud.setConfirmacionObligatoria(usuarioCorreo.getConfirmar());
											sud.setConfirmacion(null);
											sud.setCodEstadoDerivada(estadoAux.getCodEstado());
											log.debug("antes de deriva al usuario #0", usuarioCorreo.getNombre());
											boolean exitoingreso = scoringService.persitSolicitudUsuarioDerivacion(sud);
											log.debug("despues de deriva al usuario #0", usuarioCorreo.getNombre());
											log.debug(exitoingreso);
											sud = null;
										}
									}
								}	
							}							
							
							
							if(listaCorreos != null){
								for(UsuarioCorreoDTO ucdto : listaCorreos){
									if(ucdto != null && ucdto.getAlias() != null && ucdto.getCorreoElectronico() != null && !((ucdto.getAlias().trim()).toLowerCase()).equals(solicitud.getCodEmisor().trim().toLowerCase())){
										if(!ucdto.getAlias().equals("Especial")){
											log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getAlias().trim(), ucdto.getCorreoElectronico().trim());
											Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getAlias().trim(), ucdto.getCorreoElectronico().trim());
											if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
												if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
													ultimaListaCorreoPrueba.add(usuarioAux);	
													usuarioAux = new Usuariosegur();
												}												
											}
										}else{
											Usuariosegur especial = new Usuariosegur();
											especial.setNombre(ucdto.getNombreUsuario());
											especial.setCorreo(ucdto.getCorreoElectronico());
											ultimaListaCorreoPrueba.add(especial);
											especial = null;
										}
									}
								}
							}							
						}
						
						/*eliminar esto, cuando se establaque la solucion*/
						Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
						if(emisorCorreo != null){
							ultimaListaCorreoPrueba.add(emisorCorreo);
							emisorCorreo = null;
						}
						Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
						if(correoAdministrador != null){
							ultimaListaCorreoPrueba.add(correoAdministrador);
							correoAdministrador = null;
						}	
						
					}catch (Exception e) {
						log.error("Error, al hacer el proceso de derivacion #0", e.getMessage());
						FacesMessages.instance().add(Severity.ERROR,"Se√±or usuario vuelva a consultar la solicitud ");
						this.habilitaMensajeDerivacion = true;	
						return;							
					}
					
				
					boolean exito = scoringService.mergerSolicitud(solicitud);
					boolean exitoVenta = scoringService.mergerSolicitudVentaPuntual(venta);
					entityManager.refresh(solicitud);
					entityManager.refresh(venta);
					if(exito == true && exitoVenta == true){
						if(analisisAprobacion!=null && analisisAprobacion.equals("Analisis")){
							this.mensajeGlogal = "Se ha derivado a analisis la solicitud N¬∞ "+ solicitud.getId().getNumSolicitud();
						}else{
							this.mensajeGlogal = "Se ha derivado a aprobaci√≥n la solicitud N¬∞ "+ solicitud.getId().getNumSolicitud();
						}
						List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
						if(listaFileUploadedDTOs != null && listaFileUploadedDTOs.size() != 0){
							for(FileUploadedDTO archivo :listaFileUploadedDTOs){
							   try {							
									OutputStream ostream = null;
									String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
									nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);
									String url = "archivosRespuesta"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;

									InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
									
									//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
									ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
									log.debug("url #0",archivo.getUploadItem().getContentType());
									IOUtils.copyStream(ostream, istream);
									ostream.flush();
									ostream.close();
									istream.close();
									//guardar datos en la BD
									ArchivoAdjunto archivoAux = new ArchivoAdjunto();
									archivoAux.setSolicitud(solicitud);
									archivoAux.setUrl(url);
									archivoAux.setUbicacion("");
									archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
									archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
									archivoAux.setUsuario(usuarioLogueado);	
									archivoAux.setFechaCreacion(new Date());
									entityManager.persist(archivoAux);
									entityManager.flush();
									ConceptoDTO objetoAux = new ConceptoDTO();
									objetoAux.setNombreArchivo(nombreArchivo);
									objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
									listaArchivoGuardadoResp.add(objetoAux);
									objetoAux = null;
									
								} catch (FileNotFoundException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}
								catch (IOException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}catch (Exception e) {
									e.printStackTrace();
								}							
							}	
						}
						
						List<ConceptoDTO> lista = scoringService.getConceptoMonto(solicitud.getId().getNumSolicitud());
						List<ConceptoDTO> listaProducto = scoringService.getProductos(solicitud.getId().getNumSolicitud());
						List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
						
						if(listaCorreoAnaDer != null){
							Locale locale = new Locale("es","CL");
							/*setando los varlores del dto para el correo*/
							ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
							contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
							if(this.aprobarRechazar != null &&  this.mensajeAprobacionSolicitud != null){
								contenidoEmail.setObservacionEjecutivo("opini√≥n:  \n"+this.aprobarRechazar +" Observaci√≥n: \n"+this.mensajeAprobacionSolicitud);
							}
							if(analisisAprobacion!=null && analisisAprobacion.equals("Analisis")){
								contenidoEmail.setColor("AZUL");
								contenidoEmail.setTituloRespuesta("Derivada a an√°lisis solicitud ");
								contenidoEmail.setAccion("Se ha derivado a analisis la solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
								contenidoEmail.setAccionRespuesta("");
							}else{
								contenidoEmail.setColor("AZUL");
								contenidoEmail.setTituloRespuesta("Derivada a aprobaci√≥n solicitud ");
								contenidoEmail.setAccion("Se ha derivado a aprobaci√≥n la solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
								contenidoEmail.setAccionRespuesta("");
							}
							
							contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
							if(this.aprobarRechazar.equals("Aprobar")){
								contenidoEmail.setDesicionEjecutivo("Aprobada");
							}else{
								contenidoEmail.setDesicionEjecutivo("Rechazada");
							}
							contenidoEmail.setObservacionRespuesta(this.mensajeAnalisisAprobacion);
							contenidoEmail.setObservacionEjecutivo(this.mensajeAprobacionSolicitud);
							contenidoEmail.setOpcionFinal(1);
							contenidoEmail.setSolicitud(solicitud);
							NumberFormat numberFormatter;
							StringBuffer rutNombre = new StringBuffer();
							rutNombre.append(cliente.getRut());
							rutNombre.append(" / ");
							rutNombre.append(modificarTexto(cliente.getRazonSocial()));
							contenidoEmail.setRutNombre(rutNombre.toString());
							contenidoEmail.setSoloNombre(cliente.getRazonSocial());
							contenidoEmail.setCanalVenta(cliente.getCanalVenta());
							contenidoEmail.setSucursal(sucursal.getDescripcion());
							
							UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
							if(ususarioEmisor != null){
								contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
							}else{
								contenidoEmail.setEmisor(solicitud.getCodEmisor());
							}
							
							contenidoEmail.setTipoSolicitud("Venta Puntual");
							contenidoEmail.setTipoVentas(modificarTexto(tipoSolicitudAux.getDesTipoSolicitud()));
							
							numberFormatter = NumberFormat.getNumberInstance(locale);
							log.debug(numberFormatter.format(venta.getMontoInicial()));
							
							contenidoEmail.setMontoMasIva(numberFormatter.format(venta.getMontoInicial()));
							contenidoEmail.setMontoPie(numberFormatter.format(venta.getMontoPieInicial()));
							contenidoEmail.setMargenNegocio(String.valueOf(numberFormatter.format(this.margenGlogal)));
							contenidoEmail.setFormaPago(this.formaPago);
							contenidoEmail.setMotivoCompra(this.motivoCompra);
							contenidoEmail.setMontoMasIvaAprobado(numberFormatter.format(this.montoNuevo));
							contenidoEmail.setMontoPieAprobado(numberFormatter.format(this.pieNuevo));	
							

							if("VIG".equals(cliente.getVigenciaSeguro().trim())){
								contenidoEmail.setLineaSeguro(numberFormatter.format(cliente.getMontoSeguro()));
							}else{
								contenidoEmail.setLineaSeguro(numberFormatter.format(0));
							}								
							contenidoEmail.setCoberturaSeguro(numberFormatter.format(expoRiesgoKh.getMontoAsegurado()));
							contenidoEmail.setPeakCredito(numberFormatter.format(expoRiesgoKh.getPeakCredito()));
							contenidoEmail.setRisgoKupfer(numberFormatter.format(expoRiesgoKh.getMontoRiesgoKupfer()));
							contenidoEmail.setListaProductos(listaProducto);
							contenidoEmail.setListaConceptoMontos(lista);
							contenidoEmail.setListaArchivos(listaArchivoGuardado);
							contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
							contenidoEmail.setListaObservaciones(listaObservaciones);
							contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);
							try{
								if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
									emailAlerta.enviarRespuestaSolicitudVenta(contenidoEmail);	
								}	
							}catch (Exception e) {
								log.debug("paso por el error #0"+ e.getMessage());
							}
						}						
						
						LcredEstado estado = null;
						if(analisisAprobacion!=null && analisisAprobacion.equals("Analisis")){
							 estado = ObtenerEstadoSolictud("B");
								insertHitos(solicitud, estado, "RESPUESTA", cantidad);
								entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
								             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
								entityManager.flush();
								insertarLogs(solicitud, 13);
						}else{
							estado = ObtenerEstadoSolictud("SA");
							insertHitos(solicitud, estado, "RESPUESTA", cantidad);
							entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
							             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
							entityManager.flush();	
							insertarLogs(solicitud, 14);
						}
					
				}	
			}
			
		   }else if(this.paginaIngreso == 21 || this.paginaIngreso == 22 || this.paginaIngreso == 23 ){
				if(solicitud != null && credito != null){
					if(analisisAprobacion!=null && analisisAprobacion.equals("Analisis")){
						solicitud.setEstado("B");
						solicitud.setEstadoEvaluacion("B");
						solicitud.setDevolver(false);
						credito.setStatusSolicitud(solicitud.getEstado());
						if(cantidad == 1){
							SolicitudUsuarioCorreo ucoreo = this.listaCorreoAnaDer.get(0);
							solicitud.setUsuarioActual(ucoreo.getUsername());
						}else{
							solicitud.setUsuarioActual("VARIOS");
						}
						/*se agrega la observaciones final de una aprobacion final */
						LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
						Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							id.setCorrelativo(correlativo);
							id.setFecha(new Date());
							id.setHora(new Date());
							id.setNumSolicitud(solicitud.getId().getNumSolicitud());
							id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							id.setObservacion(this.mensajeAnalisisAprobacion);
							id.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(id);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}
						estadoAux = scoringService.obtenerEstado("B");
						
					}else {
						solicitud.setEstado("SA");
						solicitud.setEstadoEvaluacion("SA");
						solicitud.setDevolver(false);
						credito.setStatusSolicitud(solicitud.getEstado());
						if(cantidad == 1){
							SolicitudUsuarioCorreo ucoreo = this.listaCorreoAnaDer.get(0);
							solicitud.setUsuarioActual(ucoreo.getUsername());
						}else{
							solicitud.setUsuarioActual("VARIOS");
						}
						/*se agrega la observaciones final de una aprobacion final */
						StringBuffer primeraCadena = new StringBuffer();
						LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
						Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							id.setCorrelativo(correlativo);
							id.setFecha(new Date());
							id.setHora(new Date());
							id.setNumSolicitud(solicitud.getId().getNumSolicitud());
							id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							primeraCadena.append("opini√≥n: \n ");
							primeraCadena.append(this.aprobarRechazar);
							id.setObservacion(primeraCadena.toString());
							id.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(id);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}	
						
						/*se agrega la observaciones final de una aprobacion final */
						StringBuffer tereceraCadena = new StringBuffer();
						LcredSolicitudObservacionesId idTercera = new LcredSolicitudObservacionesId();
						Long correlativoTercera = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							idTercera.setCorrelativo(correlativoTercera);
							idTercera.setFecha(new Date());
							idTercera.setHora(new Date());
							idTercera.setNumSolicitud(solicitud.getId().getNumSolicitud());
							idTercera.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							tereceraCadena.append("Motivo Usuario: \n");
							tereceraCadena.append(this.mensajeAprobacionSolicitud);
							idTercera.setObservacion(tereceraCadena.toString());
							idTercera.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(idTercera);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}	
						
						/*se agrega la observaciones final de una aprobacion final */
						StringBuffer segundaCadena = new StringBuffer();
						LcredSolicitudObservacionesId idAux = new LcredSolicitudObservacionesId();
						Long correlativo1 = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo1 != null){
							idAux.setCorrelativo(correlativo1);
							idAux.setFecha(new Date());
							idAux.setHora(new Date());
							idAux.setNumSolicitud(solicitud.getId().getNumSolicitud());
							idAux.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							segundaCadena.append("Observaci√≥n:\n ");
							segundaCadena.append(this.mensajeAnalisisAprobacion);
							idAux.setObservacion(segundaCadena.toString());
							idAux.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(idAux);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}	
						
						// Rechazar aprobarRechazar
						if(this.aprobarRechazar.equals("Aprobar")){
							LcredEstado estAux = scoringService.obtenerEstado("AE");
							insertHitos(solicitud, estAux, "NADA", 0);

							Long numero = scoringService.getSolicitudUsuarioDerivacionMaximo();
							SolicitudUsuarioDerivada sud = new SolicitudUsuarioDerivada();
							sud.setSystemId(numero);
							sud.setIdSolicitud(solicitud.getId().getNumSolicitud());
							sud.setEstado(estAux);
							sud.setFechaHora(new Date());
							sud.setUsuario(usuarioLogueado);
							sud.setConfirmacionObligatoria(true);
							sud.setConfirmacion(true);
							sud.setCodEstadoDerivada(null);
							sud.setUsernameAutorizacion(usuarioLogueado.getAlias());
							boolean exitoingreso = scoringService.persitSolicitudUsuarioDerivacion(sud);
							log.debug(exitoingreso);
							
						}else{
							LcredEstado estAux = scoringService.obtenerEstado("RE");
							insertHitos(solicitud, estAux, "NADA", 0);	
							
							Long numero = scoringService.getSolicitudUsuarioDerivacionMaximo();
							SolicitudUsuarioDerivada sud = new SolicitudUsuarioDerivada();
							sud.setSystemId(numero);
							sud.setIdSolicitud(solicitud.getId().getNumSolicitud());
							sud.setEstado(estAux);
							sud.setFechaHora(new Date());
							sud.setUsuario(usuarioLogueado);
							sud.setConfirmacionObligatoria(true);
							sud.setConfirmacion(true);
							sud.setCodEstadoDerivada(null);
							sud.setUsernameAutorizacion(usuarioLogueado.getAlias());
							boolean exitoingreso = scoringService.persitSolicitudUsuarioDerivacion(sud);
							log.debug(exitoingreso);
						}
						
						estadoAux = scoringService.obtenerEstado("SA");
					}
					
					try{
						 /* proceso de derivacion antes de actualizar */
						if(listaCorreoAnaDer != null && listaCorreoAnaDer.size() > 0){
							UsuarioCorreoDTO usuarioCorreoDTO = null;
							for( SolicitudUsuarioCorreo usuarioCorreo: listaCorreoAnaDer){
								usuarioCorreoDTO = new UsuarioCorreoDTO();
								usuarioCorreoDTO.setAlias(usuarioCorreo.getUsername());
								usuarioCorreoDTO.setNombreUsuario(usuarioCorreo.getNombre());
								usuarioCorreoDTO.setCorreoElectronico(usuarioCorreo.getCorreo());//usuarioCorreo.getCorreo()								
								listaCorreos.add(usuarioCorreoDTO);
								usuarioCorreoDTO = null;
								
								if(!usuarioCorreo.getUsername().equals("Especial")){
									/*ingreso de inngreso de correo a derivacion y aprobacion*/
									Usuariosegur user = scoringService.getUsuarioUsuarioSegurForUsername(usuarioCorreo.getUsername(), usuarioCorreo.getCorreo());	
									if(user != null){
										SolicitudUsuarioDerivada sud = null;// scoringService.getSolicitudUsuarioDerivacionForSolicitudIpPersonal(solicitud.getId().getNumSolicitud(), user.getIdPersonal());
										if(sud == null){
											Long numero = scoringService.getSolicitudUsuarioDerivacionMaximo();
											sud = new SolicitudUsuarioDerivada();
											sud.setSystemId(numero);
											sud.setIdSolicitud(solicitud.getId().getNumSolicitud());
											sud.setEstado(estadoAux);
											sud.setFechaHora(new Date());
											sud.setUsuario(user);
											sud.setConfirmacionObligatoria(usuarioCorreo.getConfirmar());
											sud.setConfirmacion(null);
											sud.setCodEstadoDerivada(estadoAux.getCodEstado());
											log.debug("antes de deriva al usuario #0", usuarioCorreo.getNombre());
											boolean exitoingreso = scoringService.persitSolicitudUsuarioDerivacion(sud);
											log.debug("despues de deriva al usuario #0", usuarioCorreo.getNombre());
											log.debug(exitoingreso);
											sud = null;
										}
									}
								}	
							}							
							
							
							if(listaCorreos != null){
								for(UsuarioCorreoDTO ucdto : listaCorreos){
									if(ucdto != null && ucdto.getAlias() != null && ucdto.getCorreoElectronico() != null && !((ucdto.getAlias().trim()).toLowerCase()).equals(solicitud.getCodEmisor().trim().toLowerCase())){
										if(!ucdto.getAlias().equals("Especial")){
											log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getAlias().trim(), ucdto.getCorreoElectronico().trim());
											Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getAlias().trim(), ucdto.getCorreoElectronico().trim());
											if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
												if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
													ultimaListaCorreoPrueba.add(usuarioAux);	
													usuarioAux = new Usuariosegur();
												}												
											}
										}else{
											Usuariosegur especial = new Usuariosegur();
											especial.setNombre(ucdto.getNombreUsuario());
											especial.setCorreo(ucdto.getCorreoElectronico());
											ultimaListaCorreoPrueba.add(especial);
											especial = null;
										}
									}
								}
							}							
						}
						
						/*eliminar esto, cuando se establaque la solucion*/
						Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
						if(emisorCorreo != null){
							ultimaListaCorreoPrueba.add(emisorCorreo);
							emisorCorreo = null;
						}
						Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
						if(correoAdministrador != null){
							ultimaListaCorreoPrueba.add(correoAdministrador);
							correoAdministrador = null;
						}	
						
					}catch (Exception e) {
						log.error("Error, al hacer el proceso de derivacion #0", e.getMessage());
						FacesMessages.instance().add(Severity.ERROR,"Se√±or usuario vuelva a consultar la solicitud ");
						this.habilitaMensajeDerivacion = true;	
						return;							
					}					
					
					boolean exito = scoringService.mergerSolicitud(solicitud);
					boolean exitoVenta = scoringService.mergerSolicitudLineaCredito(credito);
					entityManager.refresh(solicitud);
					entityManager.refresh(credito);
					if(exito == true && exitoVenta == true){
						if(analisisAprobacion!=null && analisisAprobacion.equals("Analisis")){
							this.mensajeGlogal = "Se ha derivado a analisis la solicitud N¬∞ "+ solicitud.getId().getNumSolicitud();
						}else{
							this.mensajeGlogal = "Se ha derivado a aprobaci√≥n la solicitud N¬∞ "+ solicitud.getId().getNumSolicitud();
						}
						List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
						if(listaFileUploadedDTOs != null && listaFileUploadedDTOs.size() != 0){
							for(FileUploadedDTO archivo :listaFileUploadedDTOs){
							   try {							
									OutputStream ostream = null;
									String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
									nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);
									
									String url = "archivosRespuesta"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
									
									//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
									ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
									log.debug("url #0",archivo.getUploadItem().getContentType());
									IOUtils.copyStream(ostream, istream);
									ostream.flush();
									ostream.close();
									istream.close();
									//guardar datos en la BD
									ArchivoAdjunto archivoAux = new ArchivoAdjunto();
									archivoAux.setSolicitud(solicitud);
									archivoAux.setUrl(url);
									archivoAux.setUbicacion("");
									archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
									archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
									archivoAux.setUsuario(usuarioLogueado);	
									archivoAux.setFechaCreacion(new Date());
									entityManager.persist(archivoAux);
									entityManager.flush();
									ConceptoDTO objetoAux = new ConceptoDTO();
									objetoAux.setNombreArchivo(nombreArchivo);
									objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
									listaArchivoGuardadoResp.add(objetoAux);
									objetoAux = null;
									
								} catch (FileNotFoundException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}
								catch (IOException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}catch (Exception e) {
									e.printStackTrace();
								}							
							}	
						}
						List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
						if(listaCorreoAnaDer != null){
							Locale locale = new Locale("es","CL");
							NumberFormat numberFormatter;
							numberFormatter = NumberFormat.getNumberInstance(locale);							
							
							/* sacar los datos concecptos involucrados*/
							List<SolicitudConceptosNegocioLC> listaConceptoInvolucarado = scoringService
									.getListarSolicitudConceptosNegocioLC(solicitud.getId().getNumSolicitud());	
							
							/*crear lista de concepto de involucrados*/
							List<ConceptoDTO> conceptosInvolucrado = new ArrayList<ConceptoDTO>(0);
							if(listaConceptoInvolucarado != null){
								for(SolicitudConceptosNegocioLC scn : listaConceptoInvolucarado){
									ConceptoDTO ci = new ConceptoDTO();
									ci.setDescripcion(scn.getConceptosNegocio().getDescripcion());
									ci.setMontoFormateado(numberFormatter.format(scn.getMonto()));
									conceptosInvolucrado.add(ci);
									ci=null;
								}
							}
							
							
							/*setando los varlores del dto para el correo*/
							ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
							contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
							if(this.aprobarRechazar != null &&  this.mensajeAprobacionSolicitud != null){
								contenidoEmail.setObservacionEjecutivo("opini√≥n:"+this.aprobarRechazar +" Observaci√≥n:"+this.mensajeAprobacionSolicitud);
							}
							if(analisisAprobacion!=null && analisisAprobacion.equals("Analisis")){
								contenidoEmail.setColor("AZUL");
								contenidoEmail.setTituloRespuesta("Derivada a an√°lisis solicitud ");
								contenidoEmail.setAccion("Se ha derivado a analisis la solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
								contenidoEmail.setAccionRespuesta("");
							}else{
								contenidoEmail.setColor("AZUL");
								contenidoEmail.setTituloRespuesta("Derivada a aprobaci√≥n solicitud ");
								contenidoEmail.setAccion("Se ha derivado a aprobaci√≥n la solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
								contenidoEmail.setAccionRespuesta("");
							}
							
							contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
							if(this.aprobarRechazar.equals("Aprobar")){
								contenidoEmail.setDesicionEjecutivo("Aprobada");
							}else{
								contenidoEmail.setDesicionEjecutivo("Rechazada");
							}
							contenidoEmail.setObservacionRespuesta(this.mensajeAnalisisAprobacion);
							contenidoEmail.setObservacionEjecutivo(this.mensajeAprobacionSolicitud);
							contenidoEmail.setOpcionFinal(1);							
							contenidoEmail.setSolicitud(solicitud);
							
							
							/*setando los varlores del dto para el correo*/
							StringBuffer rutNombre = new StringBuffer();
							rutNombre.append(cliente.getRut());
							rutNombre.append(" / ");
							rutNombre.append(modificarTexto(cliente.getRazonSocial()));
							contenidoEmail.setRutNombre(rutNombre.toString());
							contenidoEmail.setSoloNombre(solicitud.getNomCliente());
							contenidoEmail.setCanalVenta(modificarTexto(solicitud.getCanal()));

							Sucursal suc = obtenerObjetoSucursal(solicitud.getCodSucursal());
							if(suc != null){
								contenidoEmail.setSucursal(suc.getDescripcion());
							}else{
								contenidoEmail.setSucursal(solicitud.getCodSucursal());
							}
							
							UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
							if(ususarioEmisor != null){
								contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
							}else{
								contenidoEmail.setEmisor(modificarTexto(solicitud.getCodEmisor()));
							}
							contenidoEmail.setTipoSolicitud("Linea de Cr√©dito.");
							contenidoEmail.setTipoLineaCredito(tipoSolicitudAux.getDesTipoSolicitud());

							if("VIG".equals(solicitud.getVigSeguro().trim())){
								contenidoEmail.setLineaSeguroActual(numberFormatter.format(expoRiesgoKh.getMontoAsegurado()));
							}else{
								contenidoEmail.setLineaSeguroActual(numberFormatter.format(0));
							}
							
							if(this.modificarCredito){
								log.debug(numberFormatter.format(this.montoLineaCreditoNuevo));
								contenidoEmail.setMontoSolicitado(numberFormatter.format(this.montoLineaCreditoNuevo));
								contenidoEmail.setCondicionRiesgo(this.clsRiesgoNuevo);
								contenidoEmail.setCondicionPago(this.cPagoNuevo);
								
							}else{
								contenidoEmail.setMontoSolicitado(numberFormatter.format(this.montoCredito));
								contenidoEmail.setCondicionRiesgo(this.clsRiesgo);
								contenidoEmail.setCondicionPago(this.cPago);
							}
							
							contenidoEmail.setProyecto(credito.getDpDescripcionProyecto());
							contenidoEmail.setMontoProyecto(credito.getDpMonto());
							contenidoEmail.setPlazoEjecucion(modificarTexto(credito.getDpPlazoEjecucion()));
							contenidoEmail.setPotencialCompra(credito.getDpPotencialCompra());
							
							
							List<String> listaSocios = new ArrayList<String>(0);
							if(credito.getDpSocios() != null){
								String[] array = credito.getDpSocios().split(",");
								if(array != null){
									for(String s : array){
										listaSocios.add(s);
									}
								}
							}
							
						    /*datos de lineas credito solCredito */
							contenidoEmail.setListaSocios(listaSocios);
							contenidoEmail.setListaConceptoMontos(conceptosInvolucrado);
							contenidoEmail.setListaArchivos(listaArchivoGuardado);
							contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
							contenidoEmail.setListaObservaciones(listaObservaciones);
						
							contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);
							try{
								if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
									emailAlerta.enviarRespuestaSolicitudLinea(contenidoEmail);	
								}	
							}catch (Exception e) {
								log.debug("paso por el error #0"+ e.getMessage());
							}	
						}	
						
						LcredEstado estado = null;
						if(analisisAprobacion!=null && analisisAprobacion.equals("Analisis")){
							 estado = ObtenerEstadoSolictud("B");
								insertHitos(solicitud, estado, "RESPUESTA", cantidad);
								entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
								             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
								entityManager.flush();
								insertarLogs(solicitud, 13);
						}else{
							estado = ObtenerEstadoSolictud("SA");
							insertHitos(solicitud, estado, "RESPUESTA", cantidad);
							entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
							             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
							entityManager.flush();	
							insertarLogs(solicitud, 14);
						}
					
				}	
			}
			
		   }else if(this.paginaIngreso == 31){
				
				if(solicitud != null && condicion != null){
					if(analisisAprobacion!=null && analisisAprobacion.equals("Analisis")){
						solicitud.setEstado("B");
						solicitud.setEstadoEvaluacion("B");
						solicitud.setDevolver(false);
						condicion.setStatusSolicitud(solicitud.getEstado());
						if(cantidad == 1){
							SolicitudUsuarioCorreo ucoreo = this.listaCorreoAnaDer.get(0);
							solicitud.setUsuarioActual(ucoreo.getUsername());
						}else{
							solicitud.setUsuarioActual("VARIOS");
						}
						/*se agrega la observaciones final de una aprobacion final */
						LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
						Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							id.setCorrelativo(correlativo);
							id.setFecha(new Date());
							id.setHora(new Date());
							id.setNumSolicitud(solicitud.getId().getNumSolicitud());
							id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							id.setObservacion(this.mensajeAnalisisAprobacion);
							id.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(id);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}
						estadoAux = scoringService.obtenerEstado("B");
					}else {
						solicitud.setEstado("SA");
						solicitud.setEstadoEvaluacion("SA");
						solicitud.setDevolver(false);
						condicion.setStatusSolicitud(solicitud.getEstado());
						if(cantidad == 1){
							SolicitudUsuarioCorreo ucoreo = this.listaCorreoAnaDer.get(0);
							solicitud.setUsuarioActual(ucoreo.getUsername());
						}else{
							solicitud.setUsuarioActual("VARIOS");
						}
						/*se agrega la observaciones final de una aprobacion final */
						StringBuffer primeraCadena = new StringBuffer();
						LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
						Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							id.setCorrelativo(correlativo);
							id.setFecha(new Date());
							id.setHora(new Date());
							id.setNumSolicitud(solicitud.getId().getNumSolicitud());
							id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							primeraCadena.append("opini√≥n: \n ");
							primeraCadena.append(this.aprobarRechazar);
							id.setObservacion(primeraCadena.toString());
							id.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(id);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}		
						
						/*se agrega la observaciones final de una aprobacion final */
						StringBuffer tereceraCadena = new StringBuffer();
						LcredSolicitudObservacionesId idTercera = new LcredSolicitudObservacionesId();
						Long correlativoTercera = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							idTercera.setCorrelativo(correlativoTercera);
							idTercera.setFecha(new Date());
							idTercera.setHora(new Date());
							idTercera.setNumSolicitud(solicitud.getId().getNumSolicitud());
							idTercera.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							tereceraCadena.append("Motivo Usuario: \n");
							tereceraCadena.append(this.mensajeAprobacionSolicitud);
							idTercera.setObservacion(tereceraCadena.toString());
							idTercera.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(idTercera);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}							
						
						/*se agrega la observaciones final de una aprobacion final */
						StringBuffer segundaCadena = new StringBuffer();
						LcredSolicitudObservacionesId idAux = new LcredSolicitudObservacionesId();
						Long correlativo1 = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo1 != null){
							idAux.setCorrelativo(correlativo1);
							idAux.setFecha(new Date());
							idAux.setHora(new Date());
							idAux.setNumSolicitud(solicitud.getId().getNumSolicitud());
							idAux.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							segundaCadena.append("Observaci√≥n: \n");
							segundaCadena.append(this.mensajeAnalisisAprobacion);
							idAux.setObservacion(segundaCadena.toString());
							idAux.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(idAux);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}	
						
						// Rechazar aprobarRechazar
						if(this.aprobarRechazar.equals("Aprobar")){
							LcredEstado estAux = scoringService.obtenerEstado("AE");
							insertHitos(solicitud, estAux, "NADA", 0);

							Long numero = scoringService.getSolicitudUsuarioDerivacionMaximo();
							SolicitudUsuarioDerivada sud = new SolicitudUsuarioDerivada();
							sud.setSystemId(numero);
							sud.setIdSolicitud(solicitud.getId().getNumSolicitud());
							sud.setEstado(estAux);
							sud.setFechaHora(new Date());
							sud.setUsuario(usuarioLogueado);
							sud.setConfirmacionObligatoria(true);
							sud.setConfirmacion(true);
							sud.setCodEstadoDerivada("AE");
							sud.setUsernameAutorizacion(usuarioLogueado.getAlias());
							boolean exitoingreso = scoringService.persitSolicitudUsuarioDerivacion(sud);
							log.debug(exitoingreso);
							
						}else{
							LcredEstado estAux = scoringService.obtenerEstado("RE");
							insertHitos(solicitud, estAux, "NADA", 0);	
							
							Long numero = scoringService.getSolicitudUsuarioDerivacionMaximo();
							SolicitudUsuarioDerivada sud = new SolicitudUsuarioDerivada();
							sud.setSystemId(numero);
							sud.setIdSolicitud(solicitud.getId().getNumSolicitud());
							sud.setEstado(estAux);
							sud.setFechaHora(new Date());
							sud.setUsuario(usuarioLogueado);
							sud.setConfirmacionObligatoria(true);
							sud.setConfirmacion(true);
							sud.setCodEstadoDerivada("RE");
							sud.setUsernameAutorizacion(usuarioLogueado.getAlias());
							boolean exitoingreso = scoringService.persitSolicitudUsuarioDerivacion(sud);
							log.debug(exitoingreso);
						}
						
						estadoAux = scoringService.obtenerEstado("SA");
												
					}
				
					try{
						 /* proceso de derivacion antes de actualizar */
						if(listaCorreoAnaDer != null && listaCorreoAnaDer.size() > 0){
							UsuarioCorreoDTO usuarioCorreoDTO = null;
							for( SolicitudUsuarioCorreo usuarioCorreo: listaCorreoAnaDer){
								usuarioCorreoDTO = new UsuarioCorreoDTO();
								usuarioCorreoDTO.setAlias(usuarioCorreo.getUsername());
								usuarioCorreoDTO.setNombreUsuario(usuarioCorreo.getNombre());
								usuarioCorreoDTO.setCorreoElectronico(usuarioCorreo.getCorreo());//usuarioCorreo.getCorreo()								
								listaCorreos.add(usuarioCorreoDTO);
								usuarioCorreoDTO = null;
								
								if(!usuarioCorreo.getUsername().equals("Especial")){
									/*ingreso de inngreso de correo a derivacion y aprobacion*/
									Usuariosegur user = scoringService.getUsuarioUsuarioSegurForUsername(usuarioCorreo.getUsername(), usuarioCorreo.getCorreo());	
									if(user != null){
										SolicitudUsuarioDerivada sud = null;// scoringService.getSolicitudUsuarioDerivacionForSolicitudIpPersonal(solicitud.getId().getNumSolicitud(), user.getIdPersonal());
										if(sud == null){
											Long numero = scoringService.getSolicitudUsuarioDerivacionMaximo();
											sud = new SolicitudUsuarioDerivada();
											sud.setSystemId(numero);
											sud.setIdSolicitud(solicitud.getId().getNumSolicitud());
											sud.setEstado(estadoAux);
											sud.setFechaHora(new Date());
											sud.setUsuario(user);
											sud.setConfirmacionObligatoria(usuarioCorreo.getConfirmar());
											sud.setConfirmacion(null);
											sud.setCodEstadoDerivada(estadoAux.getCodEstado());
											log.debug("antes de deriva al usuario #0", usuarioCorreo.getNombre());
											boolean exitoingreso = scoringService.persitSolicitudUsuarioDerivacion(sud);
											log.debug("despues de deriva al usuario #0", usuarioCorreo.getNombre());
											log.debug(exitoingreso);
											sud = null;
										}
									}
								}	
							}							
							
							
							if(listaCorreos != null){
								for(UsuarioCorreoDTO ucdto : listaCorreos){
									if(ucdto != null && ucdto.getAlias() != null && ucdto.getCorreoElectronico() != null && !((ucdto.getAlias().trim()).toLowerCase()).equals(solicitud.getCodEmisor().trim().toLowerCase())){
										if(!ucdto.getAlias().equals("Especial")){
											log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getAlias().trim(), ucdto.getCorreoElectronico().trim());
											Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getAlias().trim(), ucdto.getCorreoElectronico().trim());
											if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
												if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
													ultimaListaCorreoPrueba.add(usuarioAux);	
													usuarioAux = new Usuariosegur();
												}												
											}
										}else{
											Usuariosegur especial = new Usuariosegur();
											especial.setNombre(ucdto.getNombreUsuario());
											especial.setCorreo(ucdto.getCorreoElectronico());
											ultimaListaCorreoPrueba.add(especial);
											especial = null;
										}
									}
								}
							}							
						}
						
						/*eliminar esto, cuando se establaque la solucion*/
						Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
						if(emisorCorreo != null){
							ultimaListaCorreoPrueba.add(emisorCorreo);
							emisorCorreo = null;
						}
						Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
						if(correoAdministrador != null){
							ultimaListaCorreoPrueba.add(correoAdministrador);
							correoAdministrador = null;
						}	
						
					}catch (Exception e) {
						log.error("Error, al hacer el proceso de derivacion #0", e.getMessage());
						FacesMessages.instance().add(Severity.ERROR,"Se√±or usuario vuelva a consultar la solicitud ");
						this.habilitaMensajeDerivacion = true;	
						return;							
					}						
					
					
					boolean exito = scoringService.mergerSolicitud(solicitud);
					boolean exitoVenta = scoringService.mergerSolicitudCondiciones(condicion);
					entityManager.refresh(solicitud);
					entityManager.refresh(condicion);
					if(exito == true && exitoVenta == true){
						if(analisisAprobacion!=null && analisisAprobacion.equals("Analisis")){
							this.mensajeGlogal = "Se ha derivado a analisis la solicitud N¬∞ "+ solicitud.getId().getNumSolicitud();
						}else{
							this.mensajeGlogal = "Se ha derivado a aprobaci√≥n la solicitud N¬∞ "+ solicitud.getId().getNumSolicitud();
					    }
						List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
						if(listaFileUploadedDTOs != null && listaFileUploadedDTOs.size() != 0){
							for(FileUploadedDTO archivo :listaFileUploadedDTOs){
							   try {							
									OutputStream ostream = null;
									String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
									nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);
									
									String url = "archivosRespuesta"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
									
									//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
									ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
									log.debug("url #0",archivo.getUploadItem().getContentType());
									IOUtils.copyStream(ostream, istream);
									ostream.flush();
									ostream.close();
									istream.close();
									//guardar datos en la BD
									ArchivoAdjunto archivoAux = new ArchivoAdjunto();
									archivoAux.setSolicitud(solicitud);
									archivoAux.setUrl(url);
									archivoAux.setUbicacion("");
									archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
									archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
									archivoAux.setUsuario(usuarioLogueado);	
									archivoAux.setFechaCreacion(new Date());
									entityManager.persist(archivoAux);
									entityManager.flush();
									ConceptoDTO objetoAux = new ConceptoDTO();
									objetoAux.setNombreArchivo(nombreArchivo);
									objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
									listaArchivoGuardadoResp.add(objetoAux);
									objetoAux = null;
									
								} catch (FileNotFoundException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}
								catch (IOException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}catch (Exception e) {
									e.printStackTrace();
								}							
							}	
						}
						List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
						
						
						if(listaCorreoAnaDer != null){
							/*setando los varlores del dto para el correo*/
							ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
							contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
							if(this.aprobarRechazar != null &&  this.mensajeAprobacionSolicitud != null){
								contenidoEmail.setObservacionEjecutivo("opini√≥n:"+this.aprobarRechazar +" Observaci√≥n:"+this.mensajeAprobacionSolicitud);
							}
							
							if(analisisAprobacion!=null && analisisAprobacion.equals("Analisis")){
								contenidoEmail.setColor("AZUL");
								contenidoEmail.setTituloRespuesta("Derivada a an√°lisis solicitud ");
								contenidoEmail.setAccion("Se ha derivado a analisis la solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
								contenidoEmail.setAccionRespuesta("");
							}else{
								contenidoEmail.setColor("AZUL");
								contenidoEmail.setTituloRespuesta("Derivada a aprobaci√≥n solicitud ");
								contenidoEmail.setAccion("Se ha derivado a aprobaci√≥n la solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
								contenidoEmail.setAccionRespuesta("");
							}
							
							contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
							if(this.aprobarRechazar.equals("Aprobar")){
								contenidoEmail.setDesicionEjecutivo("Aprobada");
							}else{
								contenidoEmail.setDesicionEjecutivo("Rechazada");
							}
							contenidoEmail.setObservacionRespuesta(this.mensajeAnalisisAprobacion);
							contenidoEmail.setObservacionEjecutivo(this.mensajeAprobacionSolicitud);
							contenidoEmail.setOpcionFinal(1);							
							contenidoEmail.setSolicitud(solicitud);
							
							
							/*setando los varlores del dto para el correo*/
							StringBuffer rutNombre = new StringBuffer();
							rutNombre.append(cliente.getRut());
							rutNombre.append(" / ");
							rutNombre.append(modificarTexto(cliente.getRazonSocial()));
							contenidoEmail.setRutNombre(rutNombre.toString());
							contenidoEmail.setSoloNombre(solicitud.getNomCliente());
							contenidoEmail.setCanalVenta(modificarTexto(solicitud.getCanal()));

							Sucursal suc = obtenerObjetoSucursal(solicitud.getCodSucursal());
							if(suc != null){
								contenidoEmail.setSucursal(suc.getDescripcion());
							}else{
								contenidoEmail.setSucursal(solicitud.getCodSucursal());
							}
							
							UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
							if(ususarioEmisor != null){
								contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
							}else{
								contenidoEmail.setEmisor(solicitud.getCodEmisor());
							}							
							
							contenidoEmail.setTipoSolicitud("Cambio de Condiciones.");
							
							if(this.modificarCondicion){
								if(this.condicionRiesgoNew == true && this.condicionPagoNew == false){
									contenidoEmail.setTipoLineaCredito("Condiciones de Riesgo.");	
									contenidoEmail.setCondicionRiesgo(cliente.getClasificacionRiesgo());
									contenidoEmail.setCondicionPago("");
									contenidoEmail.setCondicionRiesgoNuevo(this.clsRiesgoNuevo);								
									contenidoEmail.setCondicionPagoNuevo("");
								
								}else if(this.condicionRiesgoNew == false && this.condicionPagoNew == true){
									contenidoEmail.setTipoLineaCredito("Condiciones de Pago.");
									contenidoEmail.setCondicionRiesgo("");
									contenidoEmail.setCondicionPago(cliente.getCondicionPago());
									contenidoEmail.setCondicionRiesgoNuevo("");								
									contenidoEmail.setCondicionPagoNuevo(this.cPagoNuevo);									
								
								}else if(this.condicionRiesgoNew == true && this.condicionPagoNew == true){
									contenidoEmail.setTipoLineaCredito("Condiciones "+ this.tipoSolicitudAux.getDesTipoSolicitud());
									contenidoEmail.setCondicionRiesgo(cliente.getClasificacionRiesgo());
									contenidoEmail.setCondicionPago(cliente.getCondicionPago());
									contenidoEmail.setCondicionRiesgoNuevo(this.clsRiesgoNuevo);								
									contenidoEmail.setCondicionPagoNuevo(this.cPagoNuevo);
								}								
							}else{
								
								if(this.condicionRiesgo == true && this.condicionPago == false){
									contenidoEmail.setTipoLineaCredito("Condiciones de Riesgo.");	
									contenidoEmail.setCondicionRiesgo(cliente.getClasificacionRiesgo());
									contenidoEmail.setCondicionPago("");
									contenidoEmail.setCondicionRiesgoNuevo(this.clsRiesgo);								
									contenidoEmail.setCondicionPagoNuevo("");
								
								}else if(this.condicionRiesgo == false && this.condicionPago == true){
									contenidoEmail.setTipoLineaCredito("Condiciones de Pago.");
									contenidoEmail.setCondicionRiesgo("");
									contenidoEmail.setCondicionPago(cliente.getCondicionPago());
									contenidoEmail.setCondicionRiesgoNuevo("");								
									contenidoEmail.setCondicionPagoNuevo(this.cPago);									
								
								}else if(this.condicionRiesgo == true && this.condicionPago == true){
									contenidoEmail.setTipoLineaCredito("Condiciones "+ this.tipoSolicitudAux.getDesTipoSolicitud());
									contenidoEmail.setCondicionRiesgo(cliente.getClasificacionRiesgo());
									contenidoEmail.setCondicionPago(cliente.getCondicionPago());
									contenidoEmail.setCondicionRiesgoNuevo(this.clsRiesgo);								
									contenidoEmail.setCondicionPagoNuevo(this.cPago);
								}								
							}
							contenidoEmail.setMotivoCambio(condicion.getMotivoCambio());
						    /*datos de condiciones */
							contenidoEmail.setListaArchivos(listaArchivoGuardado);
							contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);	
							contenidoEmail.setListaObservaciones(listaObservaciones);
							contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);							
							try{
								if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
									emailAlerta.enviarRespuestaSolicitudCondiciones(contenidoEmail);	
								}	
							}catch (Exception e) {
								log.debug("paso por el error #0"+ e.getMessage());
							}	
						}	
						
						LcredEstado estado = null;
						if(analisisAprobacion!=null && analisisAprobacion.equals("Analisis")){
							 estado = ObtenerEstadoSolictud("B");
								insertHitos(solicitud, estado, "RESPUESTA", cantidad);
								entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
								             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
								entityManager.flush();
								insertarLogs(solicitud, 13);
						}else{
							estado = ObtenerEstadoSolictud("SA");
							insertHitos(solicitud, estado, "RESPUESTA", cantidad);
							entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
							             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
							entityManager.flush();	
							insertarLogs(solicitud, 14);
						}
					
				}	
			}
		   }else if(this.paginaIngreso == 41){
				if(solicitud != null && solicitudOtra != null){
					if(analisisAprobacion!=null && analisisAprobacion.equals("Analisis")){
						solicitud.setEstado("B");
						solicitud.setEstadoEvaluacion("B");
						solicitud.setDevolver(false);
						solicitudOtra.setStatusSolicitud(solicitud.getEstado());
						if(cantidad == 1){
							SolicitudUsuarioCorreo ucoreo = this.listaCorreoAnaDer.get(0);
							solicitud.setUsuarioActual(ucoreo.getUsername());
						}else{
							solicitud.setUsuarioActual("VARIOS");
						}
						/*se agrega la observaciones final de una aprobacion final */
						LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
						Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							id.setCorrelativo(correlativo);
							id.setFecha(new Date());
							id.setHora(new Date());
							id.setNumSolicitud(solicitud.getId().getNumSolicitud());
							id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							id.setObservacion(this.mensajeAnalisisAprobacion);
							id.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(id);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}
						estadoAux = scoringService.obtenerEstado("B");
					}else {
						solicitud.setEstado("SA");
						solicitud.setEstadoEvaluacion("SA");
						solicitud.setDevolver(false);
						solicitudOtra.setStatusSolicitud(solicitud.getEstado());
						if(cantidad == 1){
							SolicitudUsuarioCorreo ucoreo = this.listaCorreoAnaDer.get(0);
							solicitud.setUsuarioActual(ucoreo.getUsername());
						}else{
							solicitud.setUsuarioActual("VARIOS");
						}
						/*se agrega la observaciones final de una aprobacion final */
						StringBuffer primeraCadena = new StringBuffer();
						LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
						Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							id.setCorrelativo(correlativo);
							id.setFecha(new Date());
							id.setHora(new Date());
							id.setNumSolicitud(solicitud.getId().getNumSolicitud());
							id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							primeraCadena.append("opini√≥n: \n ");
							primeraCadena.append(this.aprobarRechazar);
							id.setObservacion(primeraCadena.toString());
							id.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(id);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}		
						
						/*se agrega la observaciones final de una aprobacion final */
						StringBuffer tereceraCadena = new StringBuffer();
						LcredSolicitudObservacionesId idTercera = new LcredSolicitudObservacionesId();
						Long correlativoTercera = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							idTercera.setCorrelativo(correlativoTercera);
							idTercera.setFecha(new Date());
							idTercera.setHora(new Date());
							idTercera.setNumSolicitud(solicitud.getId().getNumSolicitud());
							idTercera.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							tereceraCadena.append("Motivo Usuario: \n");
							tereceraCadena.append(this.mensajeAprobacionSolicitud);
							idTercera.setObservacion(tereceraCadena.toString());
							idTercera.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(idTercera);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}	
						
						/*se agrega la observaciones final de una aprobacion final */
						StringBuffer segundaCadena = new StringBuffer();
						LcredSolicitudObservacionesId idAux = new LcredSolicitudObservacionesId();
						Long correlativo1 = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo1 != null){
							idAux.setCorrelativo(correlativo1);
							idAux.setFecha(new Date());
							idAux.setHora(new Date());
							idAux.setNumSolicitud(solicitud.getId().getNumSolicitud());
							idAux.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							segundaCadena.append("Observaci√≥n: \n");
							segundaCadena.append(this.mensajeAnalisisAprobacion);
							idAux.setObservacion(segundaCadena.toString());
							idAux.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(idAux);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}	
						
						// Rechazar aprobarRechazar
						if(this.aprobarRechazar.equals("Aprobar")){
							LcredEstado estAux = scoringService.obtenerEstado("AE");
							insertHitos(solicitud, estAux, "NADA", 0);

							Long numero = scoringService.getSolicitudUsuarioDerivacionMaximo();
							SolicitudUsuarioDerivada sud = new SolicitudUsuarioDerivada();
							sud.setSystemId(numero);
							sud.setIdSolicitud(solicitud.getId().getNumSolicitud());
							sud.setEstado(estAux);
							sud.setFechaHora(new Date());
							sud.setUsuario(usuarioLogueado);
							sud.setConfirmacionObligatoria(true);
							sud.setConfirmacion(true);
							sud.setCodEstadoDerivada(null);
							sud.setUsernameAutorizacion(usuarioLogueado.getAlias());
							boolean exitoingreso = scoringService.persitSolicitudUsuarioDerivacion(sud);
							log.debug(exitoingreso);
							
						}else{
							LcredEstado estAux = scoringService.obtenerEstado("RE");
							insertHitos(solicitud, estAux, "NADA", 0);	
							
							Long numero = scoringService.getSolicitudUsuarioDerivacionMaximo();
							SolicitudUsuarioDerivada sud = new SolicitudUsuarioDerivada();
							sud.setSystemId(numero);
							sud.setIdSolicitud(solicitud.getId().getNumSolicitud());
							sud.setEstado(estAux);
							sud.setFechaHora(new Date());
							sud.setUsuario(usuarioLogueado);
							sud.setConfirmacionObligatoria(true);
							sud.setConfirmacion(true);
							sud.setCodEstadoDerivada(null);
							sud.setUsernameAutorizacion(usuarioLogueado.getAlias());
							boolean exitoingreso = scoringService.persitSolicitudUsuarioDerivacion(sud);
							log.debug(exitoingreso);
						}
						
						estadoAux = scoringService.obtenerEstado("SA");
					}
				
					try{
						 /* proceso de derivacion antes de actualizar */
						if(listaCorreoAnaDer != null && listaCorreoAnaDer.size() > 0){
							UsuarioCorreoDTO usuarioCorreoDTO = null;
							for( SolicitudUsuarioCorreo usuarioCorreo: listaCorreoAnaDer){
								usuarioCorreoDTO = new UsuarioCorreoDTO();
								usuarioCorreoDTO.setAlias(usuarioCorreo.getUsername());
								usuarioCorreoDTO.setNombreUsuario(usuarioCorreo.getNombre());
								usuarioCorreoDTO.setCorreoElectronico(usuarioCorreo.getCorreo());//usuarioCorreo.getCorreo()								
								listaCorreos.add(usuarioCorreoDTO);
								usuarioCorreoDTO = null;
								
								if(!usuarioCorreo.getUsername().equals("Especial")){
									/*ingreso de inngreso de correo a derivacion y aprobacion*/
									Usuariosegur user = scoringService.getUsuarioUsuarioSegurForUsername(usuarioCorreo.getUsername(), usuarioCorreo.getCorreo());	
									if(user != null){
										SolicitudUsuarioDerivada sud = null;// scoringService.getSolicitudUsuarioDerivacionForSolicitudIpPersonal(solicitud.getId().getNumSolicitud(), user.getIdPersonal());
										if(sud == null){
											Long numero = scoringService.getSolicitudUsuarioDerivacionMaximo();
											sud = new SolicitudUsuarioDerivada();
											sud.setSystemId(numero);
											sud.setIdSolicitud(solicitud.getId().getNumSolicitud());
											sud.setEstado(estadoAux);
											sud.setFechaHora(new Date());
											sud.setUsuario(user);
											sud.setConfirmacionObligatoria(usuarioCorreo.getConfirmar());
											sud.setConfirmacion(null);
											sud.setCodEstadoDerivada(estadoAux.getCodEstado());
											log.debug("antes de deriva al usuario #0", usuarioCorreo.getNombre());
											boolean exitoingreso = scoringService.persitSolicitudUsuarioDerivacion(sud);
											log.debug("despues de deriva al usuario #0", usuarioCorreo.getNombre());
											log.debug(exitoingreso);
											sud = null;
										}
									}
								}	
							}							
							
							
							if(listaCorreos != null){
								for(UsuarioCorreoDTO ucdto : listaCorreos){
									if(ucdto != null && ucdto.getAlias() != null && ucdto.getCorreoElectronico() != null && !((ucdto.getAlias().trim()).toLowerCase()).equals(solicitud.getCodEmisor().trim().toLowerCase())){
										if(!ucdto.getAlias().equals("Especial")){
											log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getAlias().trim(), ucdto.getCorreoElectronico().trim());
											Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getAlias().trim(), ucdto.getCorreoElectronico().trim());
											if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
												if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
													ultimaListaCorreoPrueba.add(usuarioAux);	
													usuarioAux = new Usuariosegur();
												}												
											}
										}else{
											Usuariosegur especial = new Usuariosegur();
											especial.setNombre(ucdto.getNombreUsuario());
											especial.setCorreo(ucdto.getCorreoElectronico());
											ultimaListaCorreoPrueba.add(especial);
											especial = null;
										}
									}
								}
							}							
						}
						
						/*eliminar esto, cuando se establaque la solucion*/
						Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
						if(emisorCorreo != null){
							ultimaListaCorreoPrueba.add(emisorCorreo);
							emisorCorreo = null;
						}
						Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
						if(correoAdministrador != null){
							ultimaListaCorreoPrueba.add(correoAdministrador);
							correoAdministrador = null;
						}	
						
					}catch (Exception e) {
						log.error("Error, al hacer el proceso de derivacion #0", e.getMessage());
						FacesMessages.instance().add(Severity.ERROR,"Se√±or usuario vuelva a consultar la solicitud ");
						this.habilitaMensajeDerivacion = true;	
						return;							
					}						
					
					
					boolean exito = scoringService.mergerSolicitud(solicitud);
					boolean exitoVenta = scoringService.mergerSolicitudOtrasSolicitudes(solicitudOtra);
					entityManager.refresh(solicitud);
					entityManager.refresh(solicitudOtra);
					if(exito == true && exitoVenta == true){
						if(analisisAprobacion!=null && analisisAprobacion.equals("Analisis")){
							this.mensajeGlogal = "Se ha derivado a analisis la solicitud N¬∞ "+ solicitud.getId().getNumSolicitud();
							estadoAux = scoringService.obtenerEstado("B");
						}else{
							this.mensajeGlogal = "Se ha derivado a aprobaci√≥n la solicitud N¬∞ "+ solicitud.getId().getNumSolicitud();
							estadoAux = scoringService.obtenerEstado("SA");
						}
						List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
						if(listaFileUploadedDTOs != null && listaFileUploadedDTOs.size() != 0){
							for(FileUploadedDTO archivo :listaFileUploadedDTOs){
							   try {							
									OutputStream ostream = null;
									String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
									nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);									
									
									String url = "archivosRespuesta"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
									
									//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
									ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
									log.debug("url #0",archivo.getUploadItem().getContentType());
									IOUtils.copyStream(ostream, istream);
									ostream.flush();
									ostream.close();
									istream.close();
									//guardar datos en la BD
									ArchivoAdjunto archivoAux = new ArchivoAdjunto();
									archivoAux.setSolicitud(solicitud);
									archivoAux.setUrl(url);
									archivoAux.setUbicacion("");
									archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
									archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
									archivoAux.setUsuario(usuarioLogueado);	
									archivoAux.setFechaCreacion(new Date());
									entityManager.persist(archivoAux);
									entityManager.flush();
									ConceptoDTO objetoAux = new ConceptoDTO();
									objetoAux.setNombreArchivo(nombreArchivo);
									objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
									listaArchivoGuardadoResp.add(objetoAux);
									objetoAux = null;
									
								} catch (FileNotFoundException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}
								catch (IOException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}catch (Exception e) {
									e.printStackTrace();
								}							
							}	
						}
						
						List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
						
						if(listaCorreoAnaDer != null){
							/*setando los varlores del dto para el correo*/
							ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
							contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
							if(this.aprobarRechazar != null &&  this.mensajeAprobacionSolicitud != null){
								contenidoEmail.setObservacionEjecutivo("opini√≥n:"+this.aprobarRechazar +" Observaci√≥n:"+this.mensajeAprobacionSolicitud);
							}
							
							if(analisisAprobacion!=null && analisisAprobacion.equals("Analisis")){
								contenidoEmail.setColor("AZUL");
								contenidoEmail.setTituloRespuesta("Derivada a an√°lisis solicitud ");
								contenidoEmail.setAccion("Se ha derivado a analisis la solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
								contenidoEmail.setAccionRespuesta("");
							}else{
								contenidoEmail.setColor("AZUL");
								contenidoEmail.setTituloRespuesta("Derivada a aprobaci√≥n solicitud ");
								contenidoEmail.setAccion("Se ha derivado a aprobaci√≥n la solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
								contenidoEmail.setAccionRespuesta("");
							}
							
							contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
							if(this.aprobarRechazar.equals("Aprobar")){
								contenidoEmail.setDesicionEjecutivo("Aprobada");
							}else{
								contenidoEmail.setDesicionEjecutivo("Rechazada");
							}
							contenidoEmail.setObservacionRespuesta(this.mensajeAnalisisAprobacion);
							contenidoEmail.setObservacionEjecutivo(this.mensajeAprobacionSolicitud);
							contenidoEmail.setOpcionFinal(1);							
							contenidoEmail.setSolicitud(solicitud);
							
							/*setando los varlores del dto para el correo*/
							StringBuffer rutNombre = new StringBuffer();
							rutNombre.append(cliente.getRut());
							rutNombre.append(" / ");
							rutNombre.append(modificarTexto(cliente.getRazonSocial()));
							contenidoEmail.setRutNombre(rutNombre.toString());
							contenidoEmail.setSoloNombre(solicitud.getNomCliente());
							contenidoEmail.setCanalVenta(modificarTexto(solicitud.getCanal()));
							
							Sucursal suc = obtenerObjetoSucursal(solicitud.getCodSucursal());
							if(suc != null){
								contenidoEmail.setSucursal(suc.getDescripcion());
							}else{
								contenidoEmail.setSucursal(solicitud.getCodSucursal());
							}
							
							UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
							if(ususarioEmisor != null){
								contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
							}else{
								contenidoEmail.setEmisor(solicitud.getCodEmisor());
							}							
							contenidoEmail.setTipoSolicitud("Bloqueo / Desbloqueo.");
							
							if("41".equals(this.opcionBloqueoDesbloqueo)){
								contenidoEmail.setTipoBloqueoDesbloqueo("Bloqueo.");
		
							}else if("42".equals(this.opcionBloqueoDesbloqueo)){
								contenidoEmail.setTipoBloqueoDesbloqueo("Desbloqueo.");
							}
							
							contenidoEmail.setMotivoBloqueoDesbloqueo(this.motivoBloDesbloqueo);
							contenidoEmail.setObservacionesBloqueoDesblorqueo(this.motivoBloDesbloqueo);
							
						    /*datos de condiciones */
							contenidoEmail.setListaArchivos(listaArchivoGuardado);
							contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);	
							contenidoEmail.setListaObservaciones(listaObservaciones);
							contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);
							try{
								if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
									emailAlerta.enviarRespuestaSolicitudBloqueoDesbloqueo(contenidoEmail);	
								}	
							}catch (Exception e) {
								log.debug("paso por el error #0"+ e.getMessage());
							}	
						}	
						
						LcredEstado estado = null;
						if(analisisAprobacion!=null && analisisAprobacion.equals("Analisis")){
							 estado = ObtenerEstadoSolictud("B");
								insertHitos(solicitud, estado, "RESPUESTA", cantidad);
								entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
								             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
								entityManager.flush();
								insertarLogs(solicitud, 13);
						}else{
							estado = ObtenerEstadoSolictud("SA");
							insertHitos(solicitud, estado, "RESPUESTA", cantidad);
							entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
							             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
							entityManager.flush();	
							insertarLogs(solicitud, 14);
						}
					
					}	
				}
		   }else if(this.paginaIngreso == 43){
				if(solicitud != null && solicitudOtra != null){
					if(analisisAprobacion!=null && analisisAprobacion.equals("Analisis")){
						solicitud.setEstado("B");
						solicitud.setEstadoEvaluacion("B");
						solicitud.setDevolver(false);
						solicitudOtra.setStatusSolicitud(solicitud.getEstado());
						if(cantidad == 1){
							SolicitudUsuarioCorreo ucoreo = this.listaCorreoAnaDer.get(0);
							solicitud.setUsuarioActual(ucoreo.getUsername());
						}else{
							solicitud.setUsuarioActual("VARIOS");
						}
						/*se agrega la observaciones final de una aprobacion final */
						LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
						Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							id.setCorrelativo(correlativo);
							id.setFecha(new Date());
							id.setHora(new Date());
							id.setNumSolicitud(solicitud.getId().getNumSolicitud());
							id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							id.setObservacion(this.mensajeAnalisisAprobacion);
							id.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(id);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}
						estadoAux = scoringService.obtenerEstado("B");						
					}else {
						solicitud.setEstado("SA");
						solicitud.setEstadoEvaluacion("SA");
						solicitud.setDevolver(false);
						solicitudOtra.setStatusSolicitud(solicitud.getEstado());
						if(cantidad == 1){
							SolicitudUsuarioCorreo ucoreo = this.listaCorreoAnaDer.get(0);
							solicitud.setUsuarioActual(ucoreo.getUsername());
						}else{
							solicitud.setUsuarioActual("VARIOS");
						}
						/*se agrega la observaciones final de una aprobacion final */
						StringBuffer primeraCadena = new StringBuffer();
						LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
						Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							id.setCorrelativo(correlativo);
							id.setFecha(new Date());
							id.setHora(new Date());
							id.setNumSolicitud(solicitud.getId().getNumSolicitud());
							id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							primeraCadena.append("opini√≥n: \n ");
							primeraCadena.append(this.aprobarRechazar);
							id.setObservacion(primeraCadena.toString());
							id.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(id);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}		
						/*se agrega la observaciones final de una aprobacion final */
						StringBuffer tereceraCadena = new StringBuffer();
						LcredSolicitudObservacionesId idTercera = new LcredSolicitudObservacionesId();
						Long correlativoTercera = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							idTercera.setCorrelativo(correlativoTercera);
							idTercera.setFecha(new Date());
							idTercera.setHora(new Date());
							idTercera.setNumSolicitud(solicitud.getId().getNumSolicitud());
							idTercera.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							tereceraCadena.append("Motivo Usuario: \n");
							tereceraCadena.append(this.mensajeAprobacionSolicitud);
							idTercera.setObservacion(tereceraCadena.toString());
							idTercera.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(idTercera);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}							
						
						/*se agrega la observaciones final de una aprobacion final */
						StringBuffer segundaCadena = new StringBuffer();
						LcredSolicitudObservacionesId idAux = new LcredSolicitudObservacionesId();
						Long correlativo1 = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo1 != null){
							idAux.setCorrelativo(correlativo1);
							idAux.setFecha(new Date());
							idAux.setHora(new Date());
							idAux.setNumSolicitud(solicitud.getId().getNumSolicitud());
							idAux.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							segundaCadena.append("Observaci√≥n: \n ");
							segundaCadena.append(this.mensajeAnalisisAprobacion);
							idAux.setObservacion(segundaCadena.toString());
							idAux.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(idAux);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}	
						
						// Rechazar aprobarRechazar
						if(this.aprobarRechazar.equals("Aprobar")){
							LcredEstado estAux = scoringService.obtenerEstado("AE");
							insertHitos(solicitud, estAux, "NADA", 0);

							Long numero = scoringService.getSolicitudUsuarioDerivacionMaximo();
							SolicitudUsuarioDerivada sud = new SolicitudUsuarioDerivada();
							sud.setSystemId(numero);
							sud.setIdSolicitud(solicitud.getId().getNumSolicitud());
							sud.setEstado(estAux);
							sud.setFechaHora(new Date());
							sud.setUsuario(usuarioLogueado);
							sud.setConfirmacionObligatoria(true);
							sud.setConfirmacion(true);
							sud.setCodEstadoDerivada(null);
							sud.setUsernameAutorizacion(usuarioLogueado.getAlias());
							boolean exitoingreso = scoringService.persitSolicitudUsuarioDerivacion(sud);
							log.debug(exitoingreso);
							
						}else{
							LcredEstado estAux = scoringService.obtenerEstado("RE");
							insertHitos(solicitud, estAux, "NADA", 0);	
							
							Long numero = scoringService.getSolicitudUsuarioDerivacionMaximo();
							SolicitudUsuarioDerivada sud = new SolicitudUsuarioDerivada();
							sud.setSystemId(numero);
							sud.setIdSolicitud(solicitud.getId().getNumSolicitud());
							sud.setEstado(estAux);
							sud.setFechaHora(new Date());
							sud.setUsuario(usuarioLogueado);
							sud.setConfirmacionObligatoria(true);
							sud.setConfirmacion(true);
							sud.setCodEstadoDerivada(null);
							sud.setUsernameAutorizacion(usuarioLogueado.getAlias());
							boolean exitoingreso = scoringService.persitSolicitudUsuarioDerivacion(sud);
							log.debug(exitoingreso);
						}
						
						estadoAux = scoringService.obtenerEstado("SA");
					}
				
					
					try{
						 /* proceso de derivacion antes de actualizar */
						if(listaCorreoAnaDer != null && listaCorreoAnaDer.size() > 0){
							UsuarioCorreoDTO usuarioCorreoDTO = null;
							for( SolicitudUsuarioCorreo usuarioCorreo: listaCorreoAnaDer){
								usuarioCorreoDTO = new UsuarioCorreoDTO();
								usuarioCorreoDTO.setAlias(usuarioCorreo.getUsername());
								usuarioCorreoDTO.setNombreUsuario(usuarioCorreo.getNombre());
								usuarioCorreoDTO.setCorreoElectronico(usuarioCorreo.getCorreo());//usuarioCorreo.getCorreo()								
								listaCorreos.add(usuarioCorreoDTO);
								usuarioCorreoDTO = null;
								
								if(!usuarioCorreo.getUsername().equals("Especial")){
									/*ingreso de inngreso de correo a derivacion y aprobacion*/
									Usuariosegur user = scoringService.getUsuarioUsuarioSegurForUsername(usuarioCorreo.getUsername(), usuarioCorreo.getCorreo());	
									if(user != null){
										SolicitudUsuarioDerivada sud = null;// scoringService.getSolicitudUsuarioDerivacionForSolicitudIpPersonal(solicitud.getId().getNumSolicitud(), user.getIdPersonal());
										if(sud == null){
											Long numero = scoringService.getSolicitudUsuarioDerivacionMaximo();
											sud = new SolicitudUsuarioDerivada();
											sud.setSystemId(numero);
											sud.setIdSolicitud(solicitud.getId().getNumSolicitud());
											sud.setEstado(estadoAux);
											sud.setFechaHora(new Date());
											sud.setUsuario(user);
											sud.setConfirmacionObligatoria(usuarioCorreo.getConfirmar());
											sud.setConfirmacion(null);
											sud.setCodEstadoDerivada(estadoAux.getCodEstado());
											log.debug("antes de deriva al usuario #0", usuarioCorreo.getNombre());
											boolean exitoingreso = scoringService.persitSolicitudUsuarioDerivacion(sud);
											log.debug("despues de deriva al usuario #0", usuarioCorreo.getNombre());
											log.debug(exitoingreso);
											sud = null;
										}
									}
								}	
							}							
							
							
							if(listaCorreos != null){
								for(UsuarioCorreoDTO ucdto : listaCorreos){
									if(ucdto != null && ucdto.getAlias() != null && ucdto.getCorreoElectronico() != null && !((ucdto.getAlias().trim()).toLowerCase()).equals(solicitud.getCodEmisor().trim().toLowerCase())){
										if(!ucdto.getAlias().equals("Especial")){
											log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getAlias().trim(), ucdto.getCorreoElectronico().trim());
											Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getAlias().trim(), ucdto.getCorreoElectronico().trim());
											if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
												if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
													ultimaListaCorreoPrueba.add(usuarioAux);	
													usuarioAux = new Usuariosegur();
												}												
											}
										}else{
											Usuariosegur especial = new Usuariosegur();
											especial.setNombre(ucdto.getNombreUsuario());
											especial.setCorreo(ucdto.getCorreoElectronico());
											ultimaListaCorreoPrueba.add(especial);
											especial = null;
										}
									}
								}
							}							
						}
						
						/*eliminar esto, cuando se establaque la solucion*/
						Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
						if(emisorCorreo != null){
							ultimaListaCorreoPrueba.add(emisorCorreo);
							emisorCorreo = null;
						}
						Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
						if(correoAdministrador != null){
							ultimaListaCorreoPrueba.add(correoAdministrador);
							correoAdministrador = null;
						}	
						
					}catch (Exception e) {
						log.error("Error, al hacer el proceso de derivacion #0", e.getMessage());
						FacesMessages.instance().add(Severity.ERROR,"Se√±or usuario vuelva a consultar la solicitud ");
						this.habilitaMensajeDerivacion = true;	
						return;							
					}						
					
					
					
					
					boolean exito = scoringService.mergerSolicitud(solicitud);
					boolean exitoVenta = scoringService.mergerSolicitudOtrasSolicitudes(solicitudOtra);
					entityManager.refresh(solicitud);
					entityManager.refresh(solicitudOtra);
					if(exito == true && exitoVenta == true){
						if(analisisAprobacion!=null && analisisAprobacion.equals("Analisis")){
							this.mensajeGlogal = "Se ha derivado a analisis la solicitud N¬∞ "+ solicitud.getId().getNumSolicitud();
						}else{
							this.mensajeGlogal = "Se ha derivado a aprobaci√≥n la solicitud N¬∞ "+ solicitud.getId().getNumSolicitud();
						}
						List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
						if(listaFileUploadedDTOs != null && listaFileUploadedDTOs.size() != 0){
							for(FileUploadedDTO archivo :listaFileUploadedDTOs){
							   try {							
									OutputStream ostream = null;
									String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
									nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);	
									
									String url = "archivosRespuesta"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
									
									//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
									ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
									log.debug("url #0",archivo.getUploadItem().getContentType());
									IOUtils.copyStream(ostream, istream);
									ostream.flush();
									ostream.close();
									istream.close();
									//guardar datos en la BD
									ArchivoAdjunto archivoAux = new ArchivoAdjunto();
									archivoAux.setSolicitud(solicitud);
									archivoAux.setUrl(url);
									archivoAux.setUbicacion("");
									archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
									archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
									archivoAux.setUsuario(usuarioLogueado);	
									archivoAux.setFechaCreacion(new Date());
									entityManager.persist(archivoAux);
									entityManager.flush();
									ConceptoDTO objetoAux = new ConceptoDTO();
									objetoAux.setNombreArchivo(nombreArchivo);
									objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
									listaArchivoGuardadoResp.add(objetoAux);
									objetoAux = null;
									
								} catch (FileNotFoundException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}
								catch (IOException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}catch (Exception e) {
									e.printStackTrace();
								}							
							}	
						}
						
						List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
						
						if(listaCorreoAnaDer != null){
							/*setando los varlores del dto para el correo*/
							ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
							contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
							if(this.aprobarRechazar != null &&  this.mensajeAprobacionSolicitud != null){
								contenidoEmail.setObservacionEjecutivo("opini√≥n:"+this.aprobarRechazar +" Observaci√≥n:"+this.mensajeAprobacionSolicitud);
							}
							
							if(analisisAprobacion!=null && analisisAprobacion.equals("Analisis")){
								contenidoEmail.setColor("AZUL");
								contenidoEmail.setTituloRespuesta("Derivada a an√°lisis solicitud ");
								contenidoEmail.setAccion("Se ha derivado a analisis la solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
								contenidoEmail.setAccionRespuesta("");
							}else{
								contenidoEmail.setColor("AZUL");
								contenidoEmail.setTituloRespuesta("Derivada a aprobaci√≥n solicitud ");
								contenidoEmail.setAccion("Se ha derivado a aprobaci√≥n la solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
								contenidoEmail.setAccionRespuesta("");
							}
							
							contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
							if(this.aprobarRechazar.equals("Aprobar")){
								contenidoEmail.setDesicionEjecutivo("Aprobada");
							}else{
								contenidoEmail.setDesicionEjecutivo("Rechazada");
							}
							contenidoEmail.setObservacionRespuesta(this.mensajeAnalisisAprobacion);
							contenidoEmail.setObservacionEjecutivo(this.mensajeAprobacionSolicitud);
							contenidoEmail.setOpcionFinal(1);							
							contenidoEmail.setSolicitud(solicitud);
							
							/*setando los varlores del dto para el correo*/
							StringBuffer rutNombre = new StringBuffer();
							rutNombre.append(cliente.getRut());
							rutNombre.append(" / ");
							rutNombre.append(modificarTexto(cliente.getRazonSocial()));
							contenidoEmail.setRutNombre(rutNombre.toString());
							contenidoEmail.setSoloNombre(solicitud.getNomCliente());
							contenidoEmail.setCanalVenta(modificarTexto(solicitud.getCanal()));
																			
							
							Sucursal suc = obtenerObjetoSucursal(solicitud.getCodSucursal());
							if(suc != null){
								contenidoEmail.setSucursal(suc.getDescripcion());
							}else{
								contenidoEmail.setSucursal(solicitud.getCodSucursal());
							}
							
							UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
							if(ususarioEmisor != null){
								contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
							}else{
								contenidoEmail.setEmisor(solicitud.getCodEmisor());
							}	
							
							contenidoEmail.setTipoSolicitud("Creacion de DM");
							contenidoEmail.setTipoDM("DM");
							
							
						    /*datos de archivos */
							contenidoEmail.setListaArchivos(listaArchivoGuardado);
							contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
							
							/*datos de los DMS*/
							List<CreacionDmDTO> listaDms = new ArrayList<CreacionDmDTO>(0);
							CreacionDmDTO obejtoDm =  null;
							for(LcredSolicitudDm docto : listaClienteDMs){
								if(docto != null){
								   obejtoDm = new CreacionDmDTO();
								   obejtoDm.setRut(docto.getId().getRut());
								   obejtoDm.setNombre(docto.getId().getNombre());
								   obejtoDm.setOficinaVentas(docto.getId().getOficinaVentas());
								   obejtoDm.setZona(docto.getId().getZona());
								   obejtoDm.setListaPrecio(docto.getId().getListaPrecio());
								   obejtoDm.setSector(docto.getId().getSector());
								   obejtoDm.setVendTelefono(docto.getId().getVendTelefono());
								   obejtoDm.setVendTerreno(docto.getId().getVendTerreno());
								   obejtoDm.setCobrador(docto.getId().getCobrador());
								   obejtoDm.setCondExpedicion(docto.getId().getCondExpedicion());
								   obejtoDm.setCondPago(docto.getId().getCondPago());
								   listaDms.add(obejtoDm);
								}
							}
					
							contenidoEmail.setListaCreacionDM(listaDms);
							contenidoEmail.setListaObservaciones(listaObservaciones);
							
						    /*datos de bloqueo y desbloqueo */
							contenidoEmail.setListaArchivos(listaArchivoGuardado);
							contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);							
							contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);
							try{
								if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
									emailAlerta.enviarSolicitudRespuestaDm(contenidoEmail);	
								}	
							}catch (Exception e) {
								log.debug("paso por el error #0"+ e.getMessage());
							}	
						}	
						
						
						LcredEstado estado = null;
						if(analisisAprobacion!=null && analisisAprobacion.equals("Analisis")){
							 estado = ObtenerEstadoSolictud("B");
								insertHitos(solicitud, estado, "RESPUESTA", cantidad);
								entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
								             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
								entityManager.flush();
								insertarLogs(solicitud, 13);
						}else{
							estado = ObtenerEstadoSolictud("SA");
							insertHitos(solicitud, estado, "RESPUESTA", cantidad);
							entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
							             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
							entityManager.flush();	
							insertarLogs(solicitud, 14);
						}
				}	
			}
		   }else if(this.paginaIngreso == 44){
				if(solicitud != null && solicitudOtra != null){
					if(analisisAprobacion!=null && analisisAprobacion.equals("Analisis")){
						solicitud.setEstado("B");
						solicitud.setEstadoEvaluacion("B");
						solicitud.setDevolver(false);
						solicitudOtra.setStatusSolicitud(solicitud.getEstado());
						if(cantidad == 1){
							SolicitudUsuarioCorreo ucoreo = this.listaCorreoAnaDer.get(0);
							solicitud.setUsuarioActual(ucoreo.getUsername());
						}else{
							solicitud.setUsuarioActual("VARIOS");
						}
						/*se agrega la observaciones final de una aprobacion final */
						LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
						Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							id.setCorrelativo(correlativo);
							id.setFecha(new Date());
							id.setHora(new Date());
							id.setNumSolicitud(solicitud.getId().getNumSolicitud());
							id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							id.setObservacion(this.mensajeAnalisisAprobacion);
							id.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(id);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}
						estadoAux = scoringService.obtenerEstado("B");
					}else {
						solicitud.setEstado("SA");
						solicitud.setEstadoEvaluacion("SA");
						solicitud.setDevolver(false);
						solicitudOtra.setStatusSolicitud(solicitud.getEstado());
						if(cantidad == 1){
							SolicitudUsuarioCorreo ucoreo = this.listaCorreoAnaDer.get(0);
							solicitud.setUsuarioActual(ucoreo.getUsername());
						}else{
							solicitud.setUsuarioActual("VARIOS");
						}
						/*se agrega la observaciones final de una aprobacion final */
						StringBuffer primeraCadena = new StringBuffer();
						LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
						Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							id.setCorrelativo(correlativo);
							id.setFecha(new Date());
							id.setHora(new Date());
							id.setNumSolicitud(solicitud.getId().getNumSolicitud());
							id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							primeraCadena.append("opini√≥n: \n ");
							primeraCadena.append(this.aprobarRechazar);
							id.setObservacion(primeraCadena.toString());
							id.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(id);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}	
						
						/*se agrega la observaciones final de una aprobacion final */
						StringBuffer tereceraCadena = new StringBuffer();
						LcredSolicitudObservacionesId idTercera = new LcredSolicitudObservacionesId();
						Long correlativoTercera = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							idTercera.setCorrelativo(correlativoTercera);
							idTercera.setFecha(new Date());
							idTercera.setHora(new Date());
							idTercera.setNumSolicitud(solicitud.getId().getNumSolicitud());
							idTercera.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							tereceraCadena.append("Motivo Usuario: \n");
							tereceraCadena.append(this.mensajeAprobacionSolicitud);
							idTercera.setObservacion(tereceraCadena.toString());
							idTercera.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(idTercera);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}							
						/*se agrega la observaciones final de una aprobacion final */
						StringBuffer segundaCadena = new StringBuffer();
						LcredSolicitudObservacionesId idAux = new LcredSolicitudObservacionesId();
						Long correlativo1 = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo1 != null){
							idAux.setCorrelativo(correlativo1);
							idAux.setFecha(new Date());
							idAux.setHora(new Date());
							idAux.setNumSolicitud(solicitud.getId().getNumSolicitud());
							idAux.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							segundaCadena.append("Observaci√≥n: \n ");
							segundaCadena.append(this.mensajeAnalisisAprobacion);
							idAux.setObservacion(segundaCadena.toString());
							idAux.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(idAux);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}	
						
						// Rechazar aprobarRechazar
						if(this.aprobarRechazar.equals("Aprobar")){
							LcredEstado estAux = scoringService.obtenerEstado("AE");
							insertHitos(solicitud, estAux, "NADA", 0);

							Long numero = scoringService.getSolicitudUsuarioDerivacionMaximo();
							SolicitudUsuarioDerivada sud = new SolicitudUsuarioDerivada();
							sud.setSystemId(numero);
							sud.setIdSolicitud(solicitud.getId().getNumSolicitud());
							sud.setEstado(estAux);
							sud.setFechaHora(new Date());
							sud.setUsuario(usuarioLogueado);
							sud.setConfirmacionObligatoria(true);
							sud.setConfirmacion(true);
							sud.setCodEstadoDerivada(null);
							sud.setUsernameAutorizacion(usuarioLogueado.getAlias());
							boolean exitoingreso = scoringService.persitSolicitudUsuarioDerivacion(sud);
							log.debug(exitoingreso);
							
						}else{
							LcredEstado estAux = scoringService.obtenerEstado("RE");
							insertHitos(solicitud, estAux, "NADA", 0);	
							
							Long numero = scoringService.getSolicitudUsuarioDerivacionMaximo();
							SolicitudUsuarioDerivada sud = new SolicitudUsuarioDerivada();
							sud.setSystemId(numero);
							sud.setIdSolicitud(solicitud.getId().getNumSolicitud());
							sud.setEstado(estAux);
							sud.setFechaHora(new Date());
							sud.setUsuario(usuarioLogueado);
							sud.setConfirmacionObligatoria(true);
							sud.setConfirmacion(true);
							sud.setCodEstadoDerivada(null);
							sud.setUsernameAutorizacion(usuarioLogueado.getAlias());
							boolean exitoingreso = scoringService.persitSolicitudUsuarioDerivacion(sud);
							log.debug(exitoingreso);
						}
						
						estadoAux = scoringService.obtenerEstado("SA");
												
					}
				
					try{
						 /* proceso de derivacion antes de actualizar */
						if(listaCorreoAnaDer != null && listaCorreoAnaDer.size() > 0){
							UsuarioCorreoDTO usuarioCorreoDTO = null;
							for( SolicitudUsuarioCorreo usuarioCorreo: listaCorreoAnaDer){
								usuarioCorreoDTO = new UsuarioCorreoDTO();
								usuarioCorreoDTO.setAlias(usuarioCorreo.getUsername());
								usuarioCorreoDTO.setNombreUsuario(usuarioCorreo.getNombre());
								usuarioCorreoDTO.setCorreoElectronico(usuarioCorreo.getCorreo());//usuarioCorreo.getCorreo()								
								listaCorreos.add(usuarioCorreoDTO);
								usuarioCorreoDTO = null;
								
								if(!usuarioCorreo.getUsername().equals("Especial")){
									/*ingreso de inngreso de correo a derivacion y aprobacion*/
									Usuariosegur user = scoringService.getUsuarioUsuarioSegurForUsername(usuarioCorreo.getUsername(), usuarioCorreo.getCorreo());	
									if(user != null){
										SolicitudUsuarioDerivada sud = null;// scoringService.getSolicitudUsuarioDerivacionForSolicitudIpPersonal(solicitud.getId().getNumSolicitud(), user.getIdPersonal());
										if(sud == null){
											Long numero = scoringService.getSolicitudUsuarioDerivacionMaximo();
											sud = new SolicitudUsuarioDerivada();
											sud.setSystemId(numero);
											sud.setIdSolicitud(solicitud.getId().getNumSolicitud());
											sud.setEstado(estadoAux);
											sud.setFechaHora(new Date());
											sud.setUsuario(user);
											sud.setConfirmacionObligatoria(usuarioCorreo.getConfirmar());
											sud.setConfirmacion(null);
											sud.setCodEstadoDerivada(estadoAux.getCodEstado());
											log.debug("antes de deriva al usuario #0", usuarioCorreo.getNombre());
											boolean exitoingreso = scoringService.persitSolicitudUsuarioDerivacion(sud);
											log.debug("despues de deriva al usuario #0", usuarioCorreo.getNombre());
											log.debug(exitoingreso);
											sud = null;
										}
									}
								}	
							}							
							
							
							if(listaCorreos != null){
								for(UsuarioCorreoDTO ucdto : listaCorreos){
									if(ucdto != null && ucdto.getAlias() != null && ucdto.getCorreoElectronico() != null && !((ucdto.getAlias().trim()).toLowerCase()).equals(solicitud.getCodEmisor().trim().toLowerCase())){
										if(!ucdto.getAlias().equals("Especial")){
											log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getAlias().trim(), ucdto.getCorreoElectronico().trim());
											Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getAlias().trim(), ucdto.getCorreoElectronico().trim());
											if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
												if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
													ultimaListaCorreoPrueba.add(usuarioAux);	
													usuarioAux = new Usuariosegur();
												}												
											}
										}else{
											Usuariosegur especial = new Usuariosegur();
											especial.setNombre(ucdto.getNombreUsuario());
											especial.setCorreo(ucdto.getCorreoElectronico());
											ultimaListaCorreoPrueba.add(especial);
											especial = null;
										}
									}
								}
							}							
						}
						
						/*eliminar esto, cuando se establaque la solucion*/
						Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
						if(emisorCorreo != null){
							ultimaListaCorreoPrueba.add(emisorCorreo);
							emisorCorreo = null;
						}
						Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
						if(correoAdministrador != null){
							ultimaListaCorreoPrueba.add(correoAdministrador);
							correoAdministrador = null;
						}	
						
					}catch (Exception e) {
						log.error("Error, al hacer el proceso de derivacion #0", e.getMessage());
						FacesMessages.instance().add(Severity.ERROR,"Se√±or usuario vuelva a consultar la solicitud ");
						this.habilitaMensajeDerivacion = true;	
						return;							
					}						
					
					
					boolean exito = scoringService.mergerSolicitud(solicitud);
					boolean exitoVenta = scoringService.mergerSolicitudOtrasSolicitudes(solicitudOtra);
					entityManager.refresh(solicitud);
					entityManager.refresh(solicitudOtra);
					if(exito == true && exitoVenta == true){

						Locale locale = new Locale("es","CL");
						NumberFormat numberFormatter;
						numberFormatter = NumberFormat.getNumberInstance(locale);						
						if(analisisAprobacion!=null && analisisAprobacion.equals("Analisis")){
							this.mensajeGlogal = "Se ha derivado a analisis la solicitud N¬∞ "+ solicitud.getId().getNumSolicitud();
							estadoAux = scoringService.obtenerEstado("B");
						}else{
							this.mensajeGlogal = "Se ha derivado a aprobaci√≥n la solicitud N¬∞ "+ solicitud.getId().getNumSolicitud();
							estadoAux = scoringService.obtenerEstado("SA");
						}
						List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
						if(listaFileUploadedDTOs != null && listaFileUploadedDTOs.size() != 0){
							for(FileUploadedDTO archivo :listaFileUploadedDTOs){
							   try {							
									OutputStream ostream = null;
									String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
									nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);	
									
									String url = "archivosRespuesta"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
									
									//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
									ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
									log.debug("url #0",archivo.getUploadItem().getContentType());
									IOUtils.copyStream(ostream, istream);
									ostream.flush();
									ostream.close();
									istream.close();
									//guardar datos en la BD
									ArchivoAdjunto archivoAux = new ArchivoAdjunto();
									archivoAux.setSolicitud(solicitud);
									archivoAux.setUrl(url);
									archivoAux.setUbicacion("");
									archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
									archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
									archivoAux.setUsuario(usuarioLogueado);	
									archivoAux.setFechaCreacion(new Date());
									entityManager.persist(archivoAux);
									entityManager.flush();
									ConceptoDTO objetoAux = new ConceptoDTO();
									objetoAux.setNombreArchivo(nombreArchivo);
									objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
									listaArchivoGuardadoResp.add(objetoAux);
									objetoAux = null;
									
								} catch (FileNotFoundException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}
								catch (IOException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}catch (Exception e) {
									e.printStackTrace();
								}							
							}	
						}
						
						List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
						
						if(listaCorreoAnaDer != null){
							/*setando los varlores del dto para el correo*/
							ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
							contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
							if(this.aprobarRechazar != null &&  this.mensajeAprobacionSolicitud != null){
								contenidoEmail.setObservacionEjecutivo("opini√≥n:"+this.aprobarRechazar +" Observaci√≥n:"+this.mensajeAprobacionSolicitud);
							}
							
							if(analisisAprobacion!=null && analisisAprobacion.equals("Analisis")){
								contenidoEmail.setColor("AZUL");
								contenidoEmail.setTituloRespuesta("Derivada a an√°lisis solicitud ");
								contenidoEmail.setAccion("Se ha derivado a analisis la solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
								contenidoEmail.setAccionRespuesta("");
							}else{
								contenidoEmail.setColor("AZUL");
								contenidoEmail.setTituloRespuesta("Derivada a aprobaci√≥n solicitud ");
								contenidoEmail.setAccion("Se ha derivado a aprobaci√≥n la solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
								contenidoEmail.setAccionRespuesta("");
							}
							
							contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
							if(this.aprobarRechazar.equals("Aprobar")){
								contenidoEmail.setDesicionEjecutivo("Aprobada");
							}else{
								contenidoEmail.setDesicionEjecutivo("Rechazada");
							}
							contenidoEmail.setObservacionRespuesta(this.mensajeAnalisisAprobacion);
							contenidoEmail.setObservacionEjecutivo(this.mensajeAprobacionSolicitud);
							contenidoEmail.setOpcionFinal(1);							
							contenidoEmail.setSolicitud(solicitud);
							
							/*setando los varlores del dto para el correo*/
							StringBuffer rutNombre = new StringBuffer();
							rutNombre.append(cliente.getRut());
							rutNombre.append(" / ");
							rutNombre.append(modificarTexto(cliente.getRazonSocial()));
							contenidoEmail.setRutNombre(rutNombre.toString());
							contenidoEmail.setSoloNombre(solicitud.getNomCliente());
							contenidoEmail.setCanalVenta(modificarTexto(solicitud.getCanal()));
																			
							
							/* creacion de lista */
							List<ProrrogaDTO> listaProrrogasAux = new ArrayList<ProrrogaDTO>(0);
							ProrrogaDTO obejtoProrroga =  null;
							for(LcredSolicitudProrroga docto : listaProrrogas){
								if(docto != null){
								   obejtoProrroga = new ProrrogaDTO();
								   obejtoProrroga.setNumeroDocto(docto.getId().getNroCheque());
								   obejtoProrroga.setMontoFormateado(numberFormatter.format(docto.getId().getMonto()));
								   obejtoProrroga.setMotivoProrroga(this.motivoProrroga);
								   obejtoProrroga.setFechaVencicmiento(docto.getId().getVencActual());
								   obejtoProrroga.setFechaSolicitado(docto.getId().getVencNuevo());
								   listaProrrogasAux.add(obejtoProrroga);
								}
							}									
							
							
							Sucursal suc = obtenerObjetoSucursal(solicitud.getCodSucursal());
							if(suc != null){
								contenidoEmail.setSucursal(suc.getDescripcion());
							}else{
								contenidoEmail.setSucursal(solicitud.getCodSucursal());
							}
							
							UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
							if(ususarioEmisor != null){
								contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
							}else{
								contenidoEmail.setEmisor(solicitud.getCodEmisor());
							}	
							
							contenidoEmail.setTipoSolicitud("Prorroga de Cheque");
							contenidoEmail.setTipoProrroga("Prorroga.");
							contenidoEmail.setMotivoProrroga(this.motivoProrroga);
							
							
						    /*datos de archivos */
							contenidoEmail.setListaArchivos(listaArchivoGuardado);
							contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
							contenidoEmail.setListaObservaciones(listaObservaciones);
							
							/*datos de prorrogas*/
							contenidoEmail.setListaProrrogas(listaProrrogasAux);
							contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);							
							try{
								if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
									emailAlerta.enviarSolicitudRespuestaProrroga(contenidoEmail);	
								}	
							}catch (Exception e) {
								log.debug("paso por el error #0"+ e.getMessage());
							}	
						}	
						
						
						LcredEstado estado = null;
						if(analisisAprobacion!=null && analisisAprobacion.equals("Analisis")){
							 estado = ObtenerEstadoSolictud("B");
								insertHitos(solicitud, estado, "RESPUESTA", cantidad);
								entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
								             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
								entityManager.flush();
								insertarLogs(solicitud, 13);
						}else{
							estado = ObtenerEstadoSolictud("SA");
							insertHitos(solicitud, estado, "RESPUESTA", cantidad);
							entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
							             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
							entityManager.flush();	
							insertarLogs(solicitud, 14);
						}
					
				}	
			}
		   }
		}catch (Exception e) {
			log.error("Error al devolver la solicitud #0", e.getMessage());
		}
		return ;			
		
	}
	public void cerrarAnalizarToDerivar(){
		this.analisisAprobacion= null;
		this.mensajeAnalisisAprobacion = null;
		this.listaCorreoAnaDer = new ArrayList<SolicitudUsuarioCorreo>(0);
		this.listaDescripcionUsuariosCorreos = new ArrayList<SolicitudUsuarioCorreo>(0);
		this.listaCorreoSeleccionado = new ArrayList<SolicitudUsuarioCorreo>(0);
	}
	public void obtenerMotivoRechazo(){
		if(this.motivoRechazo != null){
			log.debug("El motivo de rechazo  seleccionado es el siguiente #0", this.motivoRechazo.getDesRechazo());
		}
	}

	/* agregar usuario correo*/
	public void agregarMotivoRechazoListaRechazo(){
		if(this.listaMotivosRechazosSeleccionado != null && this.listaMotivosRechazosSeleccionado.size() > 0){
			for(LcredMotivoRechazo lmr : this.listaMotivosRechazosSeleccionado){
				if(listaMotivosRechazosAgregados.contains(lmr)){
					log.debug(this.motivoRechazo.getDesRechazo().toLowerCase());
				}else{
					listaMotivosRechazosAgregados.add(lmr);
					this.motivoRechazo = null;
					this.mensajeExplicativo = null;
				}				
			}
			this.listaMotivosRechazosSeleccionado.clear();
			
		}else{
			setMensajeExplicativo("Debe seleccionar por lo menos un motivo de rechazo.");
			FacesMessages.instance().add(Severity.WARN,"Debe seleccionar por lo menos un motivo de rechazo.");
		}
	}
	public void agregarTodosMotivoRechazosListaAnalisisDerivacion(){
		for(LcredMotivoRechazo u: listaMotivosRechazos){
			if(!listaMotivosRechazosAgregados.contains(u)){
				listaMotivosRechazosAgregados.add(u);
			}
		}	
	}
	public void cerrarMotivoRechazo(){
		this.setMotivoRechazo(null);
		this.listaMotivosRechazos = null;
		this.listaMotivosRechazosAgregados = new ArrayList<LcredMotivoRechazo>(0);
		this.mensajeAnalisisAprobacion = null;
		if(this.listaMotivosRechazos == null){
			this.listaMotivosRechazos = scoringService.getMotivosRechazos();
		}
		
	}
	public void eliminarTodosMotivoRechazosLista(){
		this.setMotivoRechazo(null);
		this.listaMotivosRechazos = null;
		this.listaMotivosRechazosSeleccionado = new ArrayList<LcredMotivoRechazo>(0);
		this.listaMotivosRechazosAgregados = new ArrayList<LcredMotivoRechazo>(0);
		if(this.listaMotivosRechazos == null){
			this.listaMotivosRechazos = scoringService.getMotivosRechazos();
		}		
	}	
	public void eliminarMotivoRechazo(LcredMotivoRechazo motivoRechazoAux){
		if(motivoRechazoAux != null){
			listaMotivosRechazosAgregados.remove(motivoRechazoAux);
		}
	}	
	public void ingresoRechazoSolicitud(){

		if(this.solicitud != null && this.tipoSolicitudAux != null){
			log.debug("solicitud #0 tipo de solicitud #1", solicitud.getId().getNumSolicitud(), tipoSolicitudAux.getCodTipoSolicitud());
			 if(usuarioSegur != null && (usuarioSegur.getAlias().toLowerCase()).equals("administrador")){
				 log.debug("SIN RESTRINCCION ADMINISTRADOR");
			 }else{
				if(solicitud != null){
					if(solicitud.getEstado().equals("P")){
						this.mensajeGlogal = "La solicitud esta procesada y/o aprobada.";
						return;
					}else if(solicitud.getEstado().equals("I") || solicitud.getEstado().equals("DR") || solicitud.getEstado().equals("DC")){
						this.mensajeGlogal = "Solicitud debe estar en an√°lisis";
						return;
					}else{
						this.mensajeGlogal = null;
					}
				}
			 }
			
			if(this.listaUsuarioCorreoagregados == null){
				this.mensajeGlogal = "Debe ingresar los usuarios para el envio de correo.";
				return;
			}else{
				if(this.listaUsuarioCorreoagregados.size() == 0 ){
					this.mensajeGlogal = "Debe ingresar los usuarios para el envio de correo.";
					return ;
				}
			}
		
			
			if(usuarioSegur != null && (usuarioSegur.getAlias().toLowerCase()).equals("administrador")){
				 log.debug("SIN RESTRINCCION ADMINISTRADOR");

			}else{
				 Long existe = scoringService.getEvaluarSolicitudAprobacionAnalisisEvaluarTodosObligatotios(solicitud.getId().getNumSolicitud());
				 if(existe != null){
					this.mensajeGlogal = "Estimado, falta "+ existe +" usuarios que aprueben y/o rechacen la solicitud.";
					return;					 
				 }else{
					 this.mensajeGlogal = null; 
				 }
				if(this.observacionesFinales ==null){
					this.mensajeGlogal = "Debe ingresar una observaci√≥n final.";
					return;
				}else{
					if("".equals(this.observacionesFinales)){
						this.mensajeGlogal = "Debe ingresar una observaci√≥n final.";
						return ;
					}
				}
			}
			
			
			this.mensajeGlogal = null;
			this.setMotivoRechazo(null);
			if(this.mensajeGlogal == null){
				this.setMensajeRechazoSolicitud(this.observacionesFinales);
			}
			this.listaMotivosRechazosAgregados = new ArrayList<LcredMotivoRechazo>(0);
			this.listaMotivosRechazosSeleccionado = new ArrayList<LcredMotivoRechazo>(0);
			if(this.listaMotivosRechazos == null){
				this.listaMotivosRechazos = scoringService.getMotivosRechazos();
			}
		}else{
			this.mensajeGlogal = "La solicitud no tiene asociada el tipo de solicitud...";
		}
	}
	public void rechazarSolicitudes(){
		this.habilitaMensajeDerivacion = false;
		
		try{
			/*validaciones del formaulario de rechazo*/
			if(this.listaMotivosRechazosAgregados == null){
				FacesMessages.instance().add(Severity.ERROR,"Debe seleccionar y agregar por lo menos un motivo de rechazo.");
				this.habilitaMensajeDerivacion = true;
				return;				
			}else{
				if(this.listaMotivosRechazosAgregados.size() == 0){
					FacesMessages.instance().add(Severity.ERROR,"Debe seleccionar y agregar por lo menos un motivo de rechazo.");
					this.habilitaMensajeDerivacion = true;	
					return;						
				}
			}
			
			if(this.mensajeRechazoSolicitud == null){
				FacesMessages.instance().add(Severity.ERROR,"Debe ingresar alguna observaciones de rechazo la solicitud.");
				this.habilitaMensajeDerivacion = true;
				return;				
			}else{
				if("".equals(this.mensajeRechazoSolicitud)){
					FacesMessages.instance().add(Severity.ERROR,"Debe ingresar alguna observaciones de rechazo la solicitud.");
					this.habilitaMensajeDerivacion = true;
					return;						
				}
			}			
			
			
			if(this.paginaIngreso == 11 || this.paginaIngreso == 12){
				if(this.solicitud != null && this.venta != null){
					solicitud.setEstado("R");
					boolean exitoVta = scoringService.mergerSolicitud(solicitud);
					venta.setStatusSolicitud("R");
					venta.setObservacionesFinal("Opini√≥n: Rechazar \n Observaci√≥n: "+this.mensajeRechazoSolicitud);
					boolean exitoVp = scoringService.mergerSolicitudVentaPuntual(venta);
					LcredEstado estadoAux = scoringService.obtenerEstado("R");
					
					if(estadoAux != null && exitoVta == true && exitoVp == true){
						SolicitudAprobaRechaza sar = new SolicitudAprobaRechaza();
						sar.setAprobador(usuarioCargoAux.getUsuario());
						sar.setCargo(usuarioCargoAux.getCargo());
						sar.setEstado(estadoAux);
						sar.setIdSolicitud(solicitud.getId().getNumSolicitud());
						sar.setObservaciones(this.mensajeRechazoSolicitud);
						boolean exito = scoringService.persistSolicitudAprobaRechazo(sar);
						
						
						
						if(exito == true){
							this.mensajeGlogal = "Se Rechaza solicitud N¬∞ "+ solicitud.getId().getNumSolicitud();
							/*se agrega la observaciones final de una aprobacion final */
							StringBuffer primeraCadena = new StringBuffer();
							LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
							Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
							if(correlativo != null){
								id.setCorrelativo(correlativo);
								id.setFecha(new Date());
								id.setHora(new Date());
								id.setNumSolicitud(solicitud.getId().getNumSolicitud());
								id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
								primeraCadena.append("opini√≥n: \n ");
								primeraCadena.append("Rechazar");
								id.setObservacion(primeraCadena.toString());
								id.setUsuario(usuarioSegur.getAlias());
								LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
								obser.setId(id);
								scoringService.persistSolicitudObservaciones(obser);
								insertarLogs(solicitud, 5);
							}						
							/*se agrega la observaciones final de una aprobacion final */
							StringBuffer segundaCadena = new StringBuffer();
							LcredSolicitudObservacionesId idAux = new LcredSolicitudObservacionesId();
							Long correlativo1 = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
							if(correlativo1 != null){
								idAux.setCorrelativo(correlativo1);
								idAux.setFecha(new Date());
								idAux.setHora(new Date());
								idAux.setNumSolicitud(solicitud.getId().getNumSolicitud());
								idAux.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
								segundaCadena.append("Observaci√≥n: \n ");
								segundaCadena.append(this.mensajeRechazoSolicitud);
								idAux.setObservacion(segundaCadena.toString());
								idAux.setUsuario(usuarioSegur.getAlias());
								LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
								obser.setId(idAux);
								scoringService.persistSolicitudObservaciones(obser);
								insertarLogs(solicitud, 5);
							}						
							
							/*ingersar un registro  de  usurio derivada*/
							LcredEstado estadoAuxi = ObtenerEstadoSolictud("RE");
							Long numero = scoringService.getSolicitudUsuarioDerivacionMaximo();
							SolicitudUsuarioDerivada sud = new SolicitudUsuarioDerivada();
							sud.setSystemId(numero);
							sud.setIdSolicitud(solicitud.getId().getNumSolicitud());
							sud.setEstado(estadoAuxi);
							sud.setFechaHora(new Date());
							sud.setUsuario(usuarioLogueado);
							sud.setConfirmacionObligatoria(true);
							sud.setConfirmacion(true);
							sud.setCodEstadoDerivada(estadoAuxi.getCodEstado());
							boolean exitoingreso = scoringService.persitSolicitudUsuarioDerivacion(sud);
							log.debug(exitoingreso);									
							
							
							
							List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
							if(listaFileUploadedDTOs != null && listaFileUploadedDTOs.size() != 0){
								for(FileUploadedDTO archivo :listaFileUploadedDTOs){
								   try {							
										OutputStream ostream = null;
										String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
										nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);	
										
										String url = "archivosRespuesta"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
										
										//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
										ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
										log.debug("url #0",archivo.getUploadItem().getContentType());
										IOUtils.copyStream(ostream, istream);
										ostream.flush();
										ostream.close();
										istream.close();
										//guardar datos en la BD
										ArchivoAdjunto archivoAux = new ArchivoAdjunto();
										archivoAux.setSolicitud(solicitud);
										archivoAux.setUrl(url);
										archivoAux.setUbicacion("");
										archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
										archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
										archivoAux.setUsuario(usuarioLogueado);	
										archivoAux.setFechaCreacion(new Date());
										entityManager.persist(archivoAux);
										entityManager.flush();
										ConceptoDTO objetoAux = new ConceptoDTO();
										objetoAux.setNombreArchivo(nombreArchivo);
										objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
										listaArchivoGuardadoResp.add(objetoAux);
										objetoAux = null;
										
									} catch (FileNotFoundException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}
									catch (IOException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}catch (Exception e) {
										e.printStackTrace();
									}							
								}	
							}
							
							List<ConceptoDTO> listaMotivoRechazo = new ArrayList<ConceptoDTO>();
							if(listaMotivosRechazosAgregados != null){
								for(LcredMotivoRechazo mr : listaMotivosRechazosAgregados){
									SolicitudMotivoRechazo smr = new SolicitudMotivoRechazo();
									smr.setIdSolicitud(solicitud.getId().getNumSolicitud());
									smr.setRechazo(mr);
									boolean ingresoMotivo = scoringService.persistSolicitudMotivoRechazo(smr);
									if(ingresoMotivo){
										ConceptoDTO motivo = new ConceptoDTO();
										motivo.setCodigo(mr.getCodRechazo());
										motivo.setDescripcion(mr.getDesRechazo());
										listaMotivoRechazo.add(motivo);
									}
								}
							}
							
							List<ConceptoDTO> lista = scoringService.getConceptoMonto(solicitud.getId().getNumSolicitud());
							List<ConceptoDTO> listaProducto = scoringService.getProductos(solicitud.getId().getNumSolicitud());
							List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
							
							if(listaUsuarioCorreoagregados != null){
								Locale locale = new Locale("es","CL");
								/*setando los varlores del dto para el correo*/
								ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
								contenidoEmail.setTituloRespuesta("Respuesta solicitud ");
								contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
								contenidoEmail.setColor("ROJO");
								contenidoEmail.setAccion("Se Rechaza la Solicitud "+ solicitud.getId().getNumSolicitud());
								contenidoEmail.setAccionRespuesta("");
								contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
								contenidoEmail.setRespuestaFinalSolicitud(this.mensajeRechazoSolicitud);
								contenidoEmail.setOpcionFinal(3);
								contenidoEmail.setSolicitud(solicitud);
								NumberFormat numberFormatter;
								StringBuffer rutNombre = new StringBuffer();
								rutNombre.append(cliente.getRut());
								rutNombre.append(" / ");
								rutNombre.append(modificarTexto(cliente.getRazonSocial()));
								contenidoEmail.setRutNombre(rutNombre.toString());
								contenidoEmail.setSoloNombre(cliente.getRazonSocial());
								contenidoEmail.setCanalVenta(cliente.getCanalVenta());
								contenidoEmail.setSucursal(sucursal.getDescripcion());
								UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
								if(ususarioEmisor != null){
									contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
								}else{
									contenidoEmail.setEmisor(solicitud.getCodEmisor());
								}
								
								contenidoEmail.setTipoSolicitud("Venta Puntual");
								contenidoEmail.setTipoVentas(modificarTexto(tipoSolicitudAux.getDesTipoSolicitud()));
								
								numberFormatter = NumberFormat.getNumberInstance(locale);
								log.debug(numberFormatter.format(venta.getMontoInicial()));
								
								contenidoEmail.setMontoMasIva(numberFormatter.format(venta.getMontoInicial()));
								contenidoEmail.setMontoPie(numberFormatter.format(venta.getMontoPieInicial()));
								contenidoEmail.setMargenNegocio(String.valueOf(numberFormatter.format(this.margenGlogal)));
								contenidoEmail.setFormaPago(this.formaPago);
								contenidoEmail.setMotivoCompra(this.motivoCompra);
								
								contenidoEmail.setPeakCredito(numberFormatter.format(expoRiesgoKh.getPeakCredito()));
								if("VIG".equals(cliente.getVigenciaSeguro().trim())){
									contenidoEmail.setLineaSeguro(numberFormatter.format(expoRiesgoKh.getMontoAsegurado()));
								}else{
									contenidoEmail.setLineaSeguro(numberFormatter.format(0));
								}								
								//contenidoEmail.setLineaSeguro(numberFormatter.format(clienteTarget.getMontoSeguro()));
								contenidoEmail.setRisgoKupfer(numberFormatter.format(expoRiesgoKh.getMontoRiesgoKupfer()));
								contenidoEmail.setListaProductos(listaProducto);
								contenidoEmail.setListaConceptoMontos(lista);
								contenidoEmail.setListaArchivos(listaArchivoGuardado);
								contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
								contenidoEmail.setListaMotivosRechazos(listaMotivoRechazo);
								contenidoEmail.setListaObservaciones(listaObservaciones);
								
								List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
								if(listaUsuarioCorreoagregados != null){
									for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
										if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !ucdto.getUsername().equals(usuarioLogueado.getAlias().trim()) ){
											log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
												if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
													ultimaListaCorreoPrueba.add(usuarioAux);	
													usuarioAux = new Usuariosegur();
												}													
											}
										}
									}
								}

								/*eliminar esto, cuando se establaque la solucion*/
								Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
								if(emisorCorreo != null){
									if(!ultimaListaCorreoPrueba.contains(emisorCorreo)){
										ultimaListaCorreoPrueba.add(emisorCorreo);
									}
									emisorCorreo = null;
								}
								Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
								if(correoAdministrador != null){
									ultimaListaCorreoPrueba.add(correoAdministrador);
									correoAdministrador = null;
								}
								
								contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);								
								try{
									if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
										emailAlerta.enviarRespuestaSolicitudVenta(contenidoEmail);	
									}	
								}catch (Exception e) {
									log.debug("paso por el error #0"+ e.getMessage());
								}

							}
							
							insertarLogs(solicitud, 11);
							LcredEstado estado = ObtenerEstadoSolictud("R");
							insertHitos(solicitud, estado, "NADA", 0);
							entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
							             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
							entityManager.flush();
							this.habilitaMensajeDerivacion = false;
							entityManager.refresh(solicitud);
							
							evaluarDerivaciones(solicitud.getId().getNumSolicitud());
						}
					}
				}
			}else if(this.paginaIngreso == 21 || this.paginaIngreso == 22 || this.paginaIngreso == 23){
				if(solicitud != null && credito != null){
					solicitud.setEstado("R");
					boolean exito = scoringService.mergerSolicitud(solicitud);
					credito.setStatusSolicitud("R");
					credito.setObservacionesFinal("Opini√≥n: Rechazar \n Observaci√≥n: "+this.mensajeRechazoSolicitud);
					boolean exitoCred = scoringService.mergerSolicitudLineaCredito(credito);
					LcredEstado estadoAux = scoringService.obtenerEstado("R");					
					entityManager.refresh(solicitud);
					entityManager.refresh(credito);
					
					if(exito == true && exitoCred == true){
						this.mensajeGlogal = "Se rechaza la solictud N¬∞ "+ solicitud.getId().getNumSolicitud();

						/*se agrega la observaciones final de una aprobacion final */
						StringBuffer primeraCadena = new StringBuffer();
						LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
						Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							id.setCorrelativo(correlativo);
							id.setFecha(new Date());
							id.setHora(new Date());
							id.setNumSolicitud(solicitud.getId().getNumSolicitud());
							id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							primeraCadena.append("opini√≥n: \n ");
							primeraCadena.append("Rechazar");
							id.setObservacion(primeraCadena.toString());
							id.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(id);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}						
						/*se agrega la observaciones final de una aprobacion final */
						StringBuffer segundaCadena = new StringBuffer();
						LcredSolicitudObservacionesId idAux = new LcredSolicitudObservacionesId();
						Long correlativo1 = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo1 != null){
							idAux.setCorrelativo(correlativo1);
							idAux.setFecha(new Date());
							idAux.setHora(new Date());
							idAux.setNumSolicitud(solicitud.getId().getNumSolicitud());
							idAux.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							segundaCadena.append("Observaci√≥n: \n");
							segundaCadena.append(this.mensajeRechazoSolicitud);
							idAux.setObservacion(segundaCadena.toString());
							idAux.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(idAux);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}						
						
						/*ingersar un registro  de  usurio derivada*/
						LcredEstado estadoAuxi = ObtenerEstadoSolictud("RE");
						Long numero = scoringService.getSolicitudUsuarioDerivacionMaximo();
						SolicitudUsuarioDerivada sud = new SolicitudUsuarioDerivada();
						sud.setSystemId(numero);
						sud.setIdSolicitud(solicitud.getId().getNumSolicitud());
						sud.setEstado(estadoAuxi);
						sud.setFechaHora(new Date());
						sud.setUsuario(usuarioLogueado);
						sud.setConfirmacionObligatoria(true);
						sud.setConfirmacion(true);
						sud.setCodEstadoDerivada(estadoAuxi.getCodEstado());
						boolean exitoingreso = scoringService.persitSolicitudUsuarioDerivacion(sud);
						log.debug(exitoingreso);		
						
						
						SolicitudAprobaRechaza sar = new SolicitudAprobaRechaza();
						sar.setAprobador(usuarioCargoAux.getUsuario());
						sar.setCargo(usuarioCargoAux.getCargo());
						sar.setEstado(estadoAux);
						sar.setIdSolicitud(solicitud.getId().getNumSolicitud());
						sar.setObservaciones(this.mensajeRechazoSolicitud);
						boolean exitoAR = scoringService.persistSolicitudAprobaRechazo(sar);
						
						
						
						
						if(exitoAR == true){
							Locale locale = new Locale("es","CL");
							NumberFormat numberFormatter;
							numberFormatter = NumberFormat.getNumberInstance(locale);
							this.mensajeGlogal = "Se Rechaza solicitud N¬∞ "+ solicitud.getId().getNumSolicitud();
							List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 

							if(listaFileUploadedDTOs != null && listaFileUploadedDTOs.size() != 0){
								for(FileUploadedDTO archivo :listaFileUploadedDTOs){
								   try {							
										OutputStream ostream = null;
										String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
										nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);	
										
										String url = "archivosRespuesta"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
										
										//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
										ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
										log.debug("url #0",archivo.getUploadItem().getContentType());
										IOUtils.copyStream(ostream, istream);
										ostream.flush();
										ostream.close();
										istream.close();
										//guardar datos en la BD
										ArchivoAdjunto archivoAux = new ArchivoAdjunto();
										archivoAux.setSolicitud(solicitud);
										archivoAux.setUrl(url);
										archivoAux.setUbicacion("");
										archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
										archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
										archivoAux.setUsuario(usuarioLogueado);	
										archivoAux.setFechaCreacion(new Date());
										entityManager.persist(archivoAux);
										entityManager.flush();
										ConceptoDTO objetoAux = new ConceptoDTO();
										objetoAux.setNombreArchivo(nombreArchivo);
										objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
										listaArchivoGuardadoResp.add(objetoAux);
										objetoAux = null;
										
									} catch (FileNotFoundException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}
									catch (IOException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}catch (Exception e) {
										e.printStackTrace();
									}							
								}	
							}	
							
							List<ConceptoDTO> listaMotivoRechazo = new ArrayList<ConceptoDTO>();
							if(listaMotivosRechazosAgregados != null){
								for(LcredMotivoRechazo mr : listaMotivosRechazosAgregados){
									SolicitudMotivoRechazo smr = new SolicitudMotivoRechazo();
									smr.setIdSolicitud(solicitud.getId().getNumSolicitud());
									smr.setRechazo(mr);
									boolean ingresoMotivo = scoringService.persistSolicitudMotivoRechazo(smr);
									if(ingresoMotivo){
										ConceptoDTO motivo = new ConceptoDTO();
										motivo.setCodigo(mr.getCodRechazo());
										motivo.setDescripcion(mr.getDesRechazo());
										listaMotivoRechazo.add(motivo);
										
									}
								}
							}							
							
							List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
							
							if(listaUsuarioCorreoagregados != null){
								/* sacar los datos concecptos involucrados*/
								List<SolicitudConceptosNegocioLC> listaConceptoInvolucarado = scoringService
										.getListarSolicitudConceptosNegocioLC(solicitud.getId().getNumSolicitud());	
								
								/*crear lista de concepto de involucrados*/
								List<ConceptoDTO> conceptosInvolucrado = new ArrayList<ConceptoDTO>(0);
								if(listaConceptoInvolucarado != null){
									for(SolicitudConceptosNegocioLC scn : listaConceptoInvolucarado){
										ConceptoDTO ci = new ConceptoDTO();
										ci.setDescripcion(scn.getConceptosNegocio().getDescripcion());
										ci.setMontoFormateado(numberFormatter.format(scn.getMonto()));
										conceptosInvolucrado.add(ci);
										ci=null;
									}
								}
								/*setando los varlores del dto para el correo*/
								ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
								contenidoEmail.setTituloRespuesta("Respuesta solicitud ");
								contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
								contenidoEmail.setColor("ROJO");
								contenidoEmail.setAccion("Se Rechaza la Solicitud "+ solicitud.getId().getNumSolicitud());
								contenidoEmail.setAccionRespuesta("");
								contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
								contenidoEmail.setRespuestaFinalSolicitud(this.mensajeRechazoSolicitud);
								contenidoEmail.setOpcionFinal(3);								
								contenidoEmail.setSolicitud(solicitud);
								
								
								/*setando los varlores del dto para el correo*/
								StringBuffer rutNombre = new StringBuffer();
								rutNombre.append(cliente.getRut());
								rutNombre.append(" / ");
								rutNombre.append(modificarTexto(cliente.getRazonSocial()));
								contenidoEmail.setRutNombre(rutNombre.toString());
								contenidoEmail.setSoloNombre(solicitud.getNomCliente());
								contenidoEmail.setCanalVenta(modificarTexto(solicitud.getCanal()));

								Sucursal suc = obtenerObjetoSucursal(solicitud.getCodSucursal());
								if(suc != null){
									contenidoEmail.setSucursal(suc.getDescripcion());
								}else{
									contenidoEmail.setSucursal(solicitud.getCodSucursal());
								}
								
								UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
								if(ususarioEmisor != null){
									contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
								}else{
									contenidoEmail.setEmisor(modificarTexto(solicitud.getCodEmisor()));
								}
								contenidoEmail.setTipoSolicitud("Linea de Cr√©dito.");
								contenidoEmail.setTipoLineaCredito(tipoSolicitudAux.getDesTipoSolicitud());

								if("VIG".equals(solicitud.getVigSeguro().trim())){
									contenidoEmail.setLineaSeguroActual(numberFormatter.format(expoRiesgoKh.getMontoAsegurado()));
								}else{
									contenidoEmail.setLineaSeguroActual(numberFormatter.format(0));
								}
								
								if(this.modificarCredito){
									log.debug(numberFormatter.format(this.montoLineaCreditoNuevo));
									contenidoEmail.setMontoSolicitado(numberFormatter.format(this.montoLineaCreditoNuevo));
									contenidoEmail.setCondicionRiesgo(this.clsRiesgoNuevo);
									contenidoEmail.setCondicionPago(this.cPagoNuevo);
									
								}else{
									contenidoEmail.setMontoSolicitado(numberFormatter.format(this.montoCredito));
									contenidoEmail.setCondicionRiesgo(this.clsRiesgo);
									contenidoEmail.setCondicionPago(this.cPago);
								}
								
								contenidoEmail.setProyecto(credito.getDpDescripcionProyecto());
								contenidoEmail.setMontoProyecto(credito.getDpMonto());
								contenidoEmail.setPlazoEjecucion(credito.getDpPlazoEjecucion());
								contenidoEmail.setPotencialCompra(credito.getDpPotencialCompra());
								
								
								List<String> listaSocios = new ArrayList<String>(0);
								if(credito.getDpSocios() != null){
									String[] array = credito.getDpSocios().split(",");
									if(array != null){
										for(String s : array){
											listaSocios.add(s);
										}
									}
								}
								
							    /*datos de lineas credito solCredito */
								contenidoEmail.setListaSocios(listaSocios);
								contenidoEmail.setListaConceptoMontos(conceptosInvolucrado);
								contenidoEmail.setListaArchivos(listaArchivoGuardado);
								contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
								contenidoEmail.setListaMotivosRechazos(listaMotivoRechazo);
								contenidoEmail.setListaObservaciones(listaObservaciones);
								
								List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
								if(listaUsuarioCorreoagregados != null){
									for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
										if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !ucdto.getUsername().equals(usuarioLogueado.getAlias().trim()) ){
											log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
												if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
													ultimaListaCorreoPrueba.add(usuarioAux);	
													usuarioAux = new Usuariosegur();
												}														
											}
										}
									}
								}	
								
								/*eliminar esto, cuando se establaque la solucion*/
								Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
								if(emisorCorreo != null){
									if(!ultimaListaCorreoPrueba.contains(emisorCorreo)){
										ultimaListaCorreoPrueba.add(emisorCorreo);
									}
									emisorCorreo = null;
								}
								Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
								if(correoAdministrador != null){
									ultimaListaCorreoPrueba.add(correoAdministrador);
									correoAdministrador = null;
								}								
								
								contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);										
								try{
									if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
										emailAlerta.enviarRespuestaSolicitudLinea(contenidoEmail);	
									}	
								}catch (Exception e) {
									log.debug("paso por el error #0"+ e.getMessage());
								}		
							}								
						}
						
						insertarLogs(solicitud, 11);
						LcredEstado estado = ObtenerEstadoSolictud("R");
						insertHitos(solicitud, estado, "NADA", 0);
						entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
						             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
						entityManager.flush();
						this.habilitaMensajeDerivacion = false;
						entityManager.refresh(solicitud);
						
						evaluarDerivaciones(solicitud.getId().getNumSolicitud());
					}
				}	
			}else if(this.paginaIngreso == 31){/* rechazar  la solicitiudes condiciones */
				if(solicitud != null && condicion != null ){
					solicitud.setEstado("R");
					boolean exito = scoringService.mergerSolicitud(solicitud);
					condicion.setStatusSolicitud("R");
					condicion.setObservacionesFinal("Opini√≥n: Rechazar \n Observaci√≥n: "+this.mensajeRechazoSolicitud);
					boolean exitoCondicion = scoringService.mergerSolicitudCondiciones(condicion);
					LcredEstado estadoAux = scoringService.obtenerEstado("R");					
					entityManager.refresh(solicitud);
					entityManager.refresh(condicion);

					if(exito == true && exitoCondicion == true){
						/*se agrega la observaciones final de una aprobacion final */
						StringBuffer primeraCadena = new StringBuffer();
						LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
						Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							id.setCorrelativo(correlativo);
							id.setFecha(new Date());
							id.setHora(new Date());
							id.setNumSolicitud(solicitud.getId().getNumSolicitud());
							id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							primeraCadena.append("opini√≥n: \n ");
							primeraCadena.append("Rechazar");
							id.setObservacion(primeraCadena.toString());
							id.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(id);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}						
						/*se agrega la observaciones final de una aprobacion final */
						StringBuffer segundaCadena = new StringBuffer();
						LcredSolicitudObservacionesId idAux = new LcredSolicitudObservacionesId();
						Long correlativo1 = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo1 != null){
							idAux.setCorrelativo(correlativo1);
							idAux.setFecha(new Date());
							idAux.setHora(new Date());
							idAux.setNumSolicitud(solicitud.getId().getNumSolicitud());
							idAux.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							segundaCadena.append("Observaci√≥n: \n");
							segundaCadena.append(this.mensajeRechazoSolicitud);
							idAux.setObservacion(segundaCadena.toString());
							idAux.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(idAux);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}						
						
						/*ingersar un registro  de  usurio derivada*/
						LcredEstado estadoAuxi = ObtenerEstadoSolictud("RE");
						Long numero = scoringService.getSolicitudUsuarioDerivacionMaximo();
						SolicitudUsuarioDerivada sud = new SolicitudUsuarioDerivada();
						sud.setSystemId(numero);
						sud.setIdSolicitud(solicitud.getId().getNumSolicitud());
						sud.setEstado(estadoAuxi);
						sud.setFechaHora(new Date());
						sud.setUsuario(usuarioLogueado);
						sud.setConfirmacionObligatoria(true);
						sud.setConfirmacion(true);
						sud.setCodEstadoDerivada(estadoAuxi.getCodEstado());
						boolean exitoingreso = scoringService.persitSolicitudUsuarioDerivacion(sud);
						log.debug(exitoingreso);							
						
						
						SolicitudAprobaRechaza sar = new SolicitudAprobaRechaza();
						sar.setAprobador(usuarioCargoAux.getUsuario());
						sar.setCargo(usuarioCargoAux.getCargo());
						sar.setEstado(estadoAux);
						sar.setIdSolicitud(solicitud.getId().getNumSolicitud());
						sar.setObservaciones(this.mensajeRechazoSolicitud);
						boolean exitoAR = scoringService.persistSolicitudAprobaRechazo(sar);
						if(exitoAR == true){
							this.mensajeGlogal = "Se Rechaza solicitud N¬∞ "+ solicitud.getId().getNumSolicitud();
							List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 

							if(listaFileUploadedDTOs != null && listaFileUploadedDTOs.size() != 0){
								for(FileUploadedDTO archivo :listaFileUploadedDTOs){
								   try {							
										OutputStream ostream = null;
										String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
										nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);	
										
										String url = "archivosRespuestaCC"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
										//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
										ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
										log.debug("url #0",archivo.getUploadItem().getContentType());
										IOUtils.copyStream(ostream, istream);
										ostream.flush();
										ostream.close();
										istream.close();
										//guardar datos en la BD
										ArchivoAdjunto archivoAux = new ArchivoAdjunto();
										archivoAux.setSolicitud(solicitud);
										archivoAux.setUrl(url);
										archivoAux.setUbicacion("");
										archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
										archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
										archivoAux.setUsuario(usuarioLogueado);	
										archivoAux.setFechaCreacion(new Date());
										entityManager.persist(archivoAux);
										entityManager.flush();
										ConceptoDTO objetoAux = new ConceptoDTO();
										objetoAux.setNombreArchivo(nombreArchivo);
										objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
										listaArchivoGuardadoResp.add(objetoAux);
										objetoAux = null;
										
									} catch (FileNotFoundException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}
									catch (IOException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}catch (Exception e) {
										e.printStackTrace();
									}							
								}		
							}	
							
							List<ConceptoDTO> listaMotivoRechazo = new ArrayList<ConceptoDTO>();
							if(listaMotivosRechazosAgregados != null){
								for(LcredMotivoRechazo mr : listaMotivosRechazosAgregados){
									SolicitudMotivoRechazo smr = new SolicitudMotivoRechazo();
									smr.setIdSolicitud(solicitud.getId().getNumSolicitud());
									smr.setRechazo(mr);
									boolean ingresoMotivo = scoringService.persistSolicitudMotivoRechazo(smr);
									if(ingresoMotivo){
										ConceptoDTO motivo = new ConceptoDTO();
										motivo.setCodigo(mr.getCodRechazo());
										motivo.setDescripcion(mr.getDesRechazo());
										listaMotivoRechazo.add(motivo);
										
									}
								}
							}							
							
							List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
							
							
							if(listaUsuarioCorreoagregados != null){
								/*setando los varlores del dto para el correo*/
								ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
								contenidoEmail.setTituloRespuesta("Respuesta solicitud ");
								contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
								contenidoEmail.setColor("ROJO");
								contenidoEmail.setAccion("Se Rechaza la Solicitud "+ solicitud.getId().getNumSolicitud());
								contenidoEmail.setAccionRespuesta("");
								contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
								contenidoEmail.setRespuestaFinalSolicitud(this.mensajeRechazoSolicitud);
								contenidoEmail.setOpcionFinal(3);								
								contenidoEmail.setSolicitud(solicitud);
								
								
								StringBuffer rutNombre = new StringBuffer();
								rutNombre.append(cliente.getRut());
								rutNombre.append(" / ");
								rutNombre.append(modificarTexto(cliente.getRazonSocial()));
								contenidoEmail.setRutNombre(rutNombre.toString());
								contenidoEmail.setSoloNombre(cliente.getRazonSocial());
								contenidoEmail.setCanalVenta(modificarTexto(cliente.getCanalVenta()));
								
								Sucursal suc = obtenerObjetoSucursal(solicitud.getCodSucursal());
								if(suc != null){
									contenidoEmail.setSucursal(suc.getDescripcion());
								}else{
									contenidoEmail.setSucursal(solicitud.getCodSucursal());
								}
								
								UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
								if(ususarioEmisor != null){
									contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
								}else{
									contenidoEmail.setEmisor(solicitud.getCodEmisor());
								}							
								
								contenidoEmail.setTipoSolicitud("Cambio de Condiciones.");
								
								if(this.modificarCondicion){
									if(this.condicionRiesgoNew == true && this.condicionPagoNew == false){
										contenidoEmail.setTipoLineaCredito("Condiciones de Riesgo.");	
										contenidoEmail.setCondicionRiesgo(cliente.getClasificacionRiesgo());
										contenidoEmail.setCondicionPago("");
										contenidoEmail.setCondicionRiesgoNuevo(this.clsRiesgoNuevo);								
										contenidoEmail.setCondicionPagoNuevo("");
									
									}else if(this.condicionRiesgoNew == false && this.condicionPagoNew == true){
										contenidoEmail.setTipoLineaCredito("Condiciones de Pago.");
										contenidoEmail.setCondicionRiesgo("");
										contenidoEmail.setCondicionPago(cliente.getCondicionPago());
										contenidoEmail.setCondicionRiesgoNuevo("");								
										contenidoEmail.setCondicionPagoNuevo(this.cPagoNuevo);									
									
									}else if(this.condicionRiesgoNew == true && this.condicionPagoNew == true){
										contenidoEmail.setTipoLineaCredito("Condiciones "+ this.tipoSolicitudAux.getDesTipoSolicitud());
										contenidoEmail.setCondicionRiesgo(cliente.getClasificacionRiesgo());
										contenidoEmail.setCondicionPago(cliente.getCondicionPago());
										contenidoEmail.setCondicionRiesgoNuevo(this.clsRiesgoNuevo);								
										contenidoEmail.setCondicionPagoNuevo(this.cPagoNuevo);
									}								
								}else{
									
									if(this.condicionRiesgo == true && this.condicionPago == false){
										contenidoEmail.setTipoLineaCredito("Condiciones de Riesgo.");	
										contenidoEmail.setCondicionRiesgo(cliente.getClasificacionRiesgo());
										contenidoEmail.setCondicionPago("");
										contenidoEmail.setCondicionRiesgoNuevo(this.clsRiesgo);								
										contenidoEmail.setCondicionPagoNuevo("");
									
									}else if(this.condicionRiesgo == false && this.condicionPago == true){
										contenidoEmail.setTipoLineaCredito("Condiciones de Pago.");
										contenidoEmail.setCondicionRiesgo("");
										contenidoEmail.setCondicionPago(cliente.getCondicionPago());
										contenidoEmail.setCondicionRiesgoNuevo("");								
										contenidoEmail.setCondicionPagoNuevo(this.cPago);									
									
									}else if(this.condicionRiesgo == true && this.condicionPago == true){
										contenidoEmail.setTipoLineaCredito("Condiciones "+ this.tipoSolicitudAux.getDesTipoSolicitud());
										contenidoEmail.setCondicionRiesgo(cliente.getClasificacionRiesgo());
										contenidoEmail.setCondicionPago(cliente.getCondicionPago());
										contenidoEmail.setCondicionRiesgoNuevo(this.clsRiesgo);								
										contenidoEmail.setCondicionPagoNuevo(this.cPago);
									}								
								}
								contenidoEmail.setMotivoCambio(condicion.getMotivoCambio());
							    /*datos de lineas credito solCredito */
								contenidoEmail.setListaArchivos(listaArchivoGuardado);
								contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
								contenidoEmail.setListaMotivosRechazos(listaMotivoRechazo);
								contenidoEmail.setListaObservaciones(listaObservaciones);
								
							
								List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
								if(listaUsuarioCorreoagregados != null){
									for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
										if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !ucdto.getUsername().equals(usuarioLogueado.getAlias().trim()) ){
											log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
												if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
													ultimaListaCorreoPrueba.add(usuarioAux);	
													usuarioAux = new Usuariosegur();
												}														
											}
										}
									}
								}	

								/*eliminar esto, cuando se establaque la solucion*/
								Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
								if(emisorCorreo != null){
									if(!ultimaListaCorreoPrueba.contains(emisorCorreo)){
										ultimaListaCorreoPrueba.add(emisorCorreo);
									}
									emisorCorreo = null;
								}
								Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
								if(correoAdministrador != null){
									ultimaListaCorreoPrueba.add(correoAdministrador);
									correoAdministrador = null;
								}
								
								contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);										
								
								try{
									if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
										emailAlerta.enviarRespuestaSolicitudCondiciones(contenidoEmail);	
									}	
								}catch (Exception e) {
									log.debug("paso por el error #0"+ e.getMessage());
								}		
							}	
							
						}
					
						
						insertarLogs(solicitud, 11);
						LcredEstado estado = ObtenerEstadoSolictud("R");
						insertHitos(solicitud, estado, "NADA", 0);
						entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
						             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
						entityManager.flush();
						this.habilitaMensajeDerivacion = false;
						entityManager.refresh(solicitud);
						
						evaluarDerivaciones(solicitud.getId().getNumSolicitud());
					}
				}
			}else if(this.paginaIngreso == 41){/*solicitud de bloqueo y desbloqueo*/
				if(solicitud != null && bloqueo != null && solicitudOtra != null){
					
					solicitud.setEstado("R");
					boolean exito = scoringService.mergerSolicitud(solicitud);
					condicion.setStatusSolicitud("R");
					condicion.setObservacionesFinal("Opini√≥n: Rechazar \n Observaci√≥n: "+this.mensajeRechazoSolicitud);
					solicitudOtra.setObservacionesFinal("Opini√≥n: Rechazar \n Observaci√≥n:  "+this.mensajeRechazoSolicitud);
					boolean exitoBD = scoringService.mergerSolicitudOtrasSolicitudes(solicitudOtra);
					LcredEstado estadoAux = scoringService.obtenerEstado("R");					
					entityManager.refresh(solicitud);
					entityManager.refresh(solicitudOtra);
				
					
					if(exito == true && exitoBD == true ){
						/*se agrega la observaciones final de una aprobacion final */
						StringBuffer primeraCadena = new StringBuffer();
						LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
						Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							id.setCorrelativo(correlativo);
							id.setFecha(new Date());
							id.setHora(new Date());
							id.setNumSolicitud(solicitud.getId().getNumSolicitud());
							id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							primeraCadena.append("opini√≥n: \n ");
							primeraCadena.append(this.aprobarRechazar);
							id.setObservacion(primeraCadena.toString());
							id.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(id);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}						
						/*se agrega la observaciones final de una aprobacion final */
						StringBuffer segundaCadena = new StringBuffer();
						LcredSolicitudObservacionesId idAux = new LcredSolicitudObservacionesId();
						Long correlativo1 = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo1 != null){
							idAux.setCorrelativo(correlativo1);
							idAux.setFecha(new Date());
							idAux.setHora(new Date());
							idAux.setNumSolicitud(solicitud.getId().getNumSolicitud());
							idAux.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							segundaCadena.append("Observaci√≥n: \n");
							segundaCadena.append(this.mensajeRechazoSolicitud);
							idAux.setObservacion(segundaCadena.toString());
							idAux.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(idAux);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}		
						
						/*ingersar un registro  de  usurio derivada*/
						LcredEstado estadoAuxi = ObtenerEstadoSolictud("RE");
						Long numero = scoringService.getSolicitudUsuarioDerivacionMaximo();
						SolicitudUsuarioDerivada sud = new SolicitudUsuarioDerivada();
						sud.setSystemId(numero);
						sud.setIdSolicitud(solicitud.getId().getNumSolicitud());
						sud.setEstado(estadoAuxi);
						sud.setFechaHora(new Date());
						sud.setUsuario(usuarioLogueado);
						sud.setConfirmacionObligatoria(true);
						sud.setConfirmacion(true);
						sud.setCodEstadoDerivada(estadoAuxi.getCodEstado());
						boolean exitoingreso = scoringService.persitSolicitudUsuarioDerivacion(sud);
						log.debug(exitoingreso);							
						
						
						
						SolicitudAprobaRechaza sar = new SolicitudAprobaRechaza();
						sar.setAprobador(usuarioCargoAux.getUsuario());
						sar.setCargo(usuarioCargoAux.getCargo());
						sar.setEstado(estadoAux);
						sar.setIdSolicitud(solicitud.getId().getNumSolicitud());
						sar.setObservaciones(this.mensajeRechazoSolicitud);
						boolean exitoAR = scoringService.persistSolicitudAprobaRechazo(sar);
						
						if(exitoAR == true){
							this.mensajeGlogal = "Se Rechaza solicitud N¬∞ "+ solicitud.getId().getNumSolicitud();
							
							List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
							if(listaFileUploadedDTOs != null && listaFileUploadedDTOs.size() != 0){
								for(FileUploadedDTO archivo :listaFileUploadedDTOs){
								   try {							
										OutputStream ostream = null;
										String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
										nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);	
										
										String url = "archivosRespuestaOS"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
										
										
										//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
										ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
										log.debug("url #0",archivo.getUploadItem().getContentType());
										IOUtils.copyStream(ostream, istream);
										ostream.flush();
										ostream.close();
										istream.close();
										//guardar datos en la BD
										ArchivoAdjunto archivoAux = new ArchivoAdjunto();
										archivoAux.setSolicitud(solicitud);
										archivoAux.setUrl(url);
										archivoAux.setUbicacion("");
										archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
										archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
										archivoAux.setUsuario(usuarioLogueado);	
										archivoAux.setFechaCreacion(new Date());
										entityManager.persist(archivoAux);
										entityManager.flush();
										ConceptoDTO objetoAux = new ConceptoDTO();
										objetoAux.setNombreArchivo(nombreArchivo);
										objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
										listaArchivoGuardadoResp.add(objetoAux);
										objetoAux = null;
										
									} catch (FileNotFoundException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}
									catch (IOException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}catch (Exception e) {
										e.printStackTrace();
									}							
								}		
							}		
							List<ConceptoDTO> listaMotivoRechazo = new ArrayList<ConceptoDTO>();
							if(listaMotivosRechazosAgregados != null){
								for(LcredMotivoRechazo mr : listaMotivosRechazosAgregados){
									SolicitudMotivoRechazo smr = new SolicitudMotivoRechazo();
									smr.setIdSolicitud(solicitud.getId().getNumSolicitud());
									smr.setRechazo(mr);
									boolean ingresoMotivo = scoringService.persistSolicitudMotivoRechazo(smr);
									if(ingresoMotivo){
										ConceptoDTO motivo = new ConceptoDTO();
										motivo.setCodigo(mr.getCodRechazo());
										motivo.setDescripcion(mr.getDesRechazo());
										listaMotivoRechazo.add(motivo);
										
									}
								}
							}	
							
							List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
							
							if(listaUsuarioCorreoagregados != null){
								/*setando los varlores del dto para el correo*/
								ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
								contenidoEmail.setTituloRespuesta("Respuesta solicitud ");
								contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
								contenidoEmail.setColor("ROJO");
								contenidoEmail.setAccion("Se Rechaza la Solicitud "+ solicitud.getId().getNumSolicitud());
								contenidoEmail.setAccionRespuesta("");
								contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
								contenidoEmail.setRespuestaFinalSolicitud(this.mensajeRechazoSolicitud);
								contenidoEmail.setOpcionFinal(3);								
								contenidoEmail.setSolicitud(solicitud);
								
								
								StringBuffer rutNombre = new StringBuffer();
								rutNombre.append(cliente.getRut());
								rutNombre.append(" / ");
								rutNombre.append(modificarTexto(cliente.getRazonSocial()));
								contenidoEmail.setRutNombre(rutNombre.toString());
								contenidoEmail.setSoloNombre(cliente.getRazonSocial());
								contenidoEmail.setCanalVenta(cliente.getCanalVenta());
								
								Sucursal suc = obtenerObjetoSucursal(solicitud.getCodSucursal());
								if(suc != null){
									contenidoEmail.setSucursal(suc.getDescripcion());
								}else{
									contenidoEmail.setSucursal(solicitud.getCodSucursal());
								}
								
								UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
								if(ususarioEmisor != null){
									contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
								}else{
									contenidoEmail.setEmisor(solicitud.getCodEmisor());
								}							
								contenidoEmail.setTipoSolicitud("Bloqueo / Desbloqueo.");
								
								if("41".equals(this.opcionBloqueoDesbloqueo)){
									contenidoEmail.setTipoBloqueoDesbloqueo("Bloqueo.");
			
								}else if("42".equals(this.opcionBloqueoDesbloqueo)){
									contenidoEmail.setTipoBloqueoDesbloqueo("Desbloqueo.");
								}
								
								contenidoEmail.setMotivoBloqueoDesbloqueo(this.motivoBloDesbloqueo);
								contenidoEmail.setObservacionesBloqueoDesblorqueo(this.motivoBloDesbloqueo);

							    /*datos de lineas credito solCredito */
								contenidoEmail.setListaArchivos(listaArchivoGuardado);
								contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
								contenidoEmail.setListaMotivosRechazos(listaMotivoRechazo);
								contenidoEmail.setListaObservaciones(listaObservaciones);
									
								List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
								if(listaUsuarioCorreoagregados != null){
									for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
										if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !ucdto.getUsername().equals(usuarioLogueado.getAlias().trim()) ){
											log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
												if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
													ultimaListaCorreoPrueba.add(usuarioAux);	
													usuarioAux = new Usuariosegur();
												}														
											}
										}
									}
								}	
								
								/*eliminar esto, cuando se establaque la solucion*/
								Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
								if(emisorCorreo != null){
									if(!ultimaListaCorreoPrueba.contains(emisorCorreo)){
										ultimaListaCorreoPrueba.add(emisorCorreo);
									}
									emisorCorreo = null;
								}
								Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
								if(correoAdministrador != null){
									ultimaListaCorreoPrueba.add(correoAdministrador);
									correoAdministrador = null;
								}								
								
								contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);										
								try{
									if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
										emailAlerta.enviarRespuestaSolicitudBloqueoDesbloqueo(contenidoEmail);	
									}	
								}catch (Exception e) {
									log.debug("paso por el error #0"+ e.getMessage());
								}	
							}	
							
						}	

						insertarLogs(solicitud, 11);
						LcredEstado estado = ObtenerEstadoSolictud("R");
						insertHitos(solicitud, estado, "NADA", 0);
						entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
						             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
						entityManager.flush();
						this.habilitaMensajeDerivacion = false;
						entityManager.refresh(solicitud);	
						
						evaluarDerivaciones(solicitud.getId().getNumSolicitud());
					}
				}
			}else if(this.paginaIngreso == 43){/* creacion de dm */
				if(solicitud != null && listaClienteDMs != null && solicitudOtra != null){
					
					solicitud.setEstado("R");
					boolean exito = scoringService.mergerSolicitud(solicitud);
					condicion.setStatusSolicitud("R");
					condicion.setObservacionesFinal("Opini√≥n: Rechazar \n Observaci√≥n: "+this.mensajeRechazoSolicitud);
					solicitudOtra.setObservacionesFinal("Opini√≥n: Rechazar \n Observaci√≥n: "+this.mensajeRechazoSolicitud);
					boolean exitoBD = scoringService.mergerSolicitudOtrasSolicitudes(solicitudOtra);
					LcredEstado estadoAux = scoringService.obtenerEstado("R");					
					entityManager.refresh(solicitud);
					entityManager.refresh(solicitudOtra);
				
					
					if(exito == true && exitoBD == true ){
						/*se agrega la observaciones final de una aprobacion final */
						StringBuffer primeraCadena = new StringBuffer();
						LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
						Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							id.setCorrelativo(correlativo);
							id.setFecha(new Date());
							id.setHora(new Date());
							id.setNumSolicitud(solicitud.getId().getNumSolicitud());
							id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							primeraCadena.append("opini√≥n: \n ");
							primeraCadena.append("Rechazar");
							id.setObservacion(primeraCadena.toString());
							id.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(id);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}						
						/*se agrega la observaciones final de una aprobacion final */
						StringBuffer segundaCadena = new StringBuffer();
						LcredSolicitudObservacionesId idAux = new LcredSolicitudObservacionesId();
						Long correlativo1 = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo1 != null){
							idAux.setCorrelativo(correlativo1);
							idAux.setFecha(new Date());
							idAux.setHora(new Date());
							idAux.setNumSolicitud(solicitud.getId().getNumSolicitud());
							idAux.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							segundaCadena.append("Observaci√≥n: \n ");
							segundaCadena.append(this.mensajeRechazoSolicitud);
							idAux.setObservacion(segundaCadena.toString());
							idAux.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(idAux);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}						
						
						/*ingersar un registro  de  usurio derivada*/
						LcredEstado estadoAuxi = ObtenerEstadoSolictud("RE");
						Long numero = scoringService.getSolicitudUsuarioDerivacionMaximo();
						SolicitudUsuarioDerivada sud = new SolicitudUsuarioDerivada();
						sud.setSystemId(numero);
						sud.setIdSolicitud(solicitud.getId().getNumSolicitud());
						sud.setEstado(estadoAuxi);
						sud.setFechaHora(new Date());
						sud.setUsuario(usuarioLogueado);
						sud.setConfirmacionObligatoria(true);
						sud.setConfirmacion(true);
						sud.setCodEstadoDerivada(estadoAuxi.getCodEstado());
						boolean exitoingreso = scoringService.persitSolicitudUsuarioDerivacion(sud);
						log.debug(exitoingreso);	
						
						
						SolicitudAprobaRechaza sar = new SolicitudAprobaRechaza();
						sar.setAprobador(usuarioCargoAux.getUsuario());
						sar.setCargo(usuarioCargoAux.getCargo());
						sar.setEstado(estadoAux);
						sar.setIdSolicitud(solicitud.getId().getNumSolicitud());
						sar.setObservaciones(this.mensajeRechazoSolicitud);
						boolean exitoAR = scoringService.persistSolicitudAprobaRechazo(sar);
						
						
						if(exitoAR == true){
							this.mensajeGlogal = "Se Rechaza solicitud N¬∞ "+ solicitud.getId().getNumSolicitud();
							List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
							if(listaFileUploadedDTOs != null && listaFileUploadedDTOs.size() != 0){
								for(FileUploadedDTO archivo :listaFileUploadedDTOs){
								   try {							
										OutputStream ostream = null;
										String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
										nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);	
										
										String url = "archivosRespuestaOS"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
										
										
										//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
										ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
										log.debug("url #0",archivo.getUploadItem().getContentType());
										IOUtils.copyStream(ostream, istream);
										ostream.flush();
										ostream.close();
										istream.close();
										//guardar datos en la BD
										ArchivoAdjunto archivoAux = new ArchivoAdjunto();
										archivoAux.setSolicitud(solicitud);
										archivoAux.setUrl(url);
										archivoAux.setUbicacion("");
										archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
										archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
										archivoAux.setUsuario(usuarioLogueado);	
										archivoAux.setFechaCreacion(new Date());
										entityManager.persist(archivoAux);
										entityManager.flush();
										ConceptoDTO objetoAux = new ConceptoDTO();
										objetoAux.setNombreArchivo(nombreArchivo);
										objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
										listaArchivoGuardadoResp.add(objetoAux);
										objetoAux = null;
										
									} catch (FileNotFoundException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}
									catch (IOException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}catch (Exception e) {
										e.printStackTrace();
									}							
								}		
							}	
							
							List<ConceptoDTO> listaMotivoRechazo = new ArrayList<ConceptoDTO>();
							if(listaMotivosRechazosAgregados != null){
								for(LcredMotivoRechazo mr : listaMotivosRechazosAgregados){
									SolicitudMotivoRechazo smr = new SolicitudMotivoRechazo();
									smr.setIdSolicitud(solicitud.getId().getNumSolicitud());
									smr.setRechazo(mr);
									boolean ingresoMotivo = scoringService.persistSolicitudMotivoRechazo(smr);
									if(ingresoMotivo){
										ConceptoDTO motivo = new ConceptoDTO();
										motivo.setCodigo(mr.getCodRechazo());
										motivo.setDescripcion(mr.getDesRechazo());
										listaMotivoRechazo.add(motivo);
										
									}
								}
							}	
							
							List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
							
							if(listaUsuarioCorreoagregados != null){
								/*setando los varlores del dto para el correo*/
								ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
								contenidoEmail.setTituloRespuesta("Respuesta solicitud ");
								contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
								contenidoEmail.setColor("ROJO");
								contenidoEmail.setAccion("Se Rechaza la Solicitud "+ solicitud.getId().getNumSolicitud());
								contenidoEmail.setAccionRespuesta("");
								contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
								contenidoEmail.setRespuestaFinalSolicitud(this.mensajeRechazoSolicitud);
								contenidoEmail.setOpcionFinal(3);
								contenidoEmail.setSolicitud(solicitud);
								
								
								StringBuffer rutNombre = new StringBuffer();
								rutNombre.append(cliente.getRut());
								rutNombre.append(" / ");
								rutNombre.append(modificarTexto(cliente.getRazonSocial()));
								contenidoEmail.setRutNombre(rutNombre.toString());
								contenidoEmail.setSoloNombre(cliente.getRazonSocial());
								contenidoEmail.setCanalVenta(cliente.getCanalVenta());
								
								Sucursal suc = obtenerObjetoSucursal(solicitud.getCodSucursal());
								if(suc != null){
									contenidoEmail.setSucursal(suc.getDescripcion());
								}else{
									contenidoEmail.setSucursal(solicitud.getCodSucursal());
								}
								
								UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
								if(ususarioEmisor != null){
									contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
								}else{
									contenidoEmail.setEmisor(solicitud.getCodEmisor());
								}	
								
								contenidoEmail.setTipoSolicitud("Creacion de DM");
								contenidoEmail.setTipoDM("DM");
								
								
							    /*datos de archivos */
								contenidoEmail.setListaArchivos(listaArchivoGuardado);
								contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
								
								/*datos de los DMS*/
								List<CreacionDmDTO> listaDms = new ArrayList<CreacionDmDTO>(0);
								CreacionDmDTO obejtoDm =  null;
								for(LcredSolicitudDm docto : listaClienteDMs){
									if(docto != null){
									   obejtoDm = new CreacionDmDTO();
									   obejtoDm.setRut(docto.getId().getRut());
									   obejtoDm.setNombre(docto.getId().getNombre());
									   obejtoDm.setOficinaVentas(docto.getId().getOficinaVentas());
									   obejtoDm.setZona(docto.getId().getZona());
									   obejtoDm.setListaPrecio(docto.getId().getListaPrecio());
									   obejtoDm.setSector(docto.getId().getSector());
									   obejtoDm.setVendTelefono(docto.getId().getVendTelefono());
									   obejtoDm.setVendTerreno(docto.getId().getVendTerreno());
									   obejtoDm.setCobrador(docto.getId().getCobrador());
									   obejtoDm.setCondExpedicion(docto.getId().getCondExpedicion());
									   obejtoDm.setCondPago(docto.getId().getCondPago());
									   listaDms.add(obejtoDm);
									}
								}
						
								contenidoEmail.setListaCreacionDM(listaDms);
								contenidoEmail.setListaMotivosRechazos(listaMotivoRechazo);
								contenidoEmail.setListaObservaciones(listaObservaciones);
								
								List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
								if(listaUsuarioCorreoagregados != null){
									for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
										if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !ucdto.getUsername().equals(usuarioLogueado.getAlias().trim()) ){
											log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
												if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
													ultimaListaCorreoPrueba.add(usuarioAux);	
													usuarioAux = new Usuariosegur();
												}														
											}
										}
									}
								}
								
								/*eliminar esto, cuando se establaque la solucion*/
								Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
								if(emisorCorreo != null){
									if(!ultimaListaCorreoPrueba.contains(emisorCorreo)){
										ultimaListaCorreoPrueba.add(emisorCorreo);
									}
									emisorCorreo = null;
								}
								Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
								if(correoAdministrador != null){
									ultimaListaCorreoPrueba.add(correoAdministrador);
									correoAdministrador = null;
								}
								
								contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);										
								try{
									if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
										emailAlerta.enviarSolicitudRespuestaDm(contenidoEmail);	
									}	
								}catch (Exception e) {
									log.debug("paso por el error #0"+ e.getMessage());
								}	
							}
						}
					}
					insertarLogs(solicitud, 11);
					LcredEstado estado = ObtenerEstadoSolictud("R");
					insertHitos(solicitud, estado, "NADA", 0);
					entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
					             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
					entityManager.flush();
					this.habilitaMensajeDerivacion = false;
					entityManager.refresh(solicitud);	
					
					evaluarDerivaciones(solicitud.getId().getNumSolicitud());
				}		
			}else if(this.paginaIngreso == 44){/* prorroga de cheques*/
				if(solicitud != null && listaProrrogas != null && solicitudOtra != null){
					
					solicitud.setEstado("R");
					boolean exito = scoringService.mergerSolicitud(solicitud);
					solicitudOtra.setStatusSolicitud("R");
					solicitudOtra.setObservacionesFinal("Opini√≥n: Rechazar \n Observaci√≥n: "+this.mensajeRechazoSolicitud);
					
					boolean exitoBD = scoringService.mergerSolicitudOtrasSolicitudes(solicitudOtra);
					LcredEstado estadoAux = scoringService.obtenerEstado("R");					
					entityManager.refresh(solicitud);
					entityManager.refresh(solicitudOtra);
				
					
					if(exito == true && exitoBD == true ){
						/*se agrega la observaciones final de una aprobacion final */
						StringBuffer primeraCadena = new StringBuffer();
						LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
						Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							id.setCorrelativo(correlativo);
							id.setFecha(new Date());
							id.setHora(new Date());
							id.setNumSolicitud(solicitud.getId().getNumSolicitud());
							id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							primeraCadena.append("opini√≥n: \n ");
							primeraCadena.append("Rechazar");
							id.setObservacion(primeraCadena.toString());
							id.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(id);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}						
						/*se agrega la observaciones final de una aprobacion final */
						StringBuffer segundaCadena = new StringBuffer();
						LcredSolicitudObservacionesId idAux = new LcredSolicitudObservacionesId();
						Long correlativo1 = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo1 != null){
							idAux.setCorrelativo(correlativo1);
							idAux.setFecha(new Date());
							idAux.setHora(new Date());
							idAux.setNumSolicitud(solicitud.getId().getNumSolicitud());
							idAux.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							segundaCadena.append("Observaci√≥n: \n");
							segundaCadena.append(this.mensajeRechazoSolicitud);
							idAux.setObservacion(segundaCadena.toString());
							idAux.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(idAux);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}						
						
						/*ingersar un registro  de  usurio derivada*/
						LcredEstado estadoAuxi = ObtenerEstadoSolictud("RE");
						Long numero = scoringService.getSolicitudUsuarioDerivacionMaximo();
						SolicitudUsuarioDerivada sud = new SolicitudUsuarioDerivada();
						sud.setSystemId(numero);
						sud.setIdSolicitud(solicitud.getId().getNumSolicitud());
						sud.setEstado(estadoAuxi);
						sud.setFechaHora(new Date());
						sud.setUsuario(usuarioLogueado);
						sud.setConfirmacionObligatoria(true);
						sud.setConfirmacion(true);
						sud.setCodEstadoDerivada(estadoAuxi.getCodEstado());
						boolean exitoingreso = scoringService.persitSolicitudUsuarioDerivacion(sud);
						log.debug(exitoingreso);							
						
						
						SolicitudAprobaRechaza sar = new SolicitudAprobaRechaza();
						sar.setAprobador(usuarioCargoAux.getUsuario());
						sar.setCargo(usuarioCargoAux.getCargo());
						sar.setEstado(estadoAux);
						sar.setIdSolicitud(solicitud.getId().getNumSolicitud());
						sar.setObservaciones(this.mensajeRechazoSolicitud);
						boolean exitoAR = scoringService.persistSolicitudAprobaRechazo(sar);
						
						
						if(exitoAR == true){
							Locale locale = new Locale("es","CL");
							NumberFormat numberFormatter;
							numberFormatter = NumberFormat.getNumberInstance(locale);
							
							this.mensajeGlogal = "Se Rechaza solicitud N¬∞ "+ solicitud.getId().getNumSolicitud();
							List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
							if(listaFileUploadedDTOs != null && listaFileUploadedDTOs.size() != 0){
								for(FileUploadedDTO archivo :listaFileUploadedDTOs){
								   try {							
										OutputStream ostream = null;
										String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
										nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);	
										
										String url = "archivosRespuestaOS"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
										
										
										//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
										ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
										log.debug("url #0",archivo.getUploadItem().getContentType());
										IOUtils.copyStream(ostream, istream);
										ostream.flush();
										ostream.close();
										istream.close();
										//guardar datos en la BD
										ArchivoAdjunto archivoAux = new ArchivoAdjunto();
										archivoAux.setSolicitud(solicitud);
										archivoAux.setUrl(url);
										archivoAux.setUbicacion("");
										archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
										archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
										archivoAux.setUsuario(usuarioLogueado);	
										archivoAux.setFechaCreacion(new Date());
										entityManager.persist(archivoAux);
										entityManager.flush();
										ConceptoDTO objetoAux = new ConceptoDTO();
										objetoAux.setNombreArchivo(nombreArchivo);
										objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
										listaArchivoGuardadoResp.add(objetoAux);
										objetoAux = null;
										
									} catch (FileNotFoundException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}
									catch (IOException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}catch (Exception e) {
										e.printStackTrace();
									}							
								}		
							}	
							List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());

							
							
							/* creacion de lista */
							List<ProrrogaDTO> listaProrrogasAux = new ArrayList<ProrrogaDTO>(0);
							ProrrogaDTO obejtoProrroga =  null;
							for(LcredSolicitudProrroga docto : listaProrrogas){
								if(docto != null){
								   obejtoProrroga = new ProrrogaDTO();
								   obejtoProrroga.setNumeroDocto(docto.getId().getNroCheque());
								   obejtoProrroga.setMontoFormateado(numberFormatter.format(docto.getId().getMonto()));
								   obejtoProrroga.setMotivoProrroga(this.motivoProrroga);
								   obejtoProrroga.setFechaVencicmiento(docto.getId().getVencActual());
								   obejtoProrroga.setFechaSolicitado(docto.getId().getVencNuevo());
								   listaProrrogasAux.add(obejtoProrroga);
								}
							}		
							
							List<ConceptoDTO> listaMotivoRechazo = new ArrayList<ConceptoDTO>();
							if(listaMotivosRechazosAgregados != null){
								for(LcredMotivoRechazo mr : listaMotivosRechazosAgregados){
									SolicitudMotivoRechazo smr = new SolicitudMotivoRechazo();
									smr.setIdSolicitud(solicitud.getId().getNumSolicitud());
									smr.setRechazo(mr);
									boolean ingresoMotivo = scoringService.persistSolicitudMotivoRechazo(smr);
									if(ingresoMotivo){
										ConceptoDTO motivo = new ConceptoDTO();
										motivo.setCodigo(mr.getCodRechazo());
										motivo.setDescripcion(mr.getDesRechazo());
										listaMotivoRechazo.add(motivo);
										
									}
								}
							}	
							
							
							if(listaUsuarioCorreoagregados != null){
								/*setando los varlores del dto para el correo*/
								ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
								contenidoEmail.setTituloRespuesta("Respuesta solicitud ");
								contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
								contenidoEmail.setColor("ROJO");
								contenidoEmail.setAccion("Se Rechaza la Solicitud "+ solicitud.getId().getNumSolicitud());
								contenidoEmail.setAccionRespuesta("");
								contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
								contenidoEmail.setRespuestaFinalSolicitud(this.mensajeRechazoSolicitud);
								contenidoEmail.setOpcionFinal(3);
								contenidoEmail.setSolicitud(solicitud);
								
								StringBuffer rutNombre = new StringBuffer();
								rutNombre.append(cliente.getRut());
								rutNombre.append(" / ");
								rutNombre.append(modificarTexto(cliente.getRazonSocial()));
								contenidoEmail.setRutNombre(rutNombre.toString());
								contenidoEmail.setSoloNombre(cliente.getRazonSocial());
								contenidoEmail.setCanalVenta(cliente.getCanalVenta());
								
								Sucursal suc = obtenerObjetoSucursal(solicitud.getCodSucursal());
								if(suc != null){
									contenidoEmail.setSucursal(suc.getDescripcion());
								}else{
									contenidoEmail.setSucursal(solicitud.getCodSucursal());
								}
								
								UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
								if(ususarioEmisor != null){
									contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
								}else{
									contenidoEmail.setEmisor(solicitud.getCodEmisor());
								}	
								
								contenidoEmail.setTipoSolicitud("Prorroga de Cheque");
								contenidoEmail.setTipoProrroga("Prorroga.");
								contenidoEmail.setMotivoProrroga(this.motivoProrroga);
								
								
							    /*datos de archivos */
								contenidoEmail.setListaArchivos(listaArchivoGuardado);
								contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
								
								/*datos de prorrogas*/
								contenidoEmail.setListaProrrogas(listaProrrogasAux);
								contenidoEmail.setListaMotivosRechazos(listaMotivoRechazo);
								contenidoEmail.setListaObservaciones(listaObservaciones);
								
								List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
								if(listaUsuarioCorreoagregados != null){
									for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
										if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !ucdto.getUsername().equals(usuarioLogueado.getAlias().trim()) ){
											log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
												if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
													ultimaListaCorreoPrueba.add(usuarioAux);	
													usuarioAux = new Usuariosegur();
												}														
											}
										}
									}
								}
								
								/*eliminar esto, cuando se establaque la solucion*/
								Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
								if(emisorCorreo != null){
									if(!ultimaListaCorreoPrueba.contains(emisorCorreo)){
										ultimaListaCorreoPrueba.add(emisorCorreo);
									}
									emisorCorreo = null;
								}
								Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
								if(correoAdministrador != null){
									ultimaListaCorreoPrueba.add(correoAdministrador);
									correoAdministrador = null;
								}
								
								contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);										
								try{
									if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
										emailAlerta.enviarSolicitudRespuestaProrroga(contenidoEmail);	
									}	
								}catch (Exception e) {
									log.debug("paso por el error #0"+ e.getMessage());
								}
							}

						}
					}	
					insertarLogs(solicitud, 11);
					LcredEstado estado = ObtenerEstadoSolictud("R");
					insertHitos(solicitud, estado, "NADA", 0);
					entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
					             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
					entityManager.flush();
					this.habilitaMensajeDerivacion = false;
					entityManager.refresh(solicitud);
					
					evaluarDerivaciones(solicitud.getId().getNumSolicitud());
				}
			}	
		}catch (Exception e) {
			log.error("Error, al rechazar la solicitud", e.getMessage());
		}
	}
	public void ingresoAnular(){
		if(this.solicitud != null && this.tipoSolicitudAux != null){
			log.debug("solicitud #0 tipo de solicitud #1", solicitud.getId().getNumSolicitud(), tipoSolicitudAux.getCodTipoSolicitud());
			if(solicitud != null){
				if(solicitud.getEstado().equals("I")){
					this.mensajeGlogal = null;
				}else if(solicitud.getEstado().equals("NU")){
					this.mensajeGlogal = "La solicitud ya fue anulada.";
					return;
				}else if(!solicitud.getEstado().equals("I")){
					if(usuarioCargoAux != null){
						if(usuarioCargoAux.getAdministrador().booleanValue() == false){
							this.mensajeGlogal = "Usted no posee atribuciones para anular la solicitid N¬∞ "+ solicitud.getId().getNumSolicitud() +", porque nose encuentra en estado inicial.";
							return;							
						}else{
							this.mensajeGlogal = null;
						}
					}
				}else{
					this.mensajeGlogal = null;
				}
			}
			
			
			if(this.listaUsuarioCorreoagregados ==null){
				this.mensajeGlogal = "Debe ingresar los usuarios para el envio de correo.";
				return;
			}else{
				if(this.listaUsuarioCorreoagregados.size() == 0 ){
					this.mensajeGlogal = "Debe ingresar los usuarios para el envio de correo.";
					return ;
				}
			}
			
			
			if(this.observacionesFinales ==null){
				this.mensajeGlogal = "Debe ingresar una observaci√≥n final.";
				return;
			}else{
				if("".equals(this.observacionesFinales)){
					this.mensajeGlogal = "Debe ingresar una observaci√≥n final.";
					return ;
				}
			}
			
			this.mensajeGlogal = null;
		}else{
			this.mensajeGlogal = "La solicitud no tiene asociada el tipo de solicitud...";
		}
	}	
	public void anularSolicitudes(){
		
		try{
			if(solicitud != null){
				if(this.paginaIngreso == 11 || this.paginaIngreso == 12){
				  if(venta != null){
					if(this.modificarVenta){
						solicitud.setEstado("NU");
						solicitud.setUsuarioActual(solicitud.getCodEmisor());
						solicitud.setDevolver(true);
						
						venta.setMontoFinal( new BigDecimal(this.montoNuevo));
						venta.setMontoPieInicial(new BigDecimal(this.pieNuevo));
						venta.setObservacionesFinal(this.observacionesFinales);
						venta.setStatusSolicitud(solicitud.getEstado());
						String tipo = null;
						if(this.normalCuota.equals("11")){
							tipo = "N";
							venta.setTipoVentaFinal(tipo.charAt(0));
							
						}else if(this.normalCuota.equals("12")){
							tipo = "C";
							venta.setTipoVentaFinal(tipo.charAt(0));
						}
					}else{
						solicitud.setEstado("NU");
						solicitud.setUsuarioActual(solicitud.getCodEmisor());
						solicitud.setDevolver(true);
	
						venta.setMontoFinal( venta.getMontoInicial());
						venta.setMontoPieInicial(venta.getMontoPieInicial());
						venta.setObservacionesFinal(this.observacionesFinales);
						venta.setTipoVentaFinal(venta.getTipoVentaInicial());
						venta.setStatusSolicitud(solicitud.getEstado());
						
					}
					
					boolean exito = scoringService.mergerSolicitud(solicitud);
					boolean exitoVenta = scoringService.mergerSolicitudVentaPuntual(venta);
					
					if(exito == true && exitoVenta == true){
						/*se agrega la observaciones final de una aprobacion final */
						LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
						Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							id.setCorrelativo(correlativo);
							id.setFecha(new Date());
							id.setHora(new Date());
							id.setNumSolicitud(solicitud.getId().getNumSolicitud());
							id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							id.setObservacion(this.observacionesFinales);
							id.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(id);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}
						
						this.mensajeGlogal = "Se Anula la solicitud N¬∞ "+ solicitud.getId().getNumSolicitud();
						List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
						if(listaFileUploadedDTOs != null && listaFileUploadedDTOs.size() != 0){
							
							for(FileUploadedDTO archivo :listaFileUploadedDTOs){
							   try {							
									OutputStream ostream = null;
									String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
									nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);	
									
									String url = "archivosRespuestaOS"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
									
									//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
									ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
									log.debug("url #0",archivo.getUploadItem().getContentType());
									IOUtils.copyStream(ostream, istream);
									ostream.flush();
									ostream.close();
									istream.close();
									//guardar datos en la BD
									ArchivoAdjunto archivoAux = new ArchivoAdjunto();
									archivoAux.setSolicitud(solicitud);
									archivoAux.setUrl(url);
									archivoAux.setUbicacion("");
									archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
									archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
									archivoAux.setUsuario(usuarioLogueado);	
									archivoAux.setFechaCreacion(new Date());
									entityManager.persist(archivoAux);
									entityManager.flush();
									ConceptoDTO objetoAux = new ConceptoDTO();
									objetoAux.setNombreArchivo(nombreArchivo);
									objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
									listaArchivoGuardadoResp.add(objetoAux);
									objetoAux = null;
									
								} catch (FileNotFoundException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}
								catch (IOException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}catch (Exception e) {
									e.printStackTrace();
								}							
							}	
						}
						
						List<ConceptoDTO> lista = scoringService.getConceptoMonto(solicitud.getId().getNumSolicitud());
						List<ConceptoDTO> listaProducto = scoringService.getProductos(solicitud.getId().getNumSolicitud());
						List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());

						
						
						if(listaUsuarioCorreoagregados != null){
							Locale locale = new Locale("es","CL");
							/*setando los varlores del dto para el correo*/
							ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
							contenidoEmail.setTituloRespuesta("Respuesta solicitud ");
							contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
							contenidoEmail.setColor("ROJO");
							contenidoEmail.setAccion("Anula La Solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
							contenidoEmail.setAccionRespuesta("");
							contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
							contenidoEmail.setRespuestaFinalSolicitud(this.observacionesFinales);
							contenidoEmail.setOpcionFinal(3);
							contenidoEmail.setSolicitud(solicitud);
							NumberFormat numberFormatter;
							StringBuffer rutNombre = new StringBuffer();
							rutNombre.append(cliente.getRut());
							rutNombre.append(" / ");
							rutNombre.append(modificarTexto(cliente.getRazonSocial()));
							contenidoEmail.setRutNombre(rutNombre.toString());
							contenidoEmail.setSoloNombre(cliente.getRazonSocial());
							contenidoEmail.setCanalVenta(cliente.getCanalVenta());
							contenidoEmail.setSucursal(sucursal.getDescripcion());
							
							UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
							if(ususarioEmisor != null){
								contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
							}else{
								contenidoEmail.setEmisor(solicitud.getCodEmisor());
							}
							contenidoEmail.setTipoSolicitud("Venta Puntual");
							contenidoEmail.setTipoVentas(tipoSolicitudAux.getDesTipoSolicitud());
							
							numberFormatter = NumberFormat.getNumberInstance(locale);
							log.debug(numberFormatter.format(venta.getMontoInicial()));
							
							contenidoEmail.setMontoMasIva(numberFormatter.format(venta.getMontoInicial()));
							contenidoEmail.setMontoPie(numberFormatter.format(venta.getMontoPieInicial()));
							contenidoEmail.setMargenNegocio(String.valueOf(numberFormatter.format(this.margenGlogal)));
							contenidoEmail.setFormaPago(this.formaPago);
							contenidoEmail.setMotivoCompra(this.motivoCompra);
							
							contenidoEmail.setPeakCredito(numberFormatter.format(expoRiesgoKh.getPeakCredito()));
							if("VIG".equals(cliente.getVigenciaSeguro().trim())){
								contenidoEmail.setLineaSeguro(numberFormatter.format(expoRiesgoKh.getMontoAsegurado()));
							}else{
								contenidoEmail.setLineaSeguro(numberFormatter.format(0));
							}								
							//contenidoEmail.setLineaSeguro(numberFormatter.format(clienteTarget.getMontoSeguro()));
							contenidoEmail.setRisgoKupfer(numberFormatter.format(expoRiesgoKh.getMontoRiesgoKupfer()));
							contenidoEmail.setListaProductos(listaProducto);
							contenidoEmail.setListaConceptoMontos(lista);
							contenidoEmail.setListaArchivos(listaArchivoGuardado);
							contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
							contenidoEmail.setListaObservaciones(listaObservaciones);
							
							List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
							if(listaUsuarioCorreoagregados != null){
								for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
									if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !ucdto.getUsername().equals(usuarioLogueado.getAlias().trim())  ){
										log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
										Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
										if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
											if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
												ultimaListaCorreoPrueba.add(usuarioAux);	
												usuarioAux = new Usuariosegur();
											}											
										}
									}
								}
							}

							/*eliminar esto, cuando se establaque la solucion*/
							Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
							if(emisorCorreo != null){
								if(!ultimaListaCorreoPrueba.contains(emisorCorreo)){
									ultimaListaCorreoPrueba.add(emisorCorreo);
								}
								emisorCorreo = null;
							}
							Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
							if(correoAdministrador != null){
								ultimaListaCorreoPrueba.add(correoAdministrador);
								correoAdministrador = null;
							}							
							
							contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);										
							
							try{
								if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
									emailAlerta.enviarRespuestaSolicitudVenta(contenidoEmail);	
								}	
							}catch (Exception e) {
								log.debug("paso por el error #0"+ e.getMessage());
							}
						}
						
						insertarLogs(solicitud, 7);
						LcredEstado estado = ObtenerEstadoSolictud("NU");
						insertHitos(solicitud, estado, "NADA", 0);
						entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
						             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
						entityManager.flush();
						
						evaluarDerivaciones(solicitud.getId().getNumSolicitud());
					}
				}else{
					solicitud.setEstado("NU");
					solicitud.setUsuarioActual(usuarioLogueado.getAlias());
					solicitud.setDevolver(true);
				    boolean exito = scoringService.mergerSolicitud(solicitud);
					if(exito == true){
						/*se agrega la observaciones final de una aprobacion final */
						LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
						Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							id.setCorrelativo(correlativo);
							id.setFecha(new Date());
							id.setHora(new Date());
							id.setNumSolicitud(solicitud.getId().getNumSolicitud());
							id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							id.setObservacion(this.observacionesFinales);
							id.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(id);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}
						
						this.mensajeGlogal = "Se Anula la solicitud N¬∞ "+ solicitud.getId().getNumSolicitud();
						List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
						if(listaFileUploadedDTOs != null && listaFileUploadedDTOs.size() != 0){
							for(FileUploadedDTO archivo :listaFileUploadedDTOs){
							   try {							
									OutputStream ostream = null;
									
									String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
									nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);	
									
									String url = "archivosRespuesta"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
									
									//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
									ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
									log.debug("url #0",archivo.getUploadItem().getContentType());
									IOUtils.copyStream(ostream, istream);
									ostream.flush();
									ostream.close();
									istream.close();
									//guardar datos en la BD
									ArchivoAdjunto archivoAux = new ArchivoAdjunto();
									archivoAux.setSolicitud(solicitud);
									archivoAux.setUrl(url);
									archivoAux.setUbicacion("");
									archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
									archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
									archivoAux.setUsuario(usuarioLogueado);	
									archivoAux.setFechaCreacion(new Date());
									entityManager.persist(archivoAux);
									entityManager.flush();
									ConceptoDTO objetoAux = new ConceptoDTO();
									objetoAux.setNombreArchivo(nombreArchivo);
									objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
									listaArchivoGuardadoResp.add(objetoAux);
									objetoAux = null;
									
								} catch (FileNotFoundException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}
								catch (IOException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}catch (Exception e) {
									e.printStackTrace();
								}							
							}	
						}
						
						List<ConceptoDTO> lista = scoringService.getConceptoMonto(solicitud.getId().getNumSolicitud());
						List<ConceptoDTO> listaProducto = scoringService.getProductos(solicitud.getId().getNumSolicitud());
						List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());

						
						
						if(listaUsuarioCorreoagregados != null){
							Locale locale = new Locale("es","CL");
							/*setando los varlores del dto para el correo*/
							ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
							contenidoEmail.setTituloRespuesta("Respuesta solicitud ");
							contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
							contenidoEmail.setColor("ROJO");
							contenidoEmail.setAccion("Anula La Solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
							contenidoEmail.setAccionRespuesta("");
							contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
							contenidoEmail.setRespuestaFinalSolicitud(this.observacionesFinales);
							contenidoEmail.setOpcionFinal(3);
							contenidoEmail.setSolicitud(solicitud);
							NumberFormat numberFormatter;
							StringBuffer rutNombre = new StringBuffer();
							rutNombre.append(cliente.getRut());
							rutNombre.append(" / ");
							rutNombre.append(modificarTexto(cliente.getRazonSocial()));
							contenidoEmail.setRutNombre(rutNombre.toString());
							contenidoEmail.setSoloNombre(cliente.getRazonSocial());
							contenidoEmail.setCanalVenta(cliente.getCanalVenta());
							contenidoEmail.setSucursal(sucursal.getDescripcion());
							
							UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
							if(ususarioEmisor != null){
								contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
							}else{
								contenidoEmail.setEmisor(solicitud.getCodEmisor());
							}
							contenidoEmail.setTipoSolicitud("Venta Puntual");
							contenidoEmail.setTipoVentas(tipoSolicitudAux.getDesTipoSolicitud());
							
							numberFormatter = NumberFormat.getNumberInstance(locale);
							log.debug(numberFormatter.format(venta.getMontoInicial()));
							
							contenidoEmail.setMontoMasIva("0");
							contenidoEmail.setMontoPie("0");
							contenidoEmail.setMargenNegocio("0");
							contenidoEmail.setFormaPago("0");
							contenidoEmail.setMotivoCompra("");
							
							contenidoEmail.setPeakCredito(numberFormatter.format(expoRiesgoKh.getPeakCredito()));
							if("VIG".equals(cliente.getVigenciaSeguro().trim())){
								contenidoEmail.setLineaSeguro(numberFormatter.format(expoRiesgoKh.getMontoAsegurado()));
							}else{
								contenidoEmail.setLineaSeguro(numberFormatter.format(0));
							}								
							//contenidoEmail.setLineaSeguro(numberFormatter.format(clienteTarget.getMontoSeguro()));
							contenidoEmail.setRisgoKupfer(numberFormatter.format(expoRiesgoKh.getMontoRiesgoKupfer()));
							contenidoEmail.setListaProductos(listaProducto);
							contenidoEmail.setListaConceptoMontos(lista);
							contenidoEmail.setListaArchivos(listaArchivoGuardado);
							contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
							contenidoEmail.setListaObservaciones(listaObservaciones);
							
							
							List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
							if(listaUsuarioCorreoagregados != null){
								for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
									if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !ucdto.getUsername().equals(usuarioLogueado.getAlias().trim())  ){
										log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
										Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
										if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
											if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
												ultimaListaCorreoPrueba.add(usuarioAux);	
												usuarioAux = new Usuariosegur();
											}											
										}
									}
								}
							}	
							/*eliminar esto, cuando se establaque la solucion*/
							Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
							if(emisorCorreo != null){
								if(!ultimaListaCorreoPrueba.contains(emisorCorreo)){
									ultimaListaCorreoPrueba.add(emisorCorreo);
								}
								emisorCorreo = null;
							}
							Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
							if(correoAdministrador != null){
								ultimaListaCorreoPrueba.add(correoAdministrador);
								correoAdministrador = null;
							}								
							contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);										
							
							try{
								if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
									emailAlerta.enviarRespuestaSolicitudVenta(contenidoEmail);	
								}	
							}catch (Exception e) {
								log.debug("paso por el error #0"+ e.getMessage());
							}
						}
						insertarLogs(solicitud, 7);
						LcredEstado estado = ObtenerEstadoSolictud("NU");
						insertHitos(solicitud, estado, "NADA", 0);
						entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
						             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
						entityManager.flush();
						evaluarDerivaciones(solicitud.getId().getNumSolicitud());
					}
				 }
					
			   }else if(this.paginaIngreso == 21 || this.paginaIngreso == 22 || this.paginaIngreso == 23 ){ /*solicitudes innominales, nominales, riesgo kupfer*/

					if(solicitud != null && credito != null ){
						if(this.modificarCredito){
							solicitud.setEstado("NU");
							solicitud.setUsuarioActual(solicitud.getCodEmisor());
							solicitud.setDevolver(true);
							
							credito.setMontoNormalFinal( new BigDecimal(this.montoLineaCreditoNuevo));
							if(innNomRiesgoNueva.equals("21")){
								credito.setOpcionNormalFinal("I");
							}else if(innNomRiesgoNueva.equals("22")){
								credito.setOpcionNormalFinal("N");
							}else if(innNomRiesgoNueva.equals("23")){
								credito.setOpcionNormalFinal("R");
							}

							String[] arrayRiesgo = this.clsRiesgoNuevo.split("-");
							if(arrayRiesgo != null){
								credito.setCondRiesgoFinal(arrayRiesgo[0].toString());
							}
							
							String[] arrayPago = this.cPagoNuevo.split("-");
							if(arrayPago != null){
								credito.setCondPagoFinal(arrayPago[0].toString());
							}
							credito.setStatusSolicitud(solicitud.getEstado());
							credito.setObservacionesFinal(this.observacionesFinales);

						}else{
							solicitud.setEstado("NU");
							solicitud.setUsuarioActual(solicitud.getCodEmisor());
							solicitud.setDevolver(true);
		
							credito.setMontoNormalFinal(credito.getMontoNormalInicial());
							credito.setOpcionNormalFinal(credito.getOpcionNormalInicial().toString());
							credito.setCondRiesgoFinal(credito.getCondRiesgoInicial());
							credito.setCondPagoFinal(credito.getCondPagoInicial());
							credito.setStatusSolicitud(solicitud.getEstado());
							credito.setObservacionesFinal(this.observacionesFinales);
						}					
						
						/*actualizaciones la solicitud */
						boolean exito = scoringService.mergerSolicitud(solicitud);
						/*actualizaciones de solicitud de Cr√©dito*/
						boolean exitoCredito = scoringService.mergerSolicitudLineaCredito(credito);
						
						if(exito == true && exitoCredito == true){
							/*se agrega la observaciones final de una aprobacion final */
							LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
							Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
							if(correlativo != null){
								id.setCorrelativo(correlativo);
								id.setFecha(new Date());
								id.setHora(new Date());
								id.setNumSolicitud(solicitud.getId().getNumSolicitud());
								id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
								id.setObservacion(this.observacionesFinales);
								id.setUsuario(usuarioSegur.getAlias());
								LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
								obser.setId(id);
								scoringService.persistSolicitudObservaciones(obser);
								insertarLogs(solicitud, 5);
							}
							
							
							Locale locale = new Locale("es","CL");
							NumberFormat numberFormatter;
							numberFormatter = NumberFormat.getNumberInstance(locale);
							List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0);
							this.mensajeGlogal = "Se Anula la solicitud N¬∞ "+ solicitud.getId().getNumSolicitud();
							
							if(listaFileUploadedDTOs != null && listaFileUploadedDTOs.size() != 0){
								for(FileUploadedDTO archivo :listaFileUploadedDTOs){
								   try {							
										OutputStream ostream = null;
										String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
										nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);	

										String url = "archivosRespuestaLC"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
										
										
										//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
										ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
										log.debug("url #0",archivo.getUploadItem().getContentType());
										IOUtils.copyStream(ostream, istream);
										ostream.flush();
										ostream.close();
										istream.close();
										//guardar datos en la BD
										ArchivoAdjunto archivoAux = new ArchivoAdjunto();
										archivoAux.setSolicitud(solicitud);
										archivoAux.setUrl(url);
										archivoAux.setUbicacion("");
										archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
										archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
										archivoAux.setUsuario(usuarioLogueado);	
										archivoAux.setFechaCreacion(new Date());
										entityManager.persist(archivoAux);
										entityManager.flush();
										ConceptoDTO objetoAux = new ConceptoDTO();
										objetoAux.setNombreArchivo(nombreArchivo);
										objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
										listaArchivoGuardadoResp.add(objetoAux);
										objetoAux = null;
										
									} catch (FileNotFoundException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}
									catch (IOException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}catch (Exception e) {
										e.printStackTrace();
									}							
								}		
							}
							
							/* sacar los datos concecptos involucrados*/
							List<SolicitudConceptosNegocioLC> listaConceptoInvolucarado = scoringService.getListarSolicitudConceptosNegocioLC(solicitud.getId().getNumSolicitud());						 
							/*crear lista de concepto de involucrados*/
							List<ConceptoDTO> conceptosInvolucrado = new ArrayList<ConceptoDTO>(0);
							if(listaConceptoInvolucarado != null){
								for(SolicitudConceptosNegocioLC scn : listaConceptoInvolucarado){
									ConceptoDTO ci = new ConceptoDTO();
									ci.setDescripcion(scn.getConceptosNegocio().getDescripcion());
									ci.setMontoFormateado(numberFormatter.format(scn.getMonto()));
									conceptosInvolucrado.add(ci);
									ci=null;
								}
							}
							
							List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
							
							if(listaUsuarioCorreoagregados != null){
								/*setando los varlores del dto para el correo*/
								ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
								contenidoEmail.setTituloRespuesta("Respuesta solicitud ");
								contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
								contenidoEmail.setColor("ROJO");
								contenidoEmail.setAccion("Anula La Solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
								contenidoEmail.setAccionRespuesta("");
								contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
								contenidoEmail.setRespuestaFinalSolicitud(this.observacionesFinales);
								contenidoEmail.setOpcionFinal(3);
								contenidoEmail.setSolicitud(solicitud);
								
								/*setando los varlores del dto para el correo*/
								StringBuffer rutNombre = new StringBuffer();
								rutNombre.append(cliente.getRut());
								rutNombre.append(" / ");
								rutNombre.append(modificarTexto(cliente.getRazonSocial()));
								contenidoEmail.setRutNombre(rutNombre.toString());
								contenidoEmail.setSoloNombre(solicitud.getNomCliente());
								contenidoEmail.setCanalVenta(modificarTexto(solicitud.getCanal()));

								Sucursal suc = obtenerObjetoSucursal(solicitud.getCodSucursal());
								if(suc != null){
									contenidoEmail.setSucursal(suc.getDescripcion());
								}else{
									contenidoEmail.setSucursal(solicitud.getCodSucursal());
								}
								
								UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
								if(ususarioEmisor != null){
									contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
								}else{
									contenidoEmail.setEmisor(modificarTexto(solicitud.getCodEmisor()));
								}
								contenidoEmail.setTipoSolicitud("Linea de Cr√©dito.");
								contenidoEmail.setTipoLineaCredito(tipoSolicitudAux.getDesTipoSolicitud());

								if("VIG".equals(solicitud.getVigSeguro().trim())){
									contenidoEmail.setLineaSeguroActual(numberFormatter.format(expoRiesgoKh.getMontoAsegurado()));
								}else{
									contenidoEmail.setLineaSeguroActual(numberFormatter.format(0));
								}
								
								if(this.modificarCredito){
									log.debug(numberFormatter.format(this.montoLineaCreditoNuevo));
									contenidoEmail.setMontoSolicitado(numberFormatter.format(this.montoLineaCreditoNuevo));
									contenidoEmail.setCondicionRiesgo(this.clsRiesgoNuevo);
									contenidoEmail.setCondicionPago(this.cPagoNuevo);
									
								}else{
									contenidoEmail.setMontoSolicitado(numberFormatter.format(this.montoCredito));
									contenidoEmail.setCondicionRiesgo(this.clsRiesgo);
									contenidoEmail.setCondicionPago(this.cPago);
								}
								
								contenidoEmail.setProyecto(credito.getDpDescripcionProyecto());
								contenidoEmail.setMontoProyecto(credito.getDpMonto());
								contenidoEmail.setPlazoEjecucion(modificarTexto(credito.getDpPlazoEjecucion()));
								contenidoEmail.setPotencialCompra(credito.getDpPotencialCompra());
								
								
								List<String> listaSocios = new ArrayList<String>(0);
								if(credito.getDpSocios() != null){
									String[] array = credito.getDpSocios().split(",");
									if(array != null){
										for(String s : array){
											listaSocios.add(s);
										}
									}
								}
								
							    /*datos de lineas credito solCredito */
								contenidoEmail.setListaSocios(listaSocios);
								contenidoEmail.setListaConceptoMontos(conceptosInvolucrado);
								contenidoEmail.setListaArchivos(listaArchivoGuardado);
								contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
								contenidoEmail.setListaObservaciones(listaObservaciones);
								
								List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
								if(listaUsuarioCorreoagregados != null){
									for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
										if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !ucdto.getUsername().equals(usuarioLogueado.getAlias().trim())  ){
											log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
												if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
													ultimaListaCorreoPrueba.add(usuarioAux);	
													usuarioAux = new Usuariosegur();
												}											
											}
										}
									}
								}	
								/*eliminar esto, cuando se establaque la solucion*/
								Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
								if(emisorCorreo != null){
									if(!ultimaListaCorreoPrueba.contains(emisorCorreo)){
										ultimaListaCorreoPrueba.add(emisorCorreo);
									}
									emisorCorreo = null;
								}
								Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
								if(correoAdministrador != null){
									ultimaListaCorreoPrueba.add(correoAdministrador);
									correoAdministrador = null;
								}									
								contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);										
								try{
									if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
										emailAlerta.enviarRespuestaSolicitudLinea(contenidoEmail);	
									}	
								}catch (Exception e) {
									log.debug("paso por el error #0"+ e.getMessage());
								}								
							}
							
							insertarLogs(solicitud, 7);
							LcredEstado estado = ObtenerEstadoSolictud("NU");
							insertHitos(solicitud, estado, "NADA", 0);
							entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
							             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
							entityManager.flush();
							
							evaluarDerivaciones(solicitud.getId().getNumSolicitud());

						}
					}else{
						solicitud.setEstado("NU");
						solicitud.setUsuarioActual(usuarioLogueado.getAlias());
						solicitud.setDevolver(true);

						/*actualizaciones la solicitud */
						boolean exito = scoringService.mergerSolicitud(solicitud);
						if(exito == true){
							/*se agrega la observaciones final de una aprobacion final */
							LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
							Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
							if(correlativo != null){
								id.setCorrelativo(correlativo);
								id.setFecha(new Date());
								id.setHora(new Date());
								id.setNumSolicitud(solicitud.getId().getNumSolicitud());
								id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
								id.setObservacion(this.observacionesFinales);
								id.setUsuario(usuarioSegur.getAlias());
								LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
								obser.setId(id);
								scoringService.persistSolicitudObservaciones(obser);
								insertarLogs(solicitud, 5);
							}
							
							Locale locale = new Locale("es","CL");
							NumberFormat numberFormatter;
							numberFormatter = NumberFormat.getNumberInstance(locale);
							List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0);
							this.mensajeGlogal = "Se Anula la solicitud N¬∞ "+ solicitud.getId().getNumSolicitud();
							
							if(listaFileUploadedDTOs != null && listaFileUploadedDTOs.size() != 0){
								for(FileUploadedDTO archivo :listaFileUploadedDTOs){
								   try {							
										OutputStream ostream = null;
										String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
										nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);	

										String url = "archivosRespuestaLC"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
										
										
										//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
										ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
										log.debug("url #0",archivo.getUploadItem().getContentType());
										IOUtils.copyStream(ostream, istream);
										ostream.flush();
										ostream.close();
										istream.close();
										//guardar datos en la BD
										ArchivoAdjunto archivoAux = new ArchivoAdjunto();
										archivoAux.setSolicitud(solicitud);
										archivoAux.setUrl(url);
										archivoAux.setUbicacion("");
										archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
										archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
										archivoAux.setUsuario(usuarioLogueado);	
										archivoAux.setFechaCreacion(new Date());
										entityManager.persist(archivoAux);
										entityManager.flush();
										ConceptoDTO objetoAux = new ConceptoDTO();
										objetoAux.setNombreArchivo(nombreArchivo);
										objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
										listaArchivoGuardadoResp.add(objetoAux);
										objetoAux = null;
										
									} catch (FileNotFoundException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}
									catch (IOException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}catch (Exception e) {
										e.printStackTrace();
									}							
								}		
							}
							
							/* sacar los datos concecptos involucrados*/
							List<SolicitudConceptosNegocioLC> listaConceptoInvolucarado = scoringService.getListarSolicitudConceptosNegocioLC(solicitud.getId().getNumSolicitud());						 
							/*crear lista de concepto de involucrados*/
							List<ConceptoDTO> conceptosInvolucrado = new ArrayList<ConceptoDTO>(0);
							if(listaConceptoInvolucarado != null){
								for(SolicitudConceptosNegocioLC scn : listaConceptoInvolucarado){
									ConceptoDTO ci = new ConceptoDTO();
									ci.setDescripcion(scn.getConceptosNegocio().getDescripcion());
									ci.setMontoFormateado(numberFormatter.format(scn.getMonto()));
									conceptosInvolucrado.add(ci);
									ci=null;
								}
							}
							
							List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
							
							if(listaUsuarioCorreoagregados != null){
								/*setando los varlores del dto para el correo*/
								ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
								contenidoEmail.setTituloRespuesta("Respuesta solicitud ");
								contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
								contenidoEmail.setColor("ROJO");
								contenidoEmail.setAccion("Anula La Solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
								contenidoEmail.setAccionRespuesta("");
								contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
								contenidoEmail.setRespuestaFinalSolicitud(this.observacionesFinales);
								contenidoEmail.setOpcionFinal(3);
								contenidoEmail.setSolicitud(solicitud);
								
								/*setando los varlores del dto para el correo*/
								StringBuffer rutNombre = new StringBuffer();
								rutNombre.append(cliente.getRut());
								rutNombre.append(" / ");
								rutNombre.append(modificarTexto(cliente.getRazonSocial()));
								contenidoEmail.setRutNombre(rutNombre.toString());
								contenidoEmail.setSoloNombre(solicitud.getNomCliente());
								contenidoEmail.setCanalVenta(modificarTexto(solicitud.getCanal()));

								Sucursal suc = obtenerObjetoSucursal(solicitud.getCodSucursal());
								if(suc != null){
									contenidoEmail.setSucursal(suc.getDescripcion());
								}else{
									contenidoEmail.setSucursal(solicitud.getCodSucursal());
								}
								
								UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
								if(ususarioEmisor != null){
									contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
								}else{
									contenidoEmail.setEmisor(modificarTexto(solicitud.getCodEmisor()));
								}
								contenidoEmail.setTipoSolicitud("Linea de Cr√©dito.");
								contenidoEmail.setTipoLineaCredito(tipoSolicitudAux.getDesTipoSolicitud());

								if("VIG".equals(solicitud.getVigSeguro().trim())){
									contenidoEmail.setLineaSeguroActual(numberFormatter.format(expoRiesgoKh.getMontoAsegurado()));
								}else{
									contenidoEmail.setLineaSeguroActual(numberFormatter.format(0));
								}
								contenidoEmail.setMontoSolicitado("0");
								contenidoEmail.setCondicionRiesgo("0");
								contenidoEmail.setCondicionPago("0");
								
								contenidoEmail.setProyecto("");
								contenidoEmail.setMontoProyecto("0");
								contenidoEmail.setPlazoEjecucion("");
								contenidoEmail.setPotencialCompra("0");
								List<String> listaSocios = new ArrayList<String>(0);

								
							    /*datos de lineas credito solCredito */
								contenidoEmail.setListaSocios(listaSocios);
								contenidoEmail.setListaConceptoMontos(conceptosInvolucrado);
								contenidoEmail.setListaArchivos(listaArchivoGuardado);
								contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
								contenidoEmail.setListaObservaciones(listaObservaciones);
								
								List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
								if(listaUsuarioCorreoagregados != null){
									for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
										if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !ucdto.getUsername().equals(usuarioLogueado.getAlias().trim())  ){
											log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
												if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
													ultimaListaCorreoPrueba.add(usuarioAux);	
													usuarioAux = new Usuariosegur();
												}											
											}
										}
									}
								}	
								/*eliminar esto, cuando se establaque la solucion*/
								Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
								if(emisorCorreo != null){
									if(!ultimaListaCorreoPrueba.contains(emisorCorreo)){
										ultimaListaCorreoPrueba.add(emisorCorreo);
									}
									emisorCorreo = null;
								}
								Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
								if(correoAdministrador != null){
									ultimaListaCorreoPrueba.add(correoAdministrador);
									correoAdministrador = null;
								}									
								contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);		
								try{
									if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
										emailAlerta.enviarRespuestaSolicitudLinea(contenidoEmail);	
									}	
								}catch (Exception e) {
									log.debug("paso por el error #0"+ e.getMessage());
								}								
							}

							insertarLogs(solicitud, 7);
							LcredEstado estado = ObtenerEstadoSolictud("NU");
							insertHitos(solicitud, estado, "NADA", 0);
							entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
							             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
							entityManager.flush();
							
							evaluarDerivaciones(solicitud.getId().getNumSolicitud());

						}
					}
				}else if(this.paginaIngreso == 31 ){/* Devolver  la solicitiudes condiciones */
					if(solicitud != null && condicion != null ){
						if(this.modificarCondicion){
							String var= "S";
							solicitud.setEstado("NU");
							solicitud.setUsuarioActual(solicitud.getCodEmisor());
							solicitud.setDevolver(true);
							
							if(condicionRiesgoNew == true ){
								if(this.clsRiesgoNuevo != null){
									String[] arrayRiesgo = this.clsRiesgoNuevo.split("-");
									if(arrayRiesgo != null){
										condicion.setCodCondRiesgoFinal(arrayRiesgo[0].toString());
										condicion.setCondRiesgoFinal(var.charAt(0));
									}
								}
							}
							
							if(condicionPagoNew == true){
								if(this.cPagoNuevo == null){
									String[] arrayPago = this.cPagoNuevo.split("-");
									if(arrayPago != null){
										condicion.setCodCondPagoFinal(arrayPago[0].toString());
										condicion.setCondPagoFinal(var.charAt(0));
									}
									
								}
							}
							condicion.setObservacionesFinal(this.observacionesFinales);
						}else{
							solicitud.setEstado("NU");
							solicitud.setUsuarioActual(solicitud.getCodEmisor());
							solicitud.setDevolver(true);
							
							if(condicionRiesgo == true){
								condicion.setCodCondRiesgoFinal(condicion.getCodCondRiesgoInicial());
								condicion.setCondRiesgoFinal(condicion.getCondRiesgoInicial());							
							}
							if(condicionPago == true){
								condicion.setCodCondPagoFinal(condicion.getCodCondPagoInicial());
								condicion.setCondPagoFinal(condicion.getCondPagoInicial());						
							}
							
						}
						
						/*actualizaciones la solicitud */
						boolean exito = scoringService.mergerSolicitud(solicitud);
						/*actualizaciones de solicitud de condicion*/
						boolean exitoCondicion = scoringService.mergerSolicitudCondiciones(condicion);
						
						if(exito == true && exitoCondicion == true){
							/*se agrega la observaciones final de una aprobacion final */
							LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
							Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
							if(correlativo != null){
								id.setCorrelativo(correlativo);
								id.setFecha(new Date());
								id.setHora(new Date());
								id.setNumSolicitud(solicitud.getId().getNumSolicitud());
								id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
								id.setObservacion(this.observacionesFinales);
								id.setUsuario(usuarioSegur.getAlias());
								LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
								obser.setId(id);
								scoringService.persistSolicitudObservaciones(obser);
								insertarLogs(solicitud, 5);
							}
							
							
							List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
							this.mensajeGlogal = "Se Anula la solicitud N¬∞ "+ solicitud.getId().getNumSolicitud();

							if(listaFileUploadedDTOs != null && listaFileUploadedDTOs.size() != 0){
								for(FileUploadedDTO archivo :listaFileUploadedDTOs){
								   try {							
										OutputStream ostream = null;
										String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
										nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);	

										String url = "archivosRespuestaCC"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
										
										
										//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
										ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
										log.debug("url #0",archivo.getUploadItem().getContentType());
										IOUtils.copyStream(ostream, istream);
										ostream.flush();
										ostream.close();
										istream.close();
										//guardar datos en la BD
										ArchivoAdjunto archivoAux = new ArchivoAdjunto();
										archivoAux.setSolicitud(solicitud);
										archivoAux.setUrl(url);
										archivoAux.setUbicacion("");
										archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
										archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
										archivoAux.setUsuario(usuarioLogueado);	
										archivoAux.setFechaCreacion(new Date());
										entityManager.persist(archivoAux);
										entityManager.flush();
										ConceptoDTO objetoAux = new ConceptoDTO();
										objetoAux.setNombreArchivo(nombreArchivo);
										objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
										listaArchivoGuardadoResp.add(objetoAux);
										objetoAux = null;
										
									} catch (FileNotFoundException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}
									catch (IOException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}catch (Exception e) {
										e.printStackTrace();
									}							
								}		
							}						
							List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());

							if(listaUsuarioCorreoagregados != null){
								
								/*setando los varlores del dto para el correo*/
								ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
								contenidoEmail.setTituloRespuesta("Respuesta solicitud ");
								contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
								contenidoEmail.setColor("ROJO");
								contenidoEmail.setAccion("Anula La Solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
								contenidoEmail.setAccionRespuesta("");
								contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
								contenidoEmail.setRespuestaFinalSolicitud(this.observacionesFinales);								
								contenidoEmail.setOpcionFinal(3);
								contenidoEmail.setSolicitud(solicitud);
								
								StringBuffer rutNombre = new StringBuffer();
								rutNombre.append(cliente.getRut());
								rutNombre.append(" / ");
								rutNombre.append(modificarTexto(cliente.getRazonSocial()));
								contenidoEmail.setRutNombre(rutNombre.toString());
								contenidoEmail.setSoloNombre(cliente.getRazonSocial());
								contenidoEmail.setCanalVenta(modificarTexto(cliente.getCanalVenta()));
								
								Sucursal suc = obtenerObjetoSucursal(solicitud.getCodSucursal());
								if(suc != null){
									contenidoEmail.setSucursal(suc.getDescripcion());
								}else{
									contenidoEmail.setSucursal(solicitud.getCodSucursal());
								}
								
								UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
								if(ususarioEmisor != null){
									contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
								}else{
									contenidoEmail.setEmisor(solicitud.getCodEmisor());
								}							
								
								contenidoEmail.setTipoSolicitud("Cambio de Condiciones.");
								
								if(this.modificarCondicion){
									if(this.condicionRiesgoNew == true && this.condicionPagoNew == false){
										contenidoEmail.setTipoLineaCredito("Condiciones de Riesgo.");	
										contenidoEmail.setCondicionRiesgo(cliente.getClasificacionRiesgo());
										contenidoEmail.setCondicionPago("");
										contenidoEmail.setCondicionRiesgoNuevo(this.clsRiesgoNuevo);								
										contenidoEmail.setCondicionPagoNuevo("");
									
									}else if(this.condicionRiesgoNew == false && this.condicionPagoNew == true){
										contenidoEmail.setTipoLineaCredito("Condiciones de Pago.");
										contenidoEmail.setCondicionRiesgo("");
										contenidoEmail.setCondicionPago(cliente.getCondicionPago());
										contenidoEmail.setCondicionRiesgoNuevo("");								
										contenidoEmail.setCondicionPagoNuevo(this.cPagoNuevo);									
									
									}else if(this.condicionRiesgoNew == true && this.condicionPagoNew == true){
										contenidoEmail.setTipoLineaCredito("Condiciones "+ this.tipoSolicitudAux.getDesTipoSolicitud());
										contenidoEmail.setCondicionRiesgo(cliente.getClasificacionRiesgo());
										contenidoEmail.setCondicionPago(cliente.getCondicionPago());
										contenidoEmail.setCondicionRiesgoNuevo(this.clsRiesgoNuevo);								
										contenidoEmail.setCondicionPagoNuevo(this.cPagoNuevo);
									}								
								}else{
									
									if(this.condicionRiesgo == true && this.condicionPago == false){
										contenidoEmail.setTipoLineaCredito("Condiciones de Riesgo.");	
										contenidoEmail.setCondicionRiesgo(cliente.getClasificacionRiesgo());
										contenidoEmail.setCondicionPago("");
										contenidoEmail.setCondicionRiesgoNuevo(this.clsRiesgo);								
										contenidoEmail.setCondicionPagoNuevo("");
									
									}else if(this.condicionRiesgo == false && this.condicionPago == true){
										contenidoEmail.setTipoLineaCredito("Condiciones de Pago.");
										contenidoEmail.setCondicionRiesgo("");
										contenidoEmail.setCondicionPago(cliente.getCondicionPago());
										contenidoEmail.setCondicionRiesgoNuevo("");								
										contenidoEmail.setCondicionPagoNuevo(this.cPago);									
									
									}else if(this.condicionRiesgo == true && this.condicionPago == true){
										contenidoEmail.setTipoLineaCredito("Condiciones "+ this.tipoSolicitudAux.getDesTipoSolicitud());
										contenidoEmail.setCondicionRiesgo(cliente.getClasificacionRiesgo());
										contenidoEmail.setCondicionPago(cliente.getCondicionPago());
										contenidoEmail.setCondicionRiesgoNuevo(this.clsRiesgo);								
										contenidoEmail.setCondicionPagoNuevo(this.cPago);
									}								
								}
								contenidoEmail.setMotivoCambio(condicion.getMotivoCambio());
							    /*datos de lineas credito solCredito */
								contenidoEmail.setListaArchivos(listaArchivoGuardado);
								contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
								contenidoEmail.setListaObservaciones(listaObservaciones);
								
								
								List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
								if(listaUsuarioCorreoagregados != null){
									for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
										if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !ucdto.getUsername().equals(usuarioLogueado.getAlias().trim())  ){
											log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
												if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
													ultimaListaCorreoPrueba.add(usuarioAux);	
													usuarioAux = new Usuariosegur();
												}											
											}
										}
									}
								}	
								/*eliminar esto, cuando se establaque la solucion*/
								Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
								if(emisorCorreo != null){
									if(!ultimaListaCorreoPrueba.contains(emisorCorreo)){
										ultimaListaCorreoPrueba.add(emisorCorreo);
									}
									emisorCorreo = null;
								}
								Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
								if(correoAdministrador != null){
									ultimaListaCorreoPrueba.add(correoAdministrador);
									correoAdministrador = null;
								}									
								contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);										
								try{
									if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
										emailAlerta.enviarRespuestaSolicitudCondiciones(contenidoEmail);	
									}	
								}catch (Exception e) {
									log.debug("paso por el error #0"+ e.getMessage());
								}	
							}
							
							insertarLogs(solicitud, 7);
							LcredEstado estado = ObtenerEstadoSolictud("NU");
							insertHitos(solicitud, estado, "NADA", 0);
							entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
							             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
							entityManager.flush();
				
							evaluarDerivaciones(solicitud.getId().getNumSolicitud());
						}
					}else{
						solicitud.setEstado("NU");
						solicitud.setUsuarioActual(usuarioLogueado.getAlias());
						solicitud.setDevolver(true);
						/*actualizaciones la solicitud */
						boolean exito = scoringService.mergerSolicitud(solicitud);
						if(exito == true){
							/*se agrega la observaciones final de una aprobacion final */
							LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
							Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
							if(correlativo != null){
								id.setCorrelativo(correlativo);
								id.setFecha(new Date());
								id.setHora(new Date());
								id.setNumSolicitud(solicitud.getId().getNumSolicitud());
								id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
								id.setObservacion(this.observacionesFinales);
								id.setUsuario(usuarioSegur.getAlias());
								LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
								obser.setId(id);
								scoringService.persistSolicitudObservaciones(obser);
								insertarLogs(solicitud, 5);
							}
							
							List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
							this.mensajeGlogal = "Se Anula la solicitud N¬∞ "+ solicitud.getId().getNumSolicitud();

							if(listaFileUploadedDTOs != null && listaFileUploadedDTOs.size() != 0){
								for(FileUploadedDTO archivo :listaFileUploadedDTOs){
								   try {							
										OutputStream ostream = null;
										String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
										nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);	

										String url = "archivosRespuestaCC"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
										
										
										//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
										ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
										log.debug("url #0",archivo.getUploadItem().getContentType());
										IOUtils.copyStream(ostream, istream);
										ostream.flush();
										ostream.close();
										istream.close();
										//guardar datos en la BD
										ArchivoAdjunto archivoAux = new ArchivoAdjunto();
										archivoAux.setSolicitud(solicitud);
										archivoAux.setUrl(url);
										archivoAux.setUbicacion("");
										archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
										archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
										archivoAux.setUsuario(usuarioLogueado);	
										archivoAux.setFechaCreacion(new Date());
										entityManager.persist(archivoAux);
										entityManager.flush();
										ConceptoDTO objetoAux = new ConceptoDTO();
										objetoAux.setNombreArchivo(nombreArchivo);
										objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
										listaArchivoGuardadoResp.add(objetoAux);
										objetoAux = null;
										
									} catch (FileNotFoundException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}
									catch (IOException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}catch (Exception e) {
										e.printStackTrace();
									}							
								}		
							}						
							List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());

							if(listaUsuarioCorreoagregados != null){
								
								/*setando los varlores del dto para el correo*/
								ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
								contenidoEmail.setTituloRespuesta("Respuesta solicitud ");
								contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
								contenidoEmail.setColor("ROJO");
								contenidoEmail.setAccion("Anula La Solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
								contenidoEmail.setAccionRespuesta("");
								contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
								contenidoEmail.setRespuestaFinalSolicitud(this.observacionesFinales);
								contenidoEmail.setOpcionFinal(3);
								contenidoEmail.setSolicitud(solicitud);
								
								StringBuffer rutNombre = new StringBuffer();
								rutNombre.append(cliente.getRut());
								rutNombre.append(" / ");
								rutNombre.append(modificarTexto(cliente.getRazonSocial()));
								contenidoEmail.setRutNombre(rutNombre.toString());
								contenidoEmail.setSoloNombre(cliente.getRazonSocial());
								contenidoEmail.setCanalVenta(modificarTexto(cliente.getCanalVenta()));
								
								Sucursal suc = obtenerObjetoSucursal(solicitud.getCodSucursal());
								if(suc != null){
									contenidoEmail.setSucursal(suc.getDescripcion());
								}else{
									contenidoEmail.setSucursal(solicitud.getCodSucursal());
								}
								
								UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
								if(ususarioEmisor != null){
									contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
								}else{
									contenidoEmail.setEmisor(solicitud.getCodEmisor());
								}							
								
								contenidoEmail.setTipoSolicitud("Cambio de Condiciones.");
								contenidoEmail.setTipoLineaCredito("");	
								contenidoEmail.setCondicionRiesgo("");
								contenidoEmail.setCondicionPago("");
								contenidoEmail.setCondicionRiesgoNuevo("");								
								contenidoEmail.setCondicionPagoNuevo("");
								contenidoEmail.setMotivoCambio("");
							    /*datos de lineas credito solCredito */
								contenidoEmail.setListaArchivos(listaArchivoGuardado);
								contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
								contenidoEmail.setListaObservaciones(listaObservaciones);
								
								
								List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
								if(listaUsuarioCorreoagregados != null){
									for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
										if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !ucdto.getUsername().equals(usuarioLogueado.getAlias().trim())  ){
											log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
												if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
													ultimaListaCorreoPrueba.add(usuarioAux);	
													usuarioAux = new Usuariosegur();
												}											
											}
										}
									}
								}	
								/*eliminar esto, cuando se establaque la solucion*/
								Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
								if(emisorCorreo != null){
									if(!ultimaListaCorreoPrueba.contains(emisorCorreo)){
										ultimaListaCorreoPrueba.add(emisorCorreo);
									}
									emisorCorreo = null;
								}
								Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
								if(correoAdministrador != null){
									ultimaListaCorreoPrueba.add(correoAdministrador);
									correoAdministrador = null;
								}									
								contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);										
								
								try{
									if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
										emailAlerta.enviarRespuestaSolicitudCondiciones(contenidoEmail);	
									}	
								}catch (Exception e) {
									log.debug("paso por el error #0"+ e.getMessage());
								}	
							}
							insertarLogs(solicitud, 7);
							LcredEstado estado = ObtenerEstadoSolictud("NU");
							insertHitos(solicitud, estado, "NADA", 0);
							entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
							             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
							entityManager.flush();
							evaluarDerivaciones(solicitud.getId().getNumSolicitud());
						}
					}
				}else if(this.paginaIngreso == 41){/*solicitud de bloqueo y desbloqueo*/
					if(solicitud != null && bloqueo != null && solicitudOtra != null){
						solicitud.setEstado("NU");
						solicitud.setUsuarioActual(solicitud.getCodEmisor());
						solicitud.setDevolver(true);
						bloqueo.setObservacionesFinal(this.observacionesFinales);
						if(this.modificarbloqueoToDesbloqueo){
							solicitudOtra.setObservacionesFinal(this.observacionesFinales);
							solicitudOtra.setStatusSolicitud(solicitud.getEstado());
							if("41".equals(this.opcionBloqueoDesbloqueoNew)){
								solicitudOtra.setOpcionFinal("B");
							}else{
								solicitudOtra.setOpcionFinal("D");
							}
							
						}else{
							solicitudOtra.setObservacionesFinal(this.observacionesFinales);
							solicitudOtra.setStatusSolicitud(solicitud.getEstado());
							solicitudOtra.setOpcionFinal(solicitudOtra.getOpcionInicial());
						}

						
						/*actualizaciones la solicitud */
						boolean exito = scoringService.mergerSolicitud(solicitud);
						/*actualizaciones de solicitud de Bloqueo to Desbloqueo*/
						boolean exitoBD = scoringService.mergerSolicitudBloqueoToDesbloqueo(bloqueo);					
						/*actualizaciones de solicitud de Otras solicitudes*/
						boolean exitoOS = scoringService.mergerSolicitudOtrasSolicitudes(solicitudOtra);					
						
						if(exito == true && exitoBD == true && exitoOS){
							/*se agrega la observaciones final de una aprobacion final */
							LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
							Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
							if(correlativo != null){
								id.setCorrelativo(correlativo);
								id.setFecha(new Date());
								id.setHora(new Date());
								id.setNumSolicitud(solicitud.getId().getNumSolicitud());
								id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
								id.setObservacion(this.observacionesFinales);
								id.setUsuario(usuarioSegur.getAlias());
								LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
								obser.setId(id);
								scoringService.persistSolicitudObservaciones(obser);
								insertarLogs(solicitud, 5);
							}
							
							
							List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
							this.mensajeGlogal = "Se Anula la solicitud N¬∞ "+ solicitud.getId().getNumSolicitud();						
							
							if(listaFileUploadedDTOs != null && listaFileUploadedDTOs.size() != 0){
								for(FileUploadedDTO archivo :listaFileUploadedDTOs){
								   try {							
										OutputStream ostream = null;
										String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
										nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);	

										String url = "archivosRespuestaOS"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
										
										
										//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
										ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
										log.debug("url #0",archivo.getUploadItem().getContentType());
										IOUtils.copyStream(ostream, istream);
										ostream.flush();
										ostream.close();
										istream.close();
										//guardar datos en la BD
										ArchivoAdjunto archivoAux = new ArchivoAdjunto();
										archivoAux.setSolicitud(solicitud);
										archivoAux.setUrl(url);
										archivoAux.setUbicacion("");
										archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
										archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
										archivoAux.setUsuario(usuarioLogueado);	
										archivoAux.setFechaCreacion(new Date());
										entityManager.persist(archivoAux);
										entityManager.flush();
										ConceptoDTO objetoAux = new ConceptoDTO();
										objetoAux.setNombreArchivo(nombreArchivo);
										objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
										listaArchivoGuardadoResp.add(objetoAux);
										objetoAux = null;
										
									} catch (FileNotFoundException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}
									catch (IOException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}catch (Exception e) {
										e.printStackTrace();
									}							
								}		
							}							
							
							
							List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
							if(listaUsuarioCorreoagregados != null){
								/*setando los varlores del dto para el correo*/
								ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
								contenidoEmail.setTituloRespuesta("Respuesta solicitud ");
								contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
								contenidoEmail.setColor("ROJO");
								contenidoEmail.setAccion("Anula La Solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
								contenidoEmail.setAccionRespuesta("");
								contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
								contenidoEmail.setRespuestaFinalSolicitud(this.observacionesFinales);
								contenidoEmail.setOpcionFinal(3);
								contenidoEmail.setSolicitud(solicitud);
								
								StringBuffer rutNombre = new StringBuffer();
								rutNombre.append(cliente.getRut());
								rutNombre.append(" / ");
								rutNombre.append(modificarTexto(cliente.getRazonSocial()));
								contenidoEmail.setRutNombre(rutNombre.toString());
								contenidoEmail.setSoloNombre(cliente.getRazonSocial());
								contenidoEmail.setCanalVenta(cliente.getCanalVenta());
								
								Sucursal suc = obtenerObjetoSucursal(solicitud.getCodSucursal());
								if(suc != null){
									contenidoEmail.setSucursal(suc.getDescripcion());
								}else{
									contenidoEmail.setSucursal(solicitud.getCodSucursal());
								}
								
								UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
								if(ususarioEmisor != null){
									contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
								}else{
									contenidoEmail.setEmisor(solicitud.getCodEmisor());
								}							
								contenidoEmail.setTipoSolicitud("Bloqueo / Desbloqueo.");
								
								if("41".equals(this.opcionBloqueoDesbloqueo)){
									contenidoEmail.setTipoBloqueoDesbloqueo("Bloqueo.");
			
								}else if("42".equals(this.opcionBloqueoDesbloqueo)){
									contenidoEmail.setTipoBloqueoDesbloqueo("Desbloqueo.");
								}
								
								contenidoEmail.setMotivoBloqueoDesbloqueo(this.motivoBloDesbloqueo);
								contenidoEmail.setObservacionesBloqueoDesblorqueo(this.motivoBloDesbloqueo);

							    /*datos de lineas credito solCredito */
								contenidoEmail.setListaArchivos(listaArchivoGuardado);
								contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
								contenidoEmail.setListaObservaciones(listaObservaciones);

								List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
								if(listaUsuarioCorreoagregados != null){
									for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
										if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !ucdto.getUsername().equals(usuarioLogueado.getAlias().trim())  ){
											log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
												if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
													ultimaListaCorreoPrueba.add(usuarioAux);	
													usuarioAux = new Usuariosegur();
												}											
											}
										}
									}
								}	
								/*eliminar esto, cuando se establaque la solucion*/
								Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
								if(emisorCorreo != null){
									if(!ultimaListaCorreoPrueba.contains(emisorCorreo)){
										ultimaListaCorreoPrueba.add(emisorCorreo);
									}
									emisorCorreo = null;
								}
								Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
								if(correoAdministrador != null){
									ultimaListaCorreoPrueba.add(correoAdministrador);
									correoAdministrador = null;
								}									
								contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);										
								try{
									if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
										emailAlerta.enviarRespuestaSolicitudBloqueoDesbloqueo(contenidoEmail);	
									}	
								}catch (Exception e) {
									log.debug("paso por el error #0"+ e.getMessage());
								}	
							}						

							insertarLogs(solicitud, 7);
							LcredEstado estado = ObtenerEstadoSolictud("NU");
							insertHitos(solicitud, estado, "NADA", 0);
							entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
							             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
							entityManager.flush();
							
							evaluarDerivaciones(solicitud.getId().getNumSolicitud());
				
						}
					}else{
						solicitud.setEstado("NU");
						solicitud.setUsuarioActual(usuarioLogueado.getAlias());
						solicitud.setDevolver(true);
						
						/*actualizaciones la solicitud */
						boolean exito = scoringService.mergerSolicitud(solicitud);
						if(exito == true){
							
							/*se agrega la observaciones final de una aprobacion final */
							LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
							Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
							if(correlativo != null){
								id.setCorrelativo(correlativo);
								id.setFecha(new Date());
								id.setHora(new Date());
								id.setNumSolicitud(solicitud.getId().getNumSolicitud());
								id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
								id.setObservacion(this.observacionesFinales);
								id.setUsuario(usuarioSegur.getAlias());
								LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
								obser.setId(id);
								scoringService.persistSolicitudObservaciones(obser);
								insertarLogs(solicitud, 5);
							}
							
							List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
							this.mensajeGlogal = "Se Anula la solicitud N¬∞ "+ solicitud.getId().getNumSolicitud();						
							
							if(listaFileUploadedDTOs != null && listaFileUploadedDTOs.size() != 0){
								for(FileUploadedDTO archivo :listaFileUploadedDTOs){
								   try {							
										OutputStream ostream = null;
										String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
										nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);	
										
										String url = "archivosRespuestaOS"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
										
										
										//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
										ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
										log.debug("url #0",archivo.getUploadItem().getContentType());
										IOUtils.copyStream(ostream, istream);
										ostream.flush();
										ostream.close();
										istream.close();
										//guardar datos en la BD
										ArchivoAdjunto archivoAux = new ArchivoAdjunto();
										archivoAux.setSolicitud(solicitud);
										archivoAux.setUrl(url);
										archivoAux.setUbicacion("");
										archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
										archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
										archivoAux.setUsuario(usuarioLogueado);	
										archivoAux.setFechaCreacion(new Date());
										entityManager.persist(archivoAux);
										entityManager.flush();
										ConceptoDTO objetoAux = new ConceptoDTO();
										objetoAux.setNombreArchivo(nombreArchivo);
										objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
										listaArchivoGuardadoResp.add(objetoAux);
										objetoAux = null;
										
									} catch (FileNotFoundException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}
									catch (IOException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}catch (Exception e) {
										e.printStackTrace();
									}							
								}		
							}							
							
							
							List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
							if(listaUsuarioCorreoagregados != null){
								/*setando los varlores del dto para el correo*/
								ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
								contenidoEmail.setTituloRespuesta("Respuesta solicitud ");
								contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
								contenidoEmail.setColor("ROJO");
								contenidoEmail.setAccion("Anula La Solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
								contenidoEmail.setAccionRespuesta("");
								contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
								contenidoEmail.setRespuestaFinalSolicitud(this.observacionesFinales);
								contenidoEmail.setOpcionFinal(3);
								contenidoEmail.setSolicitud(solicitud);
								
								StringBuffer rutNombre = new StringBuffer();
								rutNombre.append(cliente.getRut());
								rutNombre.append(" / ");
								rutNombre.append(modificarTexto(cliente.getRazonSocial()));
								contenidoEmail.setRutNombre(rutNombre.toString());
								contenidoEmail.setSoloNombre(cliente.getRazonSocial());
								contenidoEmail.setCanalVenta(cliente.getCanalVenta());
								
								Sucursal suc = obtenerObjetoSucursal(solicitud.getCodSucursal());
								if(suc != null){
									contenidoEmail.setSucursal(suc.getDescripcion());
								}else{
									contenidoEmail.setSucursal(solicitud.getCodSucursal());
								}
								
								UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
								if(ususarioEmisor != null){
									contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
								}else{
									contenidoEmail.setEmisor(solicitud.getCodEmisor());
								}							
								contenidoEmail.setTipoSolicitud("Bloqueo / Desbloqueo.");
								contenidoEmail.setTipoBloqueoDesbloqueo("");
								contenidoEmail.setMotivoBloqueoDesbloqueo("");
								contenidoEmail.setObservacionesBloqueoDesblorqueo("");

							    /*datos de lineas credito solCredito */
								contenidoEmail.setListaArchivos(listaArchivoGuardado);
								contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
								contenidoEmail.setListaObservaciones(listaObservaciones);

								List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
								if(listaUsuarioCorreoagregados != null){
									for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
										if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !ucdto.getUsername().equals(usuarioLogueado.getAlias().trim())  ){
											log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
												if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
													ultimaListaCorreoPrueba.add(usuarioAux);	
													usuarioAux = new Usuariosegur();
												}											
											}
										}
									}
								}	
								/*eliminar esto, cuando se establaque la solucion*/
								Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
								if(emisorCorreo != null){
									if(!ultimaListaCorreoPrueba.contains(emisorCorreo)){
										ultimaListaCorreoPrueba.add(emisorCorreo);
									}
									emisorCorreo = null;
								}
								Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
								if(correoAdministrador != null){
									ultimaListaCorreoPrueba.add(correoAdministrador);
									correoAdministrador = null;
								}									
								contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);										
								
								try{
									if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
										emailAlerta.enviarRespuestaSolicitudBloqueoDesbloqueo(contenidoEmail);	
									}	
								}catch (Exception e) {
									log.debug("paso por el error #0"+ e.getMessage());
								}	
							}						

							insertarLogs(solicitud, 7);
							LcredEstado estado = ObtenerEstadoSolictud("NU");
							insertHitos(solicitud, estado, "NADA", 0);
							entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
							             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
							entityManager.flush();
							
							evaluarDerivaciones(solicitud.getId().getNumSolicitud());
						}
					}
				}else if(this.paginaIngreso == 43){/* creacion de dm */
					if(solicitud != null && listaClienteDMs != null && solicitudOtra != null){
						solicitud.setEstado("NU");
						solicitud.setUsuarioActual(usuarioLogueado.getAlias());
						solicitud.setDevolver(true);

					   if(this.modificarCreacionDM){
							solicitudOtra.setObservacionesFinal(this.observacionesFinales);
							solicitudOtra.setStatusSolicitud(solicitud.getEstado());
							solicitudOtra.setOpcionFinal(solicitudOtra.getOpcionInicial());
						}else{
							solicitudOtra.setObservacionesFinal(this.observacionesFinales);
							solicitudOtra.setStatusSolicitud(solicitud.getEstado());
							solicitudOtra.setOpcionFinal(solicitudOtra.getOpcionInicial());
						}
						
						/*actualizaciones la solicitud */
						boolean exito = scoringService.mergerSolicitud(solicitud);
						/*actualizaciones de solicitud de Otras solicitudes*/
							boolean exitoOS = scoringService.mergerSolicitudOtrasSolicitudes(solicitudOtra);							
							
						if(exito == true && exitoOS == true){
							/*se agrega la observaciones final de una aprobacion final */
							LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
							Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
							if(correlativo != null){
								id.setCorrelativo(correlativo);
								id.setFecha(new Date());
								id.setHora(new Date());
								id.setNumSolicitud(solicitud.getId().getNumSolicitud());
								id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
								id.setObservacion(this.observacionesFinales);
								id.setUsuario(usuarioSegur.getAlias());
								LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
								obser.setId(id);
								scoringService.persistSolicitudObservaciones(obser);
								insertarLogs(solicitud, 5);
							}
							
							
							List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
							this.mensajeGlogal = "Se Anula la solicitud N¬∞ "+ solicitud.getId().getNumSolicitud();						
							if(listaFileUploadedDTOs != null && listaFileUploadedDTOs.size() != 0){
								for(FileUploadedDTO archivo :listaFileUploadedDTOs){
								   try {							
										OutputStream ostream = null;
										String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
										nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);	
	
										String url = "archivosRespuestaOS"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
										
										
										//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
										ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
										log.debug("url #0",archivo.getUploadItem().getContentType());
										IOUtils.copyStream(ostream, istream);
										ostream.flush();
										ostream.close();
										istream.close();
										//guardar datos en la BD
										ArchivoAdjunto archivoAux = new ArchivoAdjunto();
										archivoAux.setSolicitud(solicitud);
										archivoAux.setUrl(url);
										archivoAux.setUbicacion("");
										archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
										archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
										archivoAux.setUsuario(usuarioLogueado);	
										archivoAux.setFechaCreacion(new Date());
										entityManager.persist(archivoAux);
										entityManager.flush();
										ConceptoDTO objetoAux = new ConceptoDTO();
										objetoAux.setNombreArchivo(nombreArchivo);
										objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
										listaArchivoGuardadoResp.add(objetoAux);
										objetoAux = null;
										
									} catch (FileNotFoundException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}
									catch (IOException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}catch (Exception e) {
										e.printStackTrace();
									}							
								}		
							}	
							List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
	
							if(listaUsuarioCorreoagregados != null){
								/*setando los varlores del dto para el correo*/
								ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
								contenidoEmail.setTituloRespuesta("Respuesta solicitud ");
								contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
								contenidoEmail.setColor("ROJO");
								contenidoEmail.setAccion("Anula La Solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
								contenidoEmail.setAccionRespuesta("");
								contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
								contenidoEmail.setRespuestaFinalSolicitud(this.observacionesFinales);
								contenidoEmail.setOpcionFinal(3);
								contenidoEmail.setSolicitud(solicitud);
								
								StringBuffer rutNombre = new StringBuffer();
								rutNombre.append(cliente.getRut());
								rutNombre.append(" / ");
								rutNombre.append(modificarTexto(cliente.getRazonSocial()));
								contenidoEmail.setRutNombre(rutNombre.toString());
								contenidoEmail.setSoloNombre(cliente.getRazonSocial());
								contenidoEmail.setCanalVenta(cliente.getCanalVenta());
								
								Sucursal suc = obtenerObjetoSucursal(solicitud.getCodSucursal());
								if(suc != null){
									contenidoEmail.setSucursal(suc.getDescripcion());
								}else{
									contenidoEmail.setSucursal(solicitud.getCodSucursal());
								}
								
								UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
								if(ususarioEmisor != null){
									contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
								}else{
									contenidoEmail.setEmisor(solicitud.getCodEmisor());
								}	
								
								contenidoEmail.setTipoSolicitud("Creacion de DM");
								contenidoEmail.setTipoDM("DM");
								
								
							    /*datos de archivos */
								contenidoEmail.setListaArchivos(listaArchivoGuardado);
								contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
								
								/*datos de los DMS*/
								List<CreacionDmDTO> listaDms = new ArrayList<CreacionDmDTO>(0);
								CreacionDmDTO obejtoDm =  null;
								for(LcredSolicitudDm docto : listaClienteDMs){
									if(docto != null){
									   obejtoDm = new CreacionDmDTO();
									   obejtoDm.setRut(docto.getId().getRut());
									   obejtoDm.setNombre(docto.getId().getNombre());
									   obejtoDm.setOficinaVentas(docto.getId().getOficinaVentas());
									   obejtoDm.setZona(docto.getId().getZona());
									   obejtoDm.setListaPrecio(docto.getId().getListaPrecio());
									   obejtoDm.setSector(docto.getId().getSector());
									   obejtoDm.setVendTelefono(docto.getId().getVendTelefono());
									   obejtoDm.setVendTerreno(docto.getId().getVendTerreno());
									   obejtoDm.setCobrador(docto.getId().getCobrador());
									   obejtoDm.setCondExpedicion(docto.getId().getCondExpedicion());
									   obejtoDm.setCondPago(docto.getId().getCondPago());
									   listaDms.add(obejtoDm);
									}
								}
						
								contenidoEmail.setListaCreacionDM(listaDms);
								contenidoEmail.setListaObservaciones(listaObservaciones);
								
							
								List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
								if(listaUsuarioCorreoagregados != null){
									for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
										if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !ucdto.getUsername().equals(usuarioLogueado.getAlias().trim())  ){
											log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
												if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
													ultimaListaCorreoPrueba.add(usuarioAux);	
													usuarioAux = new Usuariosegur();
												}											
											}
										}
									}
								}
								/*eliminar esto, cuando se establaque la solucion*/
								Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
								if(emisorCorreo != null){
									if(!ultimaListaCorreoPrueba.contains(emisorCorreo)){
										ultimaListaCorreoPrueba.add(emisorCorreo);
									}
									emisorCorreo = null;
								}
								Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
								if(correoAdministrador != null){
									ultimaListaCorreoPrueba.add(correoAdministrador);
									correoAdministrador = null;
								}										
								contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);											
								
								try{
									if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
										emailAlerta.enviarSolicitudRespuestaDm(contenidoEmail);	
									}	
								}catch (Exception e) {
									log.debug("paso por el error #0"+ e.getMessage());
								}	
							}								
							
						
							insertarLogs(solicitud, 7);
							LcredEstado estado = ObtenerEstadoSolictud("NU");
							insertHitos(solicitud, estado, "NADA", 0);
							entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
							             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
							entityManager.flush();
							
							evaluarDerivaciones(solicitud.getId().getNumSolicitud());
	
						}	
						
					}else{
				
							solicitud.setEstado("NU");
							solicitud.setUsuarioActual(solicitud.getCodEmisor());
							solicitud.setDevolver(true);
							/*actualizaciones la solicitud */
							boolean exito = scoringService.mergerSolicitud(solicitud);
							if(exito == true){
								
								/*se agrega la observaciones final de una aprobacion final */
								LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
								Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
								if(correlativo != null){
									id.setCorrelativo(correlativo);
									id.setFecha(new Date());
									id.setHora(new Date());
									id.setNumSolicitud(solicitud.getId().getNumSolicitud());
									id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
									id.setObservacion(this.observacionesFinales);
									id.setUsuario(usuarioSegur.getAlias());
									LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
									obser.setId(id);
									scoringService.persistSolicitudObservaciones(obser);
									insertarLogs(solicitud, 5);
								}
								
								List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
								this.mensajeGlogal = "Se Anula la solicitud N¬∞ "+ solicitud.getId().getNumSolicitud();						
								if(listaFileUploadedDTOs != null && listaFileUploadedDTOs.size() != 0){
									for(FileUploadedDTO archivo :listaFileUploadedDTOs){
									   try {							
											OutputStream ostream = null;
											String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
											nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);	

											String url = "archivosRespuestaOS"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
											String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
											InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
											
											
											//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
											ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
											log.debug("url #0",archivo.getUploadItem().getContentType());
											IOUtils.copyStream(ostream, istream);
											ostream.flush();
											ostream.close();
											istream.close();
											//guardar datos en la BD
											ArchivoAdjunto archivoAux = new ArchivoAdjunto();
											archivoAux.setSolicitud(solicitud);
											archivoAux.setUrl(url);
											archivoAux.setUbicacion("");
											archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
											archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
											archivoAux.setUsuario(usuarioLogueado);	
											archivoAux.setFechaCreacion(new Date());
											entityManager.persist(archivoAux);
											entityManager.flush();
											ConceptoDTO objetoAux = new ConceptoDTO();
											objetoAux.setNombreArchivo(nombreArchivo);
											objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
											listaArchivoGuardadoResp.add(objetoAux);
											objetoAux = null;
											
										} catch (FileNotFoundException e) {
											log.error("error al guardar archivo #0", e.toString());
											FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
										}
										catch (IOException e) {
											log.error("error al guardar archivo #0", e.toString());
											FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
										}catch (Exception e) {
											e.printStackTrace();
										}							
									}		
								}	
								List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());

								if(listaUsuarioCorreoagregados != null){
									/*setando los varlores del dto para el correo*/
									ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
									contenidoEmail.setTituloRespuesta("Respuesta solicitud ");
									contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
									contenidoEmail.setColor("ROJO");
									contenidoEmail.setAccion("Anula La Solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
									contenidoEmail.setAccionRespuesta("");
									contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
									contenidoEmail.setRespuestaFinalSolicitud(this.observacionesFinales);									
									contenidoEmail.setOpcionFinal(3);
									contenidoEmail.setSolicitud(solicitud);
									
									StringBuffer rutNombre = new StringBuffer();
									rutNombre.append(cliente.getRut());
									rutNombre.append(" / ");
									rutNombre.append(modificarTexto(cliente.getRazonSocial()));
									contenidoEmail.setRutNombre(rutNombre.toString());
									contenidoEmail.setSoloNombre(cliente.getRazonSocial());
									contenidoEmail.setCanalVenta(cliente.getCanalVenta());
									
									Sucursal suc = obtenerObjetoSucursal(solicitud.getCodSucursal());
									if(suc != null){
										contenidoEmail.setSucursal(suc.getDescripcion());
									}else{
										contenidoEmail.setSucursal(solicitud.getCodSucursal());
									}
									
									UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
									if(ususarioEmisor != null){
										contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
									}else{
										contenidoEmail.setEmisor(solicitud.getCodEmisor());
									}	
									
									contenidoEmail.setTipoSolicitud("Creacion de DM");
									contenidoEmail.setTipoDM("DM");
									
									
								    /*datos de archivos */
									contenidoEmail.setListaArchivos(listaArchivoGuardado);
									contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
									
									/*datos de los DMS*/
									List<CreacionDmDTO> listaDms = new ArrayList<CreacionDmDTO>(0);
									contenidoEmail.setListaCreacionDM(listaDms);
									contenidoEmail.setListaObservaciones(listaObservaciones);
									
								
									List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
									if(listaUsuarioCorreoagregados != null){
										for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
											if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !ucdto.getUsername().equals(usuarioLogueado.getAlias().trim())  ){
												log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
												Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
												if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
													if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
														ultimaListaCorreoPrueba.add(usuarioAux);	
														usuarioAux = new Usuariosegur();
													}											
												}
											}
										}
									}	
									/*eliminar esto, cuando se establaque la solucion*/
									Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
									if(emisorCorreo != null){
										if(!ultimaListaCorreoPrueba.contains(emisorCorreo)){
											ultimaListaCorreoPrueba.add(emisorCorreo);
										}
										emisorCorreo = null;
									}
									Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
									if(correoAdministrador != null){
										ultimaListaCorreoPrueba.add(correoAdministrador);
										correoAdministrador = null;
									}										
									contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);											
									
									
									try{
										if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
											emailAlerta.enviarSolicitudRespuestaDm(contenidoEmail);	
										}	
									}catch (Exception e) {
										log.debug("paso por el error #0"+ e.getMessage());
									}	
								}								
								
							
								insertarLogs(solicitud, 7);
								LcredEstado estado = ObtenerEstadoSolictud("NU");
								insertHitos(solicitud, estado, "NADA", 0);
								entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
								             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
								entityManager.flush();
								
								evaluarDerivaciones(solicitud.getId().getNumSolicitud());

							}	
						}
					}else if(this.paginaIngreso == 44){/* prorroga de cheques*/
						if(solicitud != null && listaProrrogas != null && solicitudOtra != null){
							Locale locale = new Locale("es","CL");
							NumberFormat numberFormatter;
							numberFormatter = NumberFormat.getNumberInstance(locale);
							
							solicitud.setEstado("NU");
							solicitud.setUsuarioActual(solicitud.getCodEmisor());
							solicitud.setDevolver(true);							
						   if(this.modificarProrroga){
								solicitudOtra.setObservacionesFinal(this.observacionesFinales);
								solicitudOtra.setStatusSolicitud(solicitud.getEstado());
								solicitudOtra.setOpcionFinal(solicitudOtra.getOpcionInicial());
							}else{
								solicitudOtra.setObservacionesFinal(this.observacionesFinales);
								solicitudOtra.setStatusSolicitud(solicitud.getEstado());
								solicitudOtra.setOpcionFinal(solicitudOtra.getOpcionInicial());
							}
							
								
							/*actualizaciones la solicitud */
							boolean exito = scoringService.mergerSolicitud(solicitud);
							/*actualizaciones de solicitud de Otras solicitudes*/
							boolean exitoOS = scoringService.mergerSolicitudOtrasSolicitudes(solicitudOtra);
							if(exito == true && exitoOS == true){
								
								/*se agrega la observaciones final de una aprobacion final */
								LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
								Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
								if(correlativo != null){
									id.setCorrelativo(correlativo);
									id.setFecha(new Date());
									id.setHora(new Date());
									id.setNumSolicitud(solicitud.getId().getNumSolicitud());
									id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
									id.setObservacion(this.observacionesFinales);
									id.setUsuario(usuarioSegur.getAlias());
									LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
									obser.setId(id);
									scoringService.persistSolicitudObservaciones(obser);
									insertarLogs(solicitud, 5);
								}
								
								
								List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
								this.mensajeGlogal = "Se Anula la solicitud N¬∞ "+ solicitud.getId().getNumSolicitud();						
								if(listaFileUploadedDTOs != null && listaFileUploadedDTOs.size() != 0){
									for(FileUploadedDTO archivo :listaFileUploadedDTOs){
									   try {							
											OutputStream ostream = null;
											String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
											nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);	

											String url = "archivosRespuestaOS"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
											String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
											InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
											
											
											//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
											ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
											log.debug("url #0",archivo.getUploadItem().getContentType());
											IOUtils.copyStream(ostream, istream);
											ostream.flush();
											ostream.close();
											istream.close();
											//guardar datos en la BD
											ArchivoAdjunto archivoAux = new ArchivoAdjunto();
											archivoAux.setSolicitud(solicitud);
											archivoAux.setUrl(url);
											archivoAux.setUbicacion("");
											archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
											archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
											archivoAux.setUsuario(usuarioLogueado);	
											archivoAux.setFechaCreacion(new Date());
											entityManager.persist(archivoAux);
											entityManager.flush();
											ConceptoDTO objetoAux = new ConceptoDTO();
											objetoAux.setNombreArchivo(nombreArchivo);
											objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
											listaArchivoGuardadoResp.add(objetoAux);
											objetoAux = null;
											
										} catch (FileNotFoundException e) {
											log.error("error al guardar archivo #0", e.toString());
											FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
										}
										catch (IOException e) {
											log.error("error al guardar archivo #0", e.toString());
											FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
										}catch (Exception e) {
											e.printStackTrace();
										}							
									}		
								}	
								
								List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
								
								/* creacion de lista */
								List<ProrrogaDTO> listaProrrogasAux = new ArrayList<ProrrogaDTO>(0);
								ProrrogaDTO obejtoProrroga =  null;
								for(LcredSolicitudProrroga docto : listaProrrogas){
									if(docto != null){
									   obejtoProrroga = new ProrrogaDTO();
									   obejtoProrroga.setNumeroDocto(docto.getId().getNroCheque());
									   obejtoProrroga.setMontoFormateado(numberFormatter.format(docto.getId().getMonto()));
									   obejtoProrroga.setMotivoProrroga(this.motivoProrroga);
									   obejtoProrroga.setFechaVencicmiento(docto.getId().getVencActual());
									   obejtoProrroga.setFechaSolicitado(docto.getId().getVencNuevo());
									   listaProrrogasAux.add(obejtoProrroga);
									}
								}									
								
								
								if(listaUsuarioCorreoagregados != null){
									/*setando los varlores del dto para el correo*/
									ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
									contenidoEmail.setTituloRespuesta("Respuesta solicitud ");
									contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
									contenidoEmail.setColor("ROJO");
									contenidoEmail.setAccion("Anula La Solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
									contenidoEmail.setAccionRespuesta("");
									contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
									contenidoEmail.setRespuestaFinalSolicitud(this.observacionesFinales);
									contenidoEmail.setOpcionFinal(3);
									contenidoEmail.setSolicitud(solicitud);
									
									StringBuffer rutNombre = new StringBuffer();
									rutNombre.append(cliente.getRut());
									rutNombre.append(" / ");
									rutNombre.append(modificarTexto(cliente.getRazonSocial()));
									contenidoEmail.setRutNombre(rutNombre.toString());
									contenidoEmail.setSoloNombre(cliente.getRazonSocial());
									contenidoEmail.setCanalVenta(cliente.getCanalVenta());
									
									Sucursal suc = obtenerObjetoSucursal(solicitud.getCodSucursal());
									if(suc != null){
										contenidoEmail.setSucursal(suc.getDescripcion());
									}else{
										contenidoEmail.setSucursal(solicitud.getCodSucursal());
									}
									
									UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
									if(ususarioEmisor != null){
										contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
									}else{
										contenidoEmail.setEmisor(solicitud.getCodEmisor());
									}	
									
									contenidoEmail.setTipoSolicitud("Prorroga de Cheque");
									contenidoEmail.setTipoProrroga("Prorroga.");
									contenidoEmail.setMotivoProrroga(this.motivoProrroga);
									
									
								    /*datos de archivos */
									contenidoEmail.setListaArchivos(listaArchivoGuardado);
									contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
									contenidoEmail.setListaObservaciones(listaObservaciones);
									
									/*datos de prorrogas*/
									contenidoEmail.setListaProrrogas(listaProrrogasAux);
									
								
									List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
									if(listaUsuarioCorreoagregados != null){
										for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
											if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !ucdto.getUsername().equals(usuarioLogueado.getAlias().trim())  ){
												log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
												Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
												if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
													if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
														ultimaListaCorreoPrueba.add(usuarioAux);	
														usuarioAux = new Usuariosegur();
													}											
												}
											}
										}
									}	
									/*eliminar esto, cuando se establaque la solucion*/
									Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
									if(emisorCorreo != null){
										if(!ultimaListaCorreoPrueba.contains(emisorCorreo)){
											ultimaListaCorreoPrueba.add(emisorCorreo);
										}
										emisorCorreo = null;
									}
									Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
									if(correoAdministrador != null){
										ultimaListaCorreoPrueba.add(correoAdministrador);
										correoAdministrador = null;
									}										
									contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);											
									
									
									try{
										if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
											emailAlerta.enviarSolicitudRespuestaProrroga(contenidoEmail);	
										}	
									}catch (Exception e) {
										log.debug("paso por el error #0"+ e.getMessage());
									}
								}								
								insertarLogs(solicitud, 7);
								LcredEstado estado = ObtenerEstadoSolictud("NU");
								insertHitos(solicitud, estado, "NADA", 0);
								entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
								             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
								entityManager.flush();
								
								evaluarDerivaciones(solicitud.getId().getNumSolicitud());
							}	
							
						}else{
								solicitud.setEstado("NU");
								solicitud.setUsuarioActual(solicitud.getCodEmisor());
								solicitud.setDevolver(true);
								
								/*actualizaciones la solicitud */
								boolean exito = scoringService.mergerSolicitud(solicitud);

								if(exito == true){
									/*se agrega la observaciones final de una aprobacion final */
									LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
									Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
									if(correlativo != null){
										id.setCorrelativo(correlativo);
										id.setFecha(new Date());
										id.setHora(new Date());
										id.setNumSolicitud(solicitud.getId().getNumSolicitud());
										id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
										id.setObservacion(this.observacionesFinales);
										id.setUsuario(usuarioSegur.getAlias());
										LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
										obser.setId(id);
										scoringService.persistSolicitudObservaciones(obser);
										insertarLogs(solicitud, 5);
									}
									
									List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
									this.mensajeGlogal = "Se Anula la solicitud N¬∞ "+ solicitud.getId().getNumSolicitud();						
									if(listaFileUploadedDTOs != null && listaFileUploadedDTOs.size() != 0){
										for(FileUploadedDTO archivo :listaFileUploadedDTOs){
										   try {							
												OutputStream ostream = null;
												String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
												nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);	

												String url = "archivosRespuestaOS"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
												String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
												InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
												
												
												//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
												ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
												log.debug("url #0",archivo.getUploadItem().getContentType());
												IOUtils.copyStream(ostream, istream);
												ostream.flush();
												ostream.close();
												istream.close();
												//guardar datos en la BD
												ArchivoAdjunto archivoAux = new ArchivoAdjunto();
												archivoAux.setSolicitud(solicitud);
												archivoAux.setUrl(url);
												archivoAux.setUbicacion("");
												archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
												archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
												archivoAux.setUsuario(usuarioLogueado);	
												archivoAux.setFechaCreacion(new Date());
												entityManager.persist(archivoAux);
												entityManager.flush();
												ConceptoDTO objetoAux = new ConceptoDTO();
												objetoAux.setNombreArchivo(nombreArchivo);
												objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
												listaArchivoGuardadoResp.add(objetoAux);
												objetoAux = null;
												
											} catch (FileNotFoundException e) {
												log.error("error al guardar archivo #0", e.toString());
												FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
											}
											catch (IOException e) {
												log.error("error al guardar archivo #0", e.toString());
												FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
											}catch (Exception e) {
												e.printStackTrace();
											}							
										}		
									}	
									
									List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
									
									/* creacion de lista */
									List<ProrrogaDTO> listaProrrogasAux = new ArrayList<ProrrogaDTO>(0);
									
									if(listaUsuarioCorreoagregados != null){
										/*setando los varlores del dto para el correo*/
										ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
										contenidoEmail.setTituloRespuesta("Respuesta solicitud ");
										contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
										contenidoEmail.setColor("ROJO");
										contenidoEmail.setAccion("Anula La Solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
										contenidoEmail.setAccionRespuesta("");
										contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
										contenidoEmail.setRespuestaFinalSolicitud(this.observacionesFinales);										
										contenidoEmail.setOpcionFinal(3);
										contenidoEmail.setSolicitud(solicitud);
										
										StringBuffer rutNombre = new StringBuffer();
										rutNombre.append(cliente.getRut());
										rutNombre.append(" / ");
										rutNombre.append(modificarTexto(cliente.getRazonSocial()));
										contenidoEmail.setRutNombre(rutNombre.toString());
										contenidoEmail.setSoloNombre(cliente.getRazonSocial());
										contenidoEmail.setCanalVenta(cliente.getCanalVenta());
										
										Sucursal suc = obtenerObjetoSucursal(solicitud.getCodSucursal());
										if(suc != null){
											contenidoEmail.setSucursal(suc.getDescripcion());
										}else{
											contenidoEmail.setSucursal(solicitud.getCodSucursal());
										}
										
										UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
										if(ususarioEmisor != null){
											contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
										}else{
											contenidoEmail.setEmisor(solicitud.getCodEmisor());
										}	
										
										contenidoEmail.setTipoSolicitud("Prorroga de Cheque");
										contenidoEmail.setTipoProrroga("Prorroga.");
										contenidoEmail.setMotivoProrroga("");
										
										
									    /*datos de archivos */
										contenidoEmail.setListaArchivos(listaArchivoGuardado);
										contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
										contenidoEmail.setListaObservaciones(listaObservaciones);
										
										/*datos de prorrogas*/
										contenidoEmail.setListaProrrogas(listaProrrogasAux);
										
										List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
										if(listaUsuarioCorreoagregados != null){
											for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
												if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !ucdto.getUsername().equals(usuarioLogueado.getAlias().trim())  ){
													log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
													Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
													if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
														if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
															ultimaListaCorreoPrueba.add(usuarioAux);	
															usuarioAux = new Usuariosegur();
														}											
													}
												}
											}
										}
										/*eliminar esto, cuando se establaque la solucion*/
										Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
										if(emisorCorreo != null){
											if(!ultimaListaCorreoPrueba.contains(emisorCorreo)){
												ultimaListaCorreoPrueba.add(emisorCorreo);
											}
											emisorCorreo = null;
										}
										Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
										if(correoAdministrador != null){
											ultimaListaCorreoPrueba.add(correoAdministrador);
											correoAdministrador = null;
										}										
										contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);											
										
										
										try{
											if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
												emailAlerta.enviarSolicitudRespuestaProrroga(contenidoEmail);	
											}	
										}catch (Exception e) {
											log.debug("paso por el error #0"+ e.getMessage());
										}
									}								
									insertarLogs(solicitud, 7);
									LcredEstado estado = ObtenerEstadoSolictud("NU");
									insertHitos(solicitud, estado, "NADA", 0);
									entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
									             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
									entityManager.flush();
									
									evaluarDerivaciones(solicitud.getId().getNumSolicitud());
								}	

						}
					}
				}
		}catch (Exception e) {
			log.error("Error al devolver la solicitud #0", e.getMessage());
		}
		return ;		
	}
	public void salirAnulacionSolicitud(){
		  log.debug("salir del pop.");	
		  if(this.salirDelMensaje == false){
			  this.salirDelMensaje = true;
		  }
	}
	public void cerrarMotivoRechazar(){
		
		this.setMotivoRechazo(null);
		this.listaMotivosRechazosAgregados = new ArrayList<LcredMotivoRechazo>(0);
		this.mensajeRechazoSolicitud = null;
		
	}	
	public void cerrarAprobacionFinal(){
		this.setAprobarRechazar(null);
		this.setMensajeAprobacionSolicitud(null);
	}	
	public void  validarDatosRespuesta(int tipoSolicitud){
		try{
			if(tipoSolicitud  == 11){
				
			}
		}catch (Exception e) {
			log.error("Error, al los datos tipo de  solicitud.", e.getMessage());
		}
	}
	
	public void seleccionarEnvioDeCorreoAndNoEnvio(){
		try{
			if(this.envioToNoEnvioCorreo != null && !"".equals(this.envioToNoEnvioCorreo)){
				if("Envio".equals(this.envioToNoEnvioCorreo)){
					this.habilitacionEnvioCorreo = true;
				}else{
					this.habilitacionEnvioCorreo = false;
				}
			}else{
				this.habilitacionEnvioCorreo = false;
			}
		}catch (Exception e) {
			log.error("Error al seleccionar el envio y no envio del administardor #0", e.getMessage());
		}
	}
	
	public void ingresoAprobar(){
		if(this.solicitud != null && this.tipoSolicitudAux != null){
			 log.debug("solicitud #0 tipo de solicitud #1", solicitud.getId().getNumSolicitud(), tipoSolicitudAux.getCodTipoSolicitud());
			 if(usuarioSegur != null && (usuarioSegur.getAlias().toLowerCase()).equals("administrador")){
				 log.debug("SIN RESTRINCCION ADMINISTRADOR");
			 }else{
			
				if(solicitud != null){
					if(solicitud.getEstado().equals("P")){
						this.mensajeGlogal = "La solicitud esta procesada y/o aprobada.";
						return;
					}else if(solicitud.getEstado().equals("I") || solicitud.getEstado().equals("DR") || solicitud.getEstado().equals("DC") || solicitud.getEstado().equals("ES")){
						this.mensajeGlogal = "Solicitud debe estar en an√°lisis";
						return;
					}else{
						this.mensajeGlogal = null;
					}
				}
			}
			if(this.listaUsuarioCorreoagregados ==null){
				this.mensajeGlogal = "Debe ingresar los usuarios para el envio de correo.";
				return;
			}else{
				if(this.listaUsuarioCorreoagregados.size() == 0 ){
					this.mensajeGlogal = "Debe ingresar los usuarios para el envio de correo.";
					return ;
				}
			}
			
			if(usuarioSegur != null && (usuarioSegur.getAlias().toLowerCase()).equals("administrador")){
				 log.debug("SIN RESTRINCCION ADMINISTRADOR");
			}else{
				 Long existe = scoringService.getEvaluarSolicitudAprobacionAnalisisEvaluarTodosObligatotios(solicitud.getId().getNumSolicitud());
				 if(existe != null){
					this.mensajeGlogal = "Estimado, falta "+ existe +" usuarios que aprueben y/o rechacen la solicitud.";
					return;					 
				 }else{
					 this.mensajeGlogal = null; 
				 }				
				
				if(this.observacionesFinales ==null){
					this.mensajeGlogal = "Debe ingresar una observaci√≥n final.";
					return;
				}else{
					if("".equals(this.observacionesFinales)){
						this.mensajeGlogal = "Debe ingresar una observaci√≥n final.";
						return ;
					}
				}
			}
			if(this.paginaIngreso != 23){
				try{
					/*revisar si existe evalucion*/
					Long existe = scoringService.getEvaluarSolicitudHitosDerivadaAprobacionAnalisis(solicitud.getId().getNumSolicitud());	
					if(existe != null && existe.longValue() == 0){
						/*evaluar por monto del riesgo kupfer*/
						if(usuarioSegur != null && expoRiesgoKh != null){
							int tipoCuenta = 0;
							if("Mixto".equals(solicitud.getCanal())){
								tipoCuenta = TipoCuentasKupferType.MX.ordinal();
							}else if("Kupfer Express".equals(solicitud.getCanal())){
								tipoCuenta = TipoCuentasKupferType.KX.ordinal();
							}else if("Grandes Cuentas".equals(solicitud.getCanal())){
								tipoCuenta = TipoCuentasKupferType.GC.ordinal();
							}					
							
							List<Long[]> listaMonto = scoringService.obtenerMontosSegunIdPersonalAndTipoCuenta(usuarioSegur.getIdPersonal(), tipoCuenta);
							if(listaMonto != null && listaMonto.size() > 0){
								try{ 
									Long minimo = null;	Long maximo = null; Long minimoCompartido = null; Long maximoCompartido = null;
									for(Object[] montos: listaMonto){
										if(montos[0] != null){
											minimo = Long.parseLong(montos[0].toString());
										}
										if(montos[1] != null){
											maximo =  Long.parseLong(montos[1].toString());
										}
										if(montos[2] != null){
											minimoCompartido =  Long.parseLong(montos[2].toString());
										}
										if(montos[3] != null){
											maximoCompartido =  Long.parseLong(montos[3].toString());
										}									
									}
									
	
									if(minimo != null && maximo != null && minimoCompartido != null && minimoCompartido != null && maximoCompartido != null){	
										if(expoRiesgoKh.getMontoRiesgoKupfer() >= minimo && expoRiesgoKh.getMontoRiesgoKupfer() <= maximo){
											log.debug("prueba aprobar sin problema responsabilidad de usuario #0", usuarioLogueado.getAlias());
										}else if(expoRiesgoKh.getMontoRiesgoKupfer() >= minimoCompartido && expoRiesgoKh.getMontoRiesgoKupfer() <= maximoCompartido){
											this.mensajeGlogal = "La solicitud requeire una aprobaci√≥n compartida por el riesgo que posee.";
											return ;
										}
									}else{
										this.mensajeGlogal = "Estimado usted no posee atribuciones";
										return ;
									}
								}catch (Exception e) {
									log.error("Error, al sacar los montos para evaluar la solicitud #0", e.getMessage());
								}
								
							}
						
						}
					}
				}catch (Exception e) {
					log.error("Error, al revisar si ya existe aprobacion comportida. #0", e.getMessage());
				}
			
			}else{
				
				try{
					/*revisar si existe evalucion*/
					Long existe = scoringService.getEvaluarSolicitudHitosDerivadaAprobacionAnalisis(solicitud.getId().getNumSolicitud());	
					if(existe != null && existe.longValue() == 0){
						/*evaluar por monto del riesgo kupfer*/
						if(usuarioSegur != null && solicitud.getMontoRiesgoKupferCalculado() != null){
							int tipoCuenta = 0;
							if("Mixto".equals(solicitud.getCanal())){
								tipoCuenta = TipoCuentasKupferType.MX.ordinal();
							}else if("Kupfer Express".equals(solicitud.getCanal())){
								tipoCuenta = TipoCuentasKupferType.KX.ordinal();
							}else if("Grandes Cuentas".equals(solicitud.getCanal())){
								tipoCuenta = TipoCuentasKupferType.GC.ordinal();
							}					
							
							List<Long[]> listaMonto = scoringService.obtenerMontosSegunIdPersonalAndTipoCuenta(usuarioSegur.getIdPersonal(), tipoCuenta);
							if(listaMonto != null && listaMonto.size() > 0){
								try{ 
									Long minimo = null;	Long maximo = null; Long minimoCompartido = null; Long maximoCompartido = null;
									for(Object[] montos: listaMonto){
										if(montos[0] != null){
											minimo = Long.parseLong(montos[0].toString());
										}
										if(montos[1] != null){
											maximo =  Long.parseLong(montos[1].toString());
										}
										if(montos[2] != null){
											minimoCompartido =  Long.parseLong(montos[2].toString());
										}
										if(montos[3] != null){
											maximoCompartido =  Long.parseLong(montos[3].toString());
										}									
									}
	
									if(minimo != null && maximo != null && minimoCompartido != null && minimoCompartido != null && maximoCompartido != null){	
										if(solicitud.getMontoRiesgoKupferCalculado().longValue() >= minimo && solicitud.getMontoRiesgoKupferCalculado().longValue() <= maximo){
											log.debug("puede aprobar sin problema responsabilidad de usuario #0", usuarioLogueado.getAlias());
										}else if(solicitud.getMontoRiesgoKupferCalculado().longValue() >= minimoCompartido && solicitud.getMontoRiesgoKupferCalculado().longValue() <= maximoCompartido){
											this.mensajeGlogal = "La solicitud requeire una aprobaci√≥n compartida por el riesgo que posee.";
											return ;
										}
									}else{
										this.mensajeGlogal = "Estimado usted no posee atribuciones";
										return ;
									}
								}catch (Exception e) {
									log.error("Error, al sacar los montos para evaluar la solicitud #0", e.getMessage());
									this.mensajeGlogal = "Error, al sacar los montos para evaluar la solicitud" + solicitud.getId().getNumSolicitud();
								}
								
							}
						}
					}
				}catch (Exception e) {
					log.error("Error, al revisar si ya existe aprobacion comportida. #0", e.getMessage());
				}
				
			}
			
			
			this.mensajeGlogal = null;
		}else{
			this.mensajeGlogal = "La solicitud no tiene asociada el tipo de solicitud...";
		}
	}	
	public void enviarAseguro(){
		if(this.solicitud != null && this.tipoSolicitudAux != null){
			log.debug("solicitud #0 tipo de solicitud #1", solicitud.getId().getNumSolicitud(), tipoSolicitudAux.getCodTipoSolicitud());
			if(solicitud != null){
				if(solicitud.getEstado().equals("P")){
					this.mensajeGlogal = "La solicitud esta procesada y/o aprobada.";
					return;
				}else if(solicitud.getEstado().equals("I") || solicitud.getEstado().equals("DR") || solicitud.getEstado().equals("DC")){
					this.mensajeGlogal = "Solicitud debe estar en an√°lisis";
					return;
				}else{
					this.mensajeGlogal = null;
				}
			}
			
			
			if(this.listaUsuarioCorreoagregados ==null){
				this.mensajeGlogal = "Debe ingresar los usuarios para el envio de correo.";
				return;
			}else{
				if(this.listaUsuarioCorreoagregados.size() == 0 ){
					this.mensajeGlogal = "Debe ingresar los usuarios para el envio de correo.";
					return ;
				}
			}
			this.mensajeGlogal = null;
		}else{
			this.mensajeGlogal = "La solicitud no tiene asociada el tipo de solicitud...";
		}
	}	
	public String aprobarSolicitudes(){
		this.habilitaMensajeAprobacion = false;
		try{
			if(this.paginaIngreso == 11 || this.paginaIngreso == 12){
				if(solicitud != null && venta != null){
					if(this.modificarVenta){
						solicitud.setEstado("A");
						solicitud.setUsuarioActual(solicitud.getCodEmisor());
						solicitud.setDevolver(true);
						
						venta.setMontoFinal( new BigDecimal(this.montoNuevo));
						venta.setMontoPieFinal(new BigDecimal(this.pieNuevo));
						if(this.observacionesFinales != null){
							venta.setObservacionesFinal(this.observacionesFinales);
						}else{
							venta.setObservacionesFinal("");
						}
						venta.setStatusSolicitud(solicitud.getEstado());
						String tipo = null;
						if(this.normalCuota.equals("11")){
							tipo = "N";
							venta.setTipoVentaFinal(tipo.charAt(0));
							
						}else if(this.normalCuota.equals("12")){
							tipo = "C";
							venta.setTipoVentaFinal(tipo.charAt(0));
						}
					}else{
						solicitud.setEstado("A");
						solicitud.setUsuarioActual(solicitud.getCodEmisor());
						solicitud.setDevolver(true);
	
						venta.setMontoFinal( venta.getMontoInicial());
						venta.setMontoPieInicial(venta.getMontoPieInicial());
						if(this.observacionesFinales != null){
							venta.setObservacionesFinal(this.observacionesFinales);
						}else{
							venta.setObservacionesFinal("");
						}						
						venta.setTipoVentaFinal(venta.getTipoVentaInicial());
						venta.setStatusSolicitud(solicitud.getEstado());
						
					}
					
					boolean exito = scoringService.mergerSolicitud(solicitud);
					boolean exitoVenta = scoringService.mergerSolicitudVentaPuntual(venta);
					entityManager.refresh(solicitud);
					entityManager.refresh(venta);
					if(exito == true && exitoVenta == true){
						this.mensajeGlogal = "Se aprueba la solictud N¬∞ "+ solicitud.getId().getNumSolicitud();
						/*se agrega la observaciones final de una aprobacion final */
						LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
						Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							id.setCorrelativo(correlativo);
							id.setFecha(new Date());
							id.setHora(new Date());
							id.setNumSolicitud(solicitud.getId().getNumSolicitud());
							id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							id.setObservacion(this.observacionesFinales);
							id.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(id);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}
						List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
						if(listaFileUploadedDTOs != null && listaFileUploadedDTOs.size() != 0){
							for(FileUploadedDTO archivo :listaFileUploadedDTOs){
							   try {							
									OutputStream ostream = null;
									String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
									nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);	

									String url = "archivosRespuesta"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
									
									//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
									ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
									log.debug("url #0",archivo.getUploadItem().getContentType());
									IOUtils.copyStream(ostream, istream);
									ostream.flush();
									ostream.close();
									istream.close();
									//guardar datos en la BD
									ArchivoAdjunto archivoAux = new ArchivoAdjunto();
									archivoAux.setSolicitud(solicitud);
									archivoAux.setUrl(url);
									archivoAux.setUbicacion("");
									archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
									archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
									archivoAux.setUsuario(usuarioLogueado);	
									archivoAux.setFechaCreacion(new Date());
									entityManager.persist(archivoAux);
									entityManager.flush();
									ConceptoDTO objetoAux = new ConceptoDTO();
									objetoAux.setNombreArchivo(nombreArchivo);
									objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
									listaArchivoGuardadoResp.add(objetoAux);
									objetoAux = null;
									
								} catch (FileNotFoundException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}
								catch (IOException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}catch (Exception e) {
									e.printStackTrace();
								}							
							}	
						}
						
						List<ConceptoDTO> lista = scoringService.getConceptoMonto(solicitud.getId().getNumSolicitud());
						List<ConceptoDTO> listaProducto = scoringService.getProductos(solicitud.getId().getNumSolicitud());
						List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());

						if(listaUsuarioCorreoagregados != null){
							Locale locale = new Locale("es","CL");
							/*setando los varlores del dto para el correo*/
							ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
							contenidoEmail.setTituloRespuesta("Respuesta solicitud ");
							contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
							contenidoEmail.setColor("VERDE");
							contenidoEmail.setAccion("Se Aprueba La Solicitud "+ solicitud.getId().getNumSolicitud());
							contenidoEmail.setAccionRespuesta("");
							contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
							contenidoEmail.setRespuestaFinalSolicitud(this.observacionesFinales);
							contenidoEmail.setOpcionFinal(3);
							contenidoEmail.setSolicitud(solicitud);
							NumberFormat numberFormatter;
							StringBuffer rutNombre = new StringBuffer();
							rutNombre.append(cliente.getRut());
							rutNombre.append(" / ");
							rutNombre.append(modificarTexto(cliente.getRazonSocial()));
							contenidoEmail.setRutNombre(rutNombre.toString());
							contenidoEmail.setSoloNombre(cliente.getRazonSocial());
							contenidoEmail.setCanalVenta(cliente.getCanalVenta());
							contenidoEmail.setSucursal(sucursal.getDescripcion());
							UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
							if(ususarioEmisor != null){
								contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
							}else{
								contenidoEmail.setEmisor(solicitud.getCodEmisor());
							}
							
							contenidoEmail.setTipoSolicitud("Venta Puntual");
							contenidoEmail.setTipoVentas(modificarTexto(tipoSolicitudAux.getDesTipoSolicitud()));
							
							numberFormatter = NumberFormat.getNumberInstance(locale);
							log.debug(numberFormatter.format(venta.getMontoInicial()));
							
							contenidoEmail.setMontoMasIva(numberFormatter.format(venta.getMontoInicial()));
							contenidoEmail.setMontoPie(numberFormatter.format(venta.getMontoPieInicial()));
							contenidoEmail.setMargenNegocio(String.valueOf(numberFormatter.format(this.margenGlogal)));
							contenidoEmail.setFormaPago(this.formaPago);
							contenidoEmail.setMotivoCompra(this.motivoCompra);
							contenidoEmail.setMontoMasIvaAprobado(numberFormatter.format(this.montoNuevo));
							contenidoEmail.setMontoPieAprobado(numberFormatter.format(this.pieNuevo));	
						
							
							if("VIG".equals(cliente.getVigenciaSeguro().trim())){
								contenidoEmail.setLineaSeguro(numberFormatter.format(cliente.getMontoSeguro()));
							}else{
								contenidoEmail.setLineaSeguro(numberFormatter.format(0));
							}								
							contenidoEmail.setCoberturaSeguro(numberFormatter.format(expoRiesgoKh.getMontoAsegurado()));
							contenidoEmail.setPeakCredito(numberFormatter.format(expoRiesgoKh.getPeakCredito()));
							contenidoEmail.setRisgoKupfer(numberFormatter.format(expoRiesgoKh.getMontoRiesgoKupfer()));
							contenidoEmail.setListaProductos(listaProducto);
							contenidoEmail.setListaConceptoMontos(lista);
							contenidoEmail.setListaArchivos(listaArchivoGuardado);
							contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
							contenidoEmail.setListaObservaciones(listaObservaciones);						

							List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
							if(listaUsuarioCorreoagregados != null){
								for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
									if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !ucdto.getUsername().equals(usuarioLogueado.getAlias().trim())  ){
										log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
										Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
										if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
											if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
												ultimaListaCorreoPrueba.add(usuarioAux);	
												usuarioAux = new Usuariosegur();
											}											
										}
									}
								}
							}	
							/*eliminar esto, cuando se establaque la solucion*/
							Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
							if(emisorCorreo != null){
								if(!ultimaListaCorreoPrueba.contains(emisorCorreo)){
									ultimaListaCorreoPrueba.add(emisorCorreo);
								}
								emisorCorreo = null;
							}
							Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
							if(correoAdministrador != null){
								ultimaListaCorreoPrueba.add(correoAdministrador);
								correoAdministrador = null;
							}							
							
							contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);									
							try{
								if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
									emailAlerta.enviarRespuestaSolicitudVenta(contenidoEmail);	
								}	
							}catch (Exception e) {
								log.debug("paso por el error #0"+ e.getMessage());
							}
							
							/*ingersar un registro  de  usurio derivada*/
							LcredEstado estadoAux = ObtenerEstadoSolictud("AE");
							Long numero = scoringService.getSolicitudUsuarioDerivacionMaximo();
							SolicitudUsuarioDerivada sud = new SolicitudUsuarioDerivada();
							sud.setSystemId(numero);
							sud.setIdSolicitud(solicitud.getId().getNumSolicitud());
							sud.setEstado(estadoAux);
							sud.setFechaHora(new Date());
							sud.setUsuario(usuarioLogueado);
							sud.setConfirmacionObligatoria(true);
							sud.setConfirmacion(true);
							sud.setCodEstadoDerivada(estadoAux.getCodEstado());
							boolean exitoingreso = scoringService.persitSolicitudUsuarioDerivacion(sud);
							log.debug(exitoingreso);							
							
						}
						
						insertarLogs(solicitud, 8);
						LcredEstado estado = ObtenerEstadoSolictud("A");
						insertHitos(solicitud, estado, "NADA", 0);
						entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
						             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
						entityManager.flush();
						entityManager.refresh(solicitud);
						
						evaluarDerivaciones(solicitud.getId().getNumSolicitud());
					}
				}	
				
			}else if(this.paginaIngreso == 21 || this.paginaIngreso == 22 || this.paginaIngreso == 23){
				if(solicitud != null && credito != null){
					if(this.modificarCredito){
						solicitud.setEstado("A");
						solicitud.setUsuarioActual(usuarioLogueado.getAlias());
						solicitud.setDevolver(true);

						credito.setMontoNormalFinal( new BigDecimal(this.montoLineaCreditoNuevo));
						if(innNomRiesgoNueva.equals("21")){
							credito.setOpcionNormalFinal("I");
						}else if(innNomRiesgoNueva.equals("22")){
							credito.setOpcionNormalFinal("N");
						}else if(innNomRiesgoNueva.equals("23")){
							credito.setOpcionNormalFinal("R");
						}

						String[] arrayRiesgo = this.clsRiesgoNuevo.split("-");
						if(arrayRiesgo != null){
							credito.setCondRiesgoFinal(arrayRiesgo[0].toString());
						}
						
						String[] arrayPago = this.cPagoNuevo.split("-");
						if(arrayPago != null){
							credito.setCondPagoFinal(arrayPago[0].toString());
						}
						credito.setStatusSolicitud(solicitud.getEstado());
						credito.setObservacionesFinal(this.observacionesFinales);
						

					}else{
						solicitud.setEstado("A");
						solicitud.setUsuarioActual(usuarioLogueado.getAlias());
						solicitud.setDevolver(true);
	
						credito.setMontoNormalFinal(credito.getMontoNormalInicial());
						credito.setOpcionNormalFinal(credito.getOpcionNormalInicial().toString());
						credito.setCondRiesgoFinal(credito.getCondRiesgoInicial());
						credito.setCondPagoFinal(credito.getCondPagoInicial());
						credito.setStatusSolicitud(solicitud.getEstado());
						
						credito.setObservacionesFinal(this.observacionesFinales);
					}		
					
					
					boolean exito = scoringService.mergerSolicitud(solicitud);
					boolean exitoVenta = scoringService.mergerSolicitudLineaCredito(credito);
					entityManager.refresh(solicitud);
					entityManager.refresh(credito);
					
					if(exito == true && exitoVenta == true){
						Locale locale = new Locale("es","CL");
						NumberFormat numberFormatter;
						numberFormatter = NumberFormat.getNumberInstance(locale);

						List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
						this.mensajeGlogal = "Se aprueba la solictud N¬∞ "+ solicitud.getId().getNumSolicitud();
						/*se agrega la observaciones final de una aprobacion final */
						LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
						Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							id.setCorrelativo(correlativo);
							id.setFecha(new Date());
							id.setHora(new Date());
							id.setNumSolicitud(solicitud.getId().getNumSolicitud());
							id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							id.setObservacion(this.observacionesFinales);
							id.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(id);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}
						
						if(listaFileUploadedDTOs != null && listaFileUploadedDTOs.size() != 0){
							for(FileUploadedDTO archivo :listaFileUploadedDTOs){
							   try {							
									OutputStream ostream = null;
									String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
									nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);	

									String url = "archivosRespuesta"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
									
									//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
									ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
									log.debug("url #0",archivo.getUploadItem().getContentType());
									IOUtils.copyStream(ostream, istream);
									ostream.flush();
									ostream.close();
									istream.close();
									//guardar datos en la BD
									ArchivoAdjunto archivoAux = new ArchivoAdjunto();
									archivoAux.setSolicitud(solicitud);
									archivoAux.setUrl(url);
									archivoAux.setUbicacion("");
									archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
									archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
									archivoAux.setUsuario(usuarioLogueado);	
									archivoAux.setFechaCreacion(new Date());
									entityManager.persist(archivoAux);
									entityManager.flush();
									ConceptoDTO objetoAux = new ConceptoDTO();
									objetoAux.setNombreArchivo(nombreArchivo);
									objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
									listaArchivoGuardadoResp.add(objetoAux);
									objetoAux = null;
									
								} catch (FileNotFoundException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}
								catch (IOException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}catch (Exception e) {
									e.printStackTrace();
								}							
							}	
						}
						List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());

						
						
						if(listaUsuarioCorreoagregados != null){
							/* sacar los datos concecptos involucrados*/
							List<SolicitudConceptosNegocioLC> listaConceptoInvolucarado = scoringService
									.getListarSolicitudConceptosNegocioLC(solicitud.getId().getNumSolicitud());	
							
							/*crear lista de concepto de involucrados*/
							List<ConceptoDTO> conceptosInvolucrado = new ArrayList<ConceptoDTO>(0);
							if(listaConceptoInvolucarado != null){
								for(SolicitudConceptosNegocioLC scn : listaConceptoInvolucarado){
									ConceptoDTO ci = new ConceptoDTO();
									ci.setDescripcion(scn.getConceptosNegocio().getDescripcion());
									ci.setMontoFormateado(numberFormatter.format(scn.getMonto()));
									conceptosInvolucrado.add(ci);
									ci=null;
								}
							}
							/*setando los varlores del dto para el correo*/
							ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
							contenidoEmail.setTituloRespuesta("Respuesta solicitud ");
							contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
							contenidoEmail.setColor("VERDE");
							contenidoEmail.setAccion("Se Aprueba La Solicitud "+ solicitud.getId().getNumSolicitud());
							contenidoEmail.setAccionRespuesta("");
							contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
							contenidoEmail.setRespuestaFinalSolicitud(this.observacionesFinales);
							contenidoEmail.setOpcionFinal(3);							
							contenidoEmail.setSolicitud(solicitud);
							
							
							/*setando los varlores del dto para el correo*/
							StringBuffer rutNombre = new StringBuffer();
							rutNombre.append(cliente.getRut());
							rutNombre.append(" / ");
							rutNombre.append(modificarTexto(cliente.getRazonSocial()));
							contenidoEmail.setRutNombre(rutNombre.toString());
							contenidoEmail.setSoloNombre(solicitud.getNomCliente());
							contenidoEmail.setCanalVenta(modificarTexto(solicitud.getCanal()));

							Sucursal suc = obtenerObjetoSucursal(solicitud.getCodSucursal());
							if(suc != null){
								contenidoEmail.setSucursal(suc.getDescripcion());
							}else{
								contenidoEmail.setSucursal(solicitud.getCodSucursal());
							}
							
							UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
							if(ususarioEmisor != null){
								contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
							}else{
								contenidoEmail.setEmisor(modificarTexto(solicitud.getCodEmisor()));
							}
							contenidoEmail.setTipoSolicitud("Linea de Cr√©dito.");
							contenidoEmail.setTipoLineaCredito(tipoSolicitudAux.getDesTipoSolicitud());

							if("VIG".equals(solicitud.getVigSeguro().trim())){
								contenidoEmail.setLineaSeguroActual(numberFormatter.format(expoRiesgoKh.getMontoAsegurado()));
							}else{
								contenidoEmail.setLineaSeguroActual(numberFormatter.format(0));
							}
							
							if(this.modificarCredito){
								log.debug(numberFormatter.format(this.montoLineaCreditoNuevo));
								contenidoEmail.setMontoSolicitado(numberFormatter.format(this.montoLineaCreditoNuevo));
								contenidoEmail.setCondicionRiesgo(this.clsRiesgoNuevo);
								contenidoEmail.setCondicionPago(this.cPagoNuevo);
								
							}else{
								contenidoEmail.setMontoSolicitado(numberFormatter.format(this.montoCredito));
								contenidoEmail.setCondicionRiesgo(this.clsRiesgo);
								contenidoEmail.setCondicionPago(this.cPago);
							}
							
							contenidoEmail.setProyecto(credito.getDpDescripcionProyecto());
							contenidoEmail.setMontoProyecto(credito.getDpMonto());
							contenidoEmail.setPlazoEjecucion(modificarTexto(credito.getDpPlazoEjecucion()));
							contenidoEmail.setPotencialCompra(credito.getDpPotencialCompra());
							
							
							List<String> listaSocios = new ArrayList<String>(0);
							if(credito.getDpSocios() != null){
								String[] array = credito.getDpSocios().split(",");
								if(array != null){
									for(String s : array){
										listaSocios.add(s);
									}
								}
							}
							
						    /*datos de lineas credito solCredito */
							contenidoEmail.setListaSocios(listaSocios);
							contenidoEmail.setListaConceptoMontos(conceptosInvolucrado);
							contenidoEmail.setListaArchivos(listaArchivoGuardado);
							contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
							contenidoEmail.setListaObservaciones(listaObservaciones);
							
							List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
							if(listaUsuarioCorreoagregados != null){
								for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
									if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !ucdto.getUsername().equals(usuarioLogueado.getAlias().trim())  ){
										log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
										Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
										if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
											if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
												ultimaListaCorreoPrueba.add(usuarioAux);	
												usuarioAux = new Usuariosegur();
											}											
										}
									}
								}
							}	
							/*eliminar esto, cuando se establaque la solucion*/
							Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
							if(emisorCorreo != null){
								if(!ultimaListaCorreoPrueba.contains(emisorCorreo)){
									ultimaListaCorreoPrueba.add(emisorCorreo);
								}								
								emisorCorreo = null;
							}
							Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
							if(correoAdministrador != null){
								ultimaListaCorreoPrueba.add(correoAdministrador);
								correoAdministrador = null;
							}							
							contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);								
							/*cambio en sap*/
							if(wvarActualizarSap){
								try {
						        	/*cambia condicion de riesgo*/
						        	JCoFunction functionDatosCreditoRiesgo;
						    		SapSystem system = new SapSystem(globalParameters.getNameSap(),
						    				globalParameters.getIpSap(),
						    				globalParameters.getClientSap(), 
						    				globalParameters.getSystemNumberSap(),
						    				globalParameters.getUserSap(),
						    				globalParameters.getPasswordSap());        		
						               Connect connect = new Connect(system);  
						    		   functionDatosCreditoRiesgo = connect.getFunction("ZMODIFICA_CONDICIONES_VENTA_II"); // Nombre RFC
						    		   log.debug(cliente.getCleanRut());
						               functionDatosCreditoRiesgo.getImportParameterList().setValue("I_KUNNR", cliente.getCleanRut());//rut del cliente
						               functionDatosCreditoRiesgo.getImportParameterList().setValue("I_TIPMOD", "CR"); // tipo de documento	
						               
						               long monto = credito.getMontoNormalFinal().longValue();
						               long riesgoKupferCalculado = (long)0;
						               if(this.modificarCredito){
						            	   if(this.paginaIngreso == 23){
							   					long montoSeguro = (long)0;
												if(cliente.getSeguro() != null && cliente.getSeguro().equals("VIG") ){
													montoSeguro = cliente.getMontoSeguro().longValue();
												}
												log.debug("monto de seguro #0", montoSeguro);
												log.debug("monto linea Riesgo K√ºpfer #0", monto);
												long totalLinea = montoSeguro + monto;
												log.debug("monto de Seguro + monto solicitado #0", totalLinea);
												riesgoKupferCalculado = totalLinea - montoSeguro;
												log.debug("total de linea - monto de seguro #0", riesgoKupferCalculado);
												functionDatosCreditoRiesgo.getImportParameterList().setValue("I_KLIMK", riesgoKupferCalculado);
						            	   }else{
						            		   functionDatosCreditoRiesgo.getImportParameterList().setValue("I_KLIMK", credito.getMontoNormalFinal().longValue());
						            	   }
						            	   
						            	   functionDatosCreditoRiesgo.getImportParameterList().setValue("I_CTLPC", credito.getCondRiesgoFinal());
						               }else{
						            	   functionDatosCreditoRiesgo.getImportParameterList().setValue("I_KLIMK", credito.getMontoNormalFinal().longValue());
						            	   functionDatosCreditoRiesgo.getImportParameterList().setValue("I_CTLPC", credito.getCondRiesgoFinal());
						               }
						               connect.execute(functionDatosCreditoRiesgo);
						        } catch (Exception e) {
						               log.debug("error al cargar datos cliente #0",e.toString());
						        }
						    	/*cambio en sap*/
						        try {
						        	/*cambia condicion de pago*/
						        	JCoFunction functionDatosCreditoPago;
						    		SapSystem system = new SapSystem(globalParameters.getNameSap(),
						    				globalParameters.getIpSap(),
						    				globalParameters.getClientSap(), 
						    				globalParameters.getSystemNumberSap(),
						    				globalParameters.getUserSap(),
						    				globalParameters.getPasswordSap());       		
					               Connect connect = new Connect(system);  
					    		   functionDatosCreditoPago = connect.getFunction("ZMODIFICA_CONDICIONES_VENTA_II"); // Nombre RFC
					    		   log.debug(cliente.getCleanRut());
					               functionDatosCreditoPago.getImportParameterList().setValue("I_KUNNR", cliente.getCleanRut());//rut del cliente
					               functionDatosCreditoPago.getImportParameterList().setValue("I_TIPMOD", "CP"); // tipo de bloqueo y desbloqueo	
					               if(this.modificarCredito){
					            	   functionDatosCreditoPago.getImportParameterList().setValue("I_ZTERM", credito.getCondPagoFinal());
					               }else{
					            	   functionDatosCreditoPago.getImportParameterList().setValue("I_ZTERM", credito.getCondPagoFinal());
					               }
					               connect.execute(functionDatosCreditoPago);
						        	
						        } catch (Exception e) {
						               log.debug("error al cargar datos cliente #0",e.toString());
						        }									
							}
							/*fin de la actualizaciones en SAP*/
							try{
								if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
							        /*envio de correo*/
							        emailAlerta.enviarRespuestaSolicitudLinea(contenidoEmail);	
									/*ingersar un registro  de  usurio derivada*/
									LcredEstado estadoAux = ObtenerEstadoSolictud("AE");
									Long numero = scoringService.getSolicitudUsuarioDerivacionMaximo();
									SolicitudUsuarioDerivada sud = new SolicitudUsuarioDerivada();
									sud.setSystemId(numero);
									sud.setIdSolicitud(solicitud.getId().getNumSolicitud());
									sud.setEstado(estadoAux);
									sud.setFechaHora(new Date());
									sud.setUsuario(usuarioLogueado);
									sud.setConfirmacionObligatoria(true);
									sud.setConfirmacion(true);
									sud.setCodEstadoDerivada(estadoAux.getCodEstado());
									boolean exitoingreso = scoringService.persitSolicitudUsuarioDerivacion(sud);
									log.debug(exitoingreso);											
								}	
							}catch (Exception e) {
								log.debug("paso por el error #0"+ e.getMessage());
							}
						}	
						
						insertarLogs(solicitud, 8);
						LcredEstado estado = ObtenerEstadoSolictud("A");
						insertHitos(solicitud, estado, "NADA", 0);
						entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
						             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
						entityManager.flush();
						entityManager.refresh(solicitud);
						
						evaluarDerivaciones(solicitud.getId().getNumSolicitud());
					}
				}	
			}else if(this.paginaIngreso == 31){/* aprobar  la solicitiudes condiciones */
				if(solicitud != null && condicion != null ){
					if(this.modificarCondicion){
						String var= "S";
						solicitud.setEstado("A");
						solicitud.setUsuarioActual(solicitud.getCodEmisor());
						solicitud.setDevolver(true);
						if(condicionRiesgoNew == true ){
							if(this.clsRiesgoNuevo != null){
								String[] arrayRiesgo = this.clsRiesgoNuevo.split("-");
								if(arrayRiesgo != null){
									condicion.setCodCondRiesgoFinal(arrayRiesgo[0].toString());
									condicion.setCondRiesgoFinal(var.charAt(0));
								}
							}
						}
						
						if(condicionPagoNew == true){
							if(this.cPagoNuevo != null){
								String[] arrayPago = this.cPagoNuevo.split("-");
								if(arrayPago != null){
									condicion.setCodCondPagoFinal(arrayPago[0].toString());
									condicion.setCondPagoFinal(var.charAt(0));
								}
								
							}
						}
						condicion.setStatusSolicitud(solicitud.getEstado());
						condicion.setObservacionesFinal(this.observacionesFinales);
						
					}else{
						solicitud.setEstado("A");
						solicitud.setUsuarioActual(solicitud.getCodEmisor());
						solicitud.setDevolver(true);
						
						if(condicionRiesgo == true){
							condicion.setCodCondRiesgoFinal(condicion.getCodCondRiesgoInicial());
							condicion.setCondRiesgoFinal(condicion.getCondRiesgoInicial());							
						}
						if(condicionPago == true){
							condicion.setCodCondPagoFinal(condicion.getCodCondPagoInicial());
							condicion.setCondPagoFinal(condicion.getCondPagoInicial());						
						}
						condicion.setObservacionesFinal(this.observacionesFinales);
						condicion.setStatusSolicitud(solicitud.getEstado());
					}
					
					/*actualizaciones la solicitud */
					boolean exito = scoringService.mergerSolicitud(solicitud);
					boolean exitoCondicion = scoringService.mergerSolicitudCondiciones(condicion);
					entityManager.refresh(solicitud);
					entityManager.refresh(condicion);
					if(exito == true && exitoCondicion == true){
						List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
						/*se agrega la observaciones final de una aprobacion final */
						LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
						Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							id.setCorrelativo(correlativo);
							id.setFecha(new Date());
							id.setHora(new Date());
							id.setNumSolicitud(solicitud.getId().getNumSolicitud());
							id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							id.setObservacion(this.observacionesFinales);
							id.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(id);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}
						this.mensajeGlogal = "Se aprueba la solictud N¬∞ "+ solicitud.getId().getNumSolicitud();						
						if(listaFileUploadedDTOs != null && listaFileUploadedDTOs.size() != 0){
							for(FileUploadedDTO archivo :listaFileUploadedDTOs){
							   try {							
									OutputStream ostream = null;
									String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
									nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);	

									String url = "archivosRespuestaCC"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									
									InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
									//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
									ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
									log.debug("url #0",archivo.getUploadItem().getContentType());
									IOUtils.copyStream(ostream, istream);
									ostream.flush();
									ostream.close();
									istream.close();
									//guardar datos en la BD
									ArchivoAdjunto archivoAux = new ArchivoAdjunto();
									archivoAux.setSolicitud(solicitud);
									archivoAux.setUrl(url);
									archivoAux.setUbicacion("");
									archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
									archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
									archivoAux.setUsuario(usuarioLogueado);	
									archivoAux.setFechaCreacion(new Date());
									entityManager.persist(archivoAux);
									entityManager.flush();
									ConceptoDTO objetoAux = new ConceptoDTO();
									objetoAux.setNombreArchivo(nombreArchivo);
									objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
									listaArchivoGuardadoResp.add(objetoAux);
									objetoAux = null;
									
								} catch (FileNotFoundException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}
								catch (IOException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}catch (Exception e) {
									e.printStackTrace();
								}							
							}		
						}						
						List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
						
						if(listaUsuarioCorreoagregados != null){
							/*setando los varlores del dto para el correo*/
							ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
							contenidoEmail.setTituloRespuesta("Respuesta solicitud ");
							contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
							contenidoEmail.setColor("VERDE");
							contenidoEmail.setAccion("Se Aprueba La Solicitud "+ solicitud.getId().getNumSolicitud());
							contenidoEmail.setAccionRespuesta("");
							contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
							contenidoEmail.setRespuestaFinalSolicitud(this.observacionesFinales);
							contenidoEmail.setOpcionFinal(3);
							contenidoEmail.setSolicitud(solicitud);
							
							
							StringBuffer rutNombre = new StringBuffer();
							rutNombre.append(cliente.getRut());
							rutNombre.append(" / ");
							rutNombre.append(modificarTexto(cliente.getRazonSocial()));
							contenidoEmail.setRutNombre(rutNombre.toString());
							contenidoEmail.setSoloNombre(cliente.getRazonSocial());
							contenidoEmail.setCanalVenta(modificarTexto(cliente.getCanalVenta()));
							
							Sucursal suc = obtenerObjetoSucursal(solicitud.getCodSucursal());
							if(suc != null){
								contenidoEmail.setSucursal(suc.getDescripcion());
							}else{
								contenidoEmail.setSucursal(solicitud.getCodSucursal());
							}
							
							UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
							if(ususarioEmisor != null){
								contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
							}else{
								contenidoEmail.setEmisor(solicitud.getCodEmisor());
							}							
							
							contenidoEmail.setTipoSolicitud("Cambio de Condiciones.");
							
							if(this.modificarCondicion){
								if(this.condicionRiesgoNew == true && this.condicionPagoNew == false){
									contenidoEmail.setTipoLineaCredito("Condiciones de Riesgo.");	
									contenidoEmail.setCondicionRiesgo(cliente.getClasificacionRiesgo());
									contenidoEmail.setCondicionPago("");
									contenidoEmail.setCondicionRiesgoNuevo(this.clsRiesgoNuevo);								
									contenidoEmail.setCondicionPagoNuevo("");
								
								}else if(this.condicionRiesgoNew == false && this.condicionPagoNew == true){
									contenidoEmail.setTipoLineaCredito("Condiciones de Pago.");
									contenidoEmail.setCondicionRiesgo("");
									contenidoEmail.setCondicionPago(cliente.getCondicionPago());
									contenidoEmail.setCondicionRiesgoNuevo("");								
									contenidoEmail.setCondicionPagoNuevo(this.cPagoNuevo);									
								
								}else if(this.condicionRiesgoNew == true && this.condicionPagoNew == true){
									contenidoEmail.setTipoLineaCredito("Condiciones "+ this.tipoSolicitudAux.getDesTipoSolicitud());
									contenidoEmail.setCondicionRiesgo(cliente.getClasificacionRiesgo());
									contenidoEmail.setCondicionPago(cliente.getCondicionPago());
									contenidoEmail.setCondicionRiesgoNuevo(this.clsRiesgoNuevo);								
									contenidoEmail.setCondicionPagoNuevo(this.cPagoNuevo);
								}								
							}else{
								
								if(this.condicionRiesgo == true && this.condicionPago == false){
									contenidoEmail.setTipoLineaCredito("Condiciones de Riesgo.");	
									contenidoEmail.setCondicionRiesgo(cliente.getClasificacionRiesgo());
									contenidoEmail.setCondicionPago("");
									contenidoEmail.setCondicionRiesgoNuevo(this.clsRiesgo);								
									contenidoEmail.setCondicionPagoNuevo("");
								
								}else if(this.condicionRiesgo == false && this.condicionPago == true){
									contenidoEmail.setTipoLineaCredito("Condiciones de Pago.");
									contenidoEmail.setCondicionRiesgo("");
									contenidoEmail.setCondicionPago(cliente.getCondicionPago());
									contenidoEmail.setCondicionRiesgoNuevo("");								
									contenidoEmail.setCondicionPagoNuevo(this.cPago);									
								
								}else if(this.condicionRiesgo == true && this.condicionPago == true){
									contenidoEmail.setTipoLineaCredito("Condiciones "+ this.tipoSolicitudAux.getDesTipoSolicitud());
									contenidoEmail.setCondicionRiesgo(cliente.getClasificacionRiesgo());
									contenidoEmail.setCondicionPago(cliente.getCondicionPago());
									contenidoEmail.setCondicionRiesgoNuevo(this.clsRiesgo);								
									contenidoEmail.setCondicionPagoNuevo(this.cPago);
								}								
							}
							contenidoEmail.setMotivoCambio(condicion.getMotivoCambio());
						    /*datos de lineas credito solCredito */
							contenidoEmail.setListaArchivos(listaArchivoGuardado);
							contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
							contenidoEmail.setListaObservaciones(listaObservaciones);
							
							List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
							if(listaUsuarioCorreoagregados != null){
								for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
									if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !ucdto.getUsername().equals(usuarioLogueado.getAlias().trim())  ){
										log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
										Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
										if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
											if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
												ultimaListaCorreoPrueba.add(usuarioAux);	
												usuarioAux = new Usuariosegur();
											}											
										}
									}
								}
							}
							/*eliminar esto, cuando se establaque la solucion*/
							Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
							if(emisorCorreo != null){
								if(!ultimaListaCorreoPrueba.contains(emisorCorreo)){
									ultimaListaCorreoPrueba.add(emisorCorreo);
								}
								emisorCorreo = null;
							}
							Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
							if(correoAdministrador != null){
								ultimaListaCorreoPrueba.add(correoAdministrador);
								correoAdministrador = null;
							}							
							
							contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);	
							
							/*cambio de SAP*/
							if(wvarActualizarSap){
								String clasificacionRiesgo = null;
								String condicionPagoAux = null;
								/*cambio en sap*/
								if(this.modificarCondicion){
									if(condicionRiesgoNew == true ){
								        try {
								        	/*cambia condicion de riesgo*/
								        	JCoFunction functionDatosCreditoRiesgo;
								    		SapSystem system = new SapSystem(globalParameters.getNameSap(),
								    				globalParameters.getIpSap(),
								    				globalParameters.getClientSap(), 
								    				globalParameters.getSystemNumberSap(),
								    				globalParameters.getUserSap(),
								    				globalParameters.getPasswordSap());     		
								               Connect connect = new Connect(system);  
								    		   functionDatosCreditoRiesgo = connect.getFunction("ZMODIFICA_CONDICIONES_VENTA_II"); // Nombre RFC
								    		   clasificacionRiesgo =  condicion.getCodCondRiesgoFinal().toString();
								    		   log.debug(cliente.getCleanRut());
								    		   log.debug(clasificacionRiesgo);
								               functionDatosCreditoRiesgo.getImportParameterList().setValue("I_KUNNR", cliente.getCleanRut());//rut del cliente
								               functionDatosCreditoRiesgo.getImportParameterList().setValue("I_TIPMOD", "CR"); 
							            	   functionDatosCreditoRiesgo.getImportParameterList().setValue("I_CTLPC", clasificacionRiesgo);
							            	   functionDatosCreditoRiesgo.getImportParameterList().setValue("I_KLIMK", cliente.getLineaCreditoKH().longValue());
								               connect.execute(functionDatosCreditoRiesgo);
			
								        } catch (Exception e) {
								               log.debug("error al cargar datos cliente #0",e.toString());
								        }
									}
									
							    	/*cambio en sap*/
									if(condicionPagoNew == true){
								        try {
								        	/*cambia condicion de pago*/
								        	JCoFunction functionDatosCreditoPago;
								    		SapSystem system = new SapSystem(globalParameters.getNameSap(),
								    				globalParameters.getIpSap(),
								    				globalParameters.getClientSap(), 
								    				globalParameters.getSystemNumberSap(),
								    				globalParameters.getUserSap(),
								    				globalParameters.getPasswordSap());       		
							               Connect connect = new Connect(system);  
							    		   functionDatosCreditoPago = connect.getFunction("ZMODIFICA_CONDICIONES_VENTA_II"); // Nombre RFC
							    		   log.debug(cliente.getCleanRut());
							    		   condicionPagoAux = condicion.getCodCondPagoFinal().toString();
							    		   log.debug(condicionPagoAux);
							               functionDatosCreditoPago.getImportParameterList().setValue("I_KUNNR", cliente.getCleanRut());//rut del cliente
							               functionDatosCreditoPago.getImportParameterList().setValue("I_TIPMOD", "CP"); // tipo de bloqueo y desbloqueo	
						            	   functionDatosCreditoPago.getImportParameterList().setValue("I_ZTERM", condicionPagoAux);
							               connect.execute(functionDatosCreditoPago);
			
								        } catch (Exception e) {
								               log.debug("error al cargar datos cliente #0",e.toString());
								        }
									}
								}else{
									/*cambio en sap*/
									if(condicionRiesgo == true ){
								        try {
								        	/*cambia condicion de riesgo*/
								        	JCoFunction functionDatosCreditoRiesgo;
								    		SapSystem system = new SapSystem(globalParameters.getNameSap(),
								    				globalParameters.getIpSap(),
								    				globalParameters.getClientSap(), 
								    				globalParameters.getSystemNumberSap(),
								    				globalParameters.getUserSap(),
								    				globalParameters.getPasswordSap());      		
								               Connect connect = new Connect(system);  
								    		   functionDatosCreditoRiesgo = connect.getFunction("ZMODIFICA_CONDICIONES_VENTA_II"); // Nombre RFC
								    		   log.debug(cliente.getCleanRut());
								    		   clasificacionRiesgo = condicion.getCodCondRiesgoInicial().toString();
								    		   log.debug(clasificacionRiesgo);
								               functionDatosCreditoRiesgo.getImportParameterList().setValue("I_KUNNR", cliente.getCleanRut());//rut del cliente
								               functionDatosCreditoRiesgo.getImportParameterList().setValue("I_TIPMOD", "CR"); 
							            	   functionDatosCreditoRiesgo.getImportParameterList().setValue("I_CTLPC", clasificacionRiesgo);
							            	   functionDatosCreditoRiesgo.getImportParameterList().setValue("I_KLIMK", cliente.getLineaCreditoKH().longValue());
								               connect.execute(functionDatosCreditoRiesgo);
			
								        } catch (Exception e) {
								               log.debug("error al cargar datos cliente #0",e.toString());
								        }
									}
									
									/*cambio en sap*/
									if(condicionPago == true){
								        try {
								        	/*cambia condicion de pago*/
								        	JCoFunction functionDatosCreditoPago;
								    		SapSystem system = new SapSystem(globalParameters.getNameSap(),
								    				globalParameters.getIpSap(),
								    				globalParameters.getClientSap(), 
								    				globalParameters.getSystemNumberSap(),
								    				globalParameters.getUserSap(),
								    				globalParameters.getPasswordSap());     		
							               Connect connect = new Connect(system);  
							    		   functionDatosCreditoPago = connect.getFunction("ZMODIFICA_CONDICIONES_VENTA_II"); // Nombre RFC
							    		   log.debug(cliente.getCleanRut());
							    		   condicionPagoAux = condicion.getCodCondPagoInicial().toString();
							    		   log.debug(condicionPagoAux);
							               functionDatosCreditoPago.getImportParameterList().setValue("I_KUNNR", cliente.getCleanRut());//rut del cliente
							               functionDatosCreditoPago.getImportParameterList().setValue("I_TIPMOD", "CP"); // tipo de bloqueo y desbloqueo	
						            	   functionDatosCreditoPago.getImportParameterList().setValue("I_ZTERM", condicionPagoAux);
							               connect.execute(functionDatosCreditoPago);
			
								        } catch (Exception e) {
								               log.debug("error al cargar datos cliente #0",e.toString());
								        }
									}
								}									
							}
							/*fin del cambio de SAP*/
							
							try{
								if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
									/*envio de correo*/
									emailAlerta.enviarRespuestaSolicitudCondiciones(contenidoEmail);	
									/*ingersar un registro  de  usurio derivada*/
									LcredEstado estadoAux = ObtenerEstadoSolictud("AE");
									Long numero = scoringService.getSolicitudUsuarioDerivacionMaximo();
									SolicitudUsuarioDerivada sud = new SolicitudUsuarioDerivada();
									sud.setSystemId(numero);
									sud.setIdSolicitud(solicitud.getId().getNumSolicitud());
									sud.setEstado(estadoAux);
									sud.setFechaHora(new Date());
									sud.setUsuario(usuarioLogueado);
									sud.setConfirmacionObligatoria(true);
									sud.setConfirmacion(true);
									sud.setCodEstadoDerivada(estadoAux.getCodEstado());
									boolean exitoingreso = scoringService.persitSolicitudUsuarioDerivacion(sud);
									log.debug(exitoingreso);									
								
								}	
							}catch (Exception e) {
								log.debug("paso por el error #0"+ e.getMessage());
							}	
						}							
						
						insertarLogs(solicitud, 8);
						LcredEstado estado = ObtenerEstadoSolictud("A");
						insertHitos(solicitud, estado, "NADA", 0);
						entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
						             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
						entityManager.flush();
						entityManager.refresh(solicitud);	
						
						evaluarDerivaciones(solicitud.getId().getNumSolicitud());
					}
				}
			}else if(this.paginaIngreso == 41){/*solicitud de bloqueo y desbloqueo*/
				if(solicitud != null && bloqueo != null && solicitudOtra != null){
					solicitud.setEstado("A");
					solicitud.setUsuarioActual(solicitud.getCodEmisor());
					solicitud.setDevolver(true);
					bloqueo.setObservacionesFinal(this.observacionesFinales);
					if(this.modificarbloqueoToDesbloqueo){
						solicitudOtra.setObservacionesFinal(this.observacionesFinales);
						solicitudOtra.setStatusSolicitud(solicitud.getEstado());
						if("41".equals(this.opcionBloqueoDesbloqueoNew)){
							solicitudOtra.setOpcionFinal("B");
						}else{
							solicitudOtra.setOpcionFinal("D");
						}
					}else{
						solicitudOtra.setObservacionesFinal(this.observacionesFinales);
						solicitudOtra.setStatusSolicitud(solicitud.getEstado());
						solicitudOtra.setOpcionFinal(solicitudOtra.getOpcionInicial());
					}

					
					/*actualizaciones la solicitud */
					boolean exito = scoringService.mergerSolicitud(solicitud);
					/*actualizaciones de solicitud de Bloqueo to Desbloqueo*/
					boolean exitoBD = scoringService.mergerSolicitudBloqueoToDesbloqueo(bloqueo);					
					/*actualizaciones de solicitud de Otras solicitudes*/
					boolean exitoOS = scoringService.mergerSolicitudOtrasSolicitudes(solicitudOtra);					
					
					if(exito == true && exitoBD == true && exitoOS){
						List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
						/*se agrega la observaciones final de una aprobacion final */
						LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
						Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							id.setCorrelativo(correlativo);
							id.setFecha(new Date());
							id.setHora(new Date());
							id.setNumSolicitud(solicitud.getId().getNumSolicitud());
							id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							id.setObservacion(this.observacionesFinales);
							id.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(id);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}
						this.mensajeGlogal = "Se aprueba la solictud N¬∞ "+ solicitud.getId().getNumSolicitud();							
						
						if(listaFileUploadedDTOs != null && listaFileUploadedDTOs.size() != 0){
							for(FileUploadedDTO archivo :listaFileUploadedDTOs){
							   try {							
									OutputStream ostream = null;
									String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
									nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);	

									String url = "archivosRespuestaOS"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
									
									
									//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
									ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
									log.debug("url #0",archivo.getUploadItem().getContentType());
									IOUtils.copyStream(ostream, istream);
									ostream.flush();
									ostream.close();
									istream.close();
									//guardar datos en la BD
									ArchivoAdjunto archivoAux = new ArchivoAdjunto();
									archivoAux.setSolicitud(solicitud);
									archivoAux.setUrl(url);
									archivoAux.setUbicacion("");
									archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
									archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
									archivoAux.setUsuario(usuarioLogueado);	
									archivoAux.setFechaCreacion(new Date());
									entityManager.persist(archivoAux);
									entityManager.flush();
									ConceptoDTO objetoAux = new ConceptoDTO();
									objetoAux.setNombreArchivo(nombreArchivo);
									objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
									listaArchivoGuardadoResp.add(objetoAux);
									objetoAux = null;
									
								} catch (FileNotFoundException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}
								catch (IOException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}catch (Exception e) {
									e.printStackTrace();
								}							
							}		
						}		
						List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
						
						if(listaUsuarioCorreoagregados != null){
							/*setando los varlores del dto para el correo*/
							ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
							contenidoEmail.setTituloRespuesta("Respuesta solicitud ");
							contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
							contenidoEmail.setColor("VERDE");
							contenidoEmail.setAccion("Se Aprueba La Solicitud "+ solicitud.getId().getNumSolicitud());
							contenidoEmail.setAccionRespuesta("");
							contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
							contenidoEmail.setRespuestaFinalSolicitud(this.observacionesFinales);
							contenidoEmail.setOpcionFinal(3);
							contenidoEmail.setSolicitud(solicitud);
							
							
							StringBuffer rutNombre = new StringBuffer();
							rutNombre.append(cliente.getRut());
							rutNombre.append(" / ");
							rutNombre.append(modificarTexto(cliente.getRazonSocial()));
							contenidoEmail.setRutNombre(rutNombre.toString());
							contenidoEmail.setSoloNombre(cliente.getRazonSocial());
							contenidoEmail.setCanalVenta(cliente.getCanalVenta());
							
							Sucursal suc = obtenerObjetoSucursal(solicitud.getCodSucursal());
							if(suc != null){
								contenidoEmail.setSucursal(suc.getDescripcion());
							}else{
								contenidoEmail.setSucursal(solicitud.getCodSucursal());
							}
							
							UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
							if(ususarioEmisor != null){
								contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
							}else{
								contenidoEmail.setEmisor(solicitud.getCodEmisor());
							}							
							contenidoEmail.setTipoSolicitud("Bloqueo / Desbloqueo.");
							
							if("41".equals(this.opcionBloqueoDesbloqueo)){
								contenidoEmail.setTipoBloqueoDesbloqueo("Bloqueo.");
		
							}else if("42".equals(this.opcionBloqueoDesbloqueo)){
								contenidoEmail.setTipoBloqueoDesbloqueo("Desbloqueo.");
							}
							
							contenidoEmail.setMotivoBloqueoDesbloqueo(this.motivoBloDesbloqueo);
							contenidoEmail.setObservacionesBloqueoDesblorqueo(this.motivoBloDesbloqueo);

						    /*datos de lineas credito solCredito */
							contenidoEmail.setListaArchivos(listaArchivoGuardado);
							contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
							contenidoEmail.setListaObservaciones(listaObservaciones);

							List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
							if(listaUsuarioCorreoagregados != null){
								for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
									if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !ucdto.getUsername().equals(usuarioLogueado.getAlias().trim())  ){
										log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
										Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
										if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
											if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
												ultimaListaCorreoPrueba.add(usuarioAux);	
												usuarioAux = new Usuariosegur();
											}											
										}
									}
								}
							}
							/*eliminar esto, cuando se establaque la solucion*/
							Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
							if(emisorCorreo != null){
								if(!ultimaListaCorreoPrueba.contains(emisorCorreo)){
									ultimaListaCorreoPrueba.add(emisorCorreo);
								}
								emisorCorreo = null;
							}
							Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
							if(correoAdministrador != null){
								ultimaListaCorreoPrueba.add(correoAdministrador);
								correoAdministrador = null;
							}							
							contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);	
							/*inicio el cambio de sap*/
							if(wvarActualizarSap){
								/*cambio en sap*/
						        try {
						        	JCoFunction functionDatosBloqueoDesbloqueo;
						    		SapSystem system = new SapSystem(globalParameters.getNameSap(),
						    				globalParameters.getIpSap(),
						    				globalParameters.getClientSap(), 
						    				globalParameters.getSystemNumberSap(),
						    				globalParameters.getUserSap(),
						    				globalParameters.getPasswordSap());    		
						               Connect connect = new Connect(system);  
						    		   functionDatosBloqueoDesbloqueo = connect.getFunction("ZMODIFICA_CONDICIONES_VENTA_II"); // Nombre RFC
						    		   log.debug(cliente.getCleanRut());
						               functionDatosBloqueoDesbloqueo.getImportParameterList().setValue("I_KUNNR", cliente.getCleanRut());//rut del cliente
						               functionDatosBloqueoDesbloqueo.getImportParameterList().setValue("I_TIPMOD", "BL"); // tipo de bloqueo y desbloqueo	
						               functionDatosBloqueoDesbloqueo.getImportParameterList().setValue("I_TEXT", solicitudOtra.getObservacionesFinal()); // motivo final de bloqueop o desbloqueo 
						               if(solicitudOtra.getOpcionFinal().equals("B")){
							               functionDatosBloqueoDesbloqueo.getImportParameterList().setValue("I_CRBLB", "X"); // si es bloqueo es bloqueo 
						               }else{
							               functionDatosBloqueoDesbloqueo.getImportParameterList().setValue("I_CRBLB", ""); // si es desbloqueo  
						               }
						               connect.execute(functionDatosBloqueoDesbloqueo);

						        } catch (Exception e) {
						               log.debug("error al cargar datos cliente #0",e.toString());
						        }
							}
							/*fin de cambio de SAP*/
							
							try{
								if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
									
									emailAlerta.enviarRespuestaSolicitudBloqueoDesbloqueo(contenidoEmail);	

									/*ingersar un registro  de  usurio derivada*/
									LcredEstado estadoAux = ObtenerEstadoSolictud("AE");
									Long numero = scoringService.getSolicitudUsuarioDerivacionMaximo();
									SolicitudUsuarioDerivada sud = new SolicitudUsuarioDerivada();
									sud.setSystemId(numero);
									sud.setIdSolicitud(solicitud.getId().getNumSolicitud());
									sud.setEstado(estadoAux);
									sud.setFechaHora(new Date());
									sud.setUsuario(usuarioLogueado);
									sud.setConfirmacionObligatoria(true);
									sud.setConfirmacion(true);
									sud.setCodEstadoDerivada(estadoAux.getCodEstado());
									boolean exitoingreso = scoringService.persitSolicitudUsuarioDerivacion(sud);
									log.debug(exitoingreso);										
									
								}	
							}catch (Exception e) {
								log.debug("paso por el error #0"+ e.getMessage());
							}	
						}	

						insertarLogs(solicitud, 8);
						LcredEstado estado = ObtenerEstadoSolictud("A");
						insertHitos(solicitud, estado, "NADA", 0);
						entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
						             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
						entityManager.flush();
						entityManager.refresh(solicitud);	
						
						evaluarDerivaciones(solicitud.getId().getNumSolicitud());
					}
				}
			}else if(this.paginaIngreso == 43){/* creacion de dm */
				if(solicitud != null && listaClienteDMs != null && solicitudOtra != null){
					
						solicitud.setEstado("A");
						solicitud.setUsuarioActual(solicitud.getCodEmisor());
						solicitud.setDevolver(true);
						
						solicitudOtra.setObservacionesFinal(this.observacionesFinales);
						solicitudOtra.setStatusSolicitud(solicitud.getEstado());
						solicitudOtra.setOpcionFinal(solicitudOtra.getOpcionInicial());
						
						/*actualizaciones la solicitud */
						boolean exito = scoringService.mergerSolicitud(solicitud);
						/*actualizaciones de solicitud de Otras solicitudes*/
						boolean exitoOS = scoringService.mergerSolicitudOtrasSolicitudes(solicitudOtra);							
						
						if(exito == true && exitoOS == true){
							List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
							this.mensajeGlogal = "Se aprueba la solictud N¬∞ "+ solicitud.getId().getNumSolicitud();	
							/*se agrega la observaciones final de una aprobacion final */
							LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
							Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
							if(correlativo != null){
								id.setCorrelativo(correlativo);
								id.setFecha(new Date());
								id.setHora(new Date());
								id.setNumSolicitud(solicitud.getId().getNumSolicitud());
								id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
								id.setObservacion(this.observacionesFinales);
								id.setUsuario(usuarioSegur.getAlias());
								LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
								obser.setId(id);
								scoringService.persistSolicitudObservaciones(obser);
								insertarLogs(solicitud, 5);
							}
							if(listaFileUploadedDTOs != null && listaFileUploadedDTOs.size() != 0){
								for(FileUploadedDTO archivo :listaFileUploadedDTOs){
								   try {							
										OutputStream ostream = null;
										String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
										nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);	

										String url = "archivosRespuestaOS"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
										
										
										//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
										ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
										log.debug("url #0",archivo.getUploadItem().getContentType());
										IOUtils.copyStream(ostream, istream);
										ostream.flush();
										ostream.close();
										istream.close();
										//guardar datos en la BD
										ArchivoAdjunto archivoAux = new ArchivoAdjunto();
										archivoAux.setSolicitud(solicitud);
										archivoAux.setUrl(url);
										archivoAux.setUbicacion("");
										archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
										archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
										archivoAux.setUsuario(usuarioLogueado);	
										archivoAux.setFechaCreacion(new Date());
										entityManager.persist(archivoAux);
										entityManager.flush();
										ConceptoDTO objetoAux = new ConceptoDTO();
										objetoAux.setNombreArchivo(nombreArchivo);
										objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
										listaArchivoGuardadoResp.add(objetoAux);
										objetoAux = null;
										
									} catch (FileNotFoundException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}
									catch (IOException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}catch (Exception e) {
										e.printStackTrace();
									}							
								}		
							}	
							List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
							
							if(listaUsuarioCorreoagregados != null){
								/*setando los varlores del dto para el correo*/
								ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
								contenidoEmail.setTituloRespuesta("Respuesta solicitud ");
								contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
								contenidoEmail.setColor("VERDE");
								contenidoEmail.setAccion("Se Aprueba La Solicitud "+ solicitud.getId().getNumSolicitud());
								contenidoEmail.setAccionRespuesta("");
								contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
								contenidoEmail.setRespuestaFinalSolicitud(this.observacionesFinales);
								contenidoEmail.setOpcionFinal(3);
								contenidoEmail.setSolicitud(solicitud);
								
								
								StringBuffer rutNombre = new StringBuffer();
								rutNombre.append(cliente.getRut());
								rutNombre.append(" / ");
								rutNombre.append(modificarTexto(cliente.getRazonSocial()));
								contenidoEmail.setRutNombre(rutNombre.toString());
								contenidoEmail.setSoloNombre(cliente.getRazonSocial());
								contenidoEmail.setCanalVenta(cliente.getCanalVenta());
								
								Sucursal suc = obtenerObjetoSucursal(solicitud.getCodSucursal());
								if(suc != null){
									contenidoEmail.setSucursal(suc.getDescripcion());
								}else{
									contenidoEmail.setSucursal(solicitud.getCodSucursal());
								}
								
								UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
								if(ususarioEmisor != null){
									contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
								}else{
									contenidoEmail.setEmisor(solicitud.getCodEmisor());
								}	
								
								contenidoEmail.setTipoSolicitud("Creacion de DM");
								contenidoEmail.setTipoDM("DM");
								
								
							    /*datos de archivos */
								contenidoEmail.setListaArchivos(listaArchivoGuardado);
								contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
								
								/*datos de los DMS*/
								List<CreacionDmDTO> listaDms = new ArrayList<CreacionDmDTO>(0);
								CreacionDmDTO obejtoDm =  null;
								for(LcredSolicitudDm docto : listaClienteDMs){
									if(docto != null){
									   obejtoDm = new CreacionDmDTO();
									   obejtoDm.setRut(docto.getId().getRut());
									   obejtoDm.setNombre(docto.getId().getNombre());
									   obejtoDm.setOficinaVentas(docto.getId().getOficinaVentas());
									   obejtoDm.setZona(docto.getId().getZona());
									   obejtoDm.setListaPrecio(docto.getId().getListaPrecio());
									   obejtoDm.setSector(docto.getId().getSector());
									   obejtoDm.setVendTelefono(docto.getId().getVendTelefono());
									   obejtoDm.setVendTerreno(docto.getId().getVendTerreno());
									   obejtoDm.setCobrador(docto.getId().getCobrador());
									   obejtoDm.setCondExpedicion(docto.getId().getCondExpedicion());
									   obejtoDm.setCondPago(docto.getId().getCondPago());
									   listaDms.add(obejtoDm);
									}
								}
						
								contenidoEmail.setListaCreacionDM(listaDms);
								contenidoEmail.setListaObservaciones(listaObservaciones);
								
								List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
								if(listaUsuarioCorreoagregados != null){
									for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
										if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !ucdto.getUsername().equals(usuarioLogueado.getAlias().trim())  ){
											log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
												if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
													ultimaListaCorreoPrueba.add(usuarioAux);	
													usuarioAux = new Usuariosegur();
												}											
											}
										}
									}
								}
								/*eliminar esto, cuando se establaque la solucion*/
								Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
								if(emisorCorreo != null){
									if(!ultimaListaCorreoPrueba.contains(emisorCorreo)){
										ultimaListaCorreoPrueba.add(emisorCorreo);
									}
									emisorCorreo = null;
								}
								Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
								if(correoAdministrador != null){
									ultimaListaCorreoPrueba.add(correoAdministrador);
									correoAdministrador = null;
								}
								contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);										
								try{
									if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
										
										emailAlerta.enviarSolicitudRespuestaDm(contenidoEmail);	
										/*ingersar un registro  de  usurio derivada*/
										LcredEstado estadoAux = ObtenerEstadoSolictud("AE");
										Long numero = scoringService.getSolicitudUsuarioDerivacionMaximo();
										SolicitudUsuarioDerivada sud = new SolicitudUsuarioDerivada();
										sud.setSystemId(numero);
										sud.setIdSolicitud(solicitud.getId().getNumSolicitud());
										sud.setEstado(estadoAux);
										sud.setFechaHora(new Date());
										sud.setUsuario(usuarioLogueado);
										sud.setConfirmacionObligatoria(true);
										sud.setConfirmacion(true);
										sud.setCodEstadoDerivada(estadoAux.getCodEstado());
										boolean exitoingreso = scoringService.persitSolicitudUsuarioDerivacion(sud);
										log.debug(exitoingreso);
									
									}	
								}catch (Exception e) {
									log.debug("paso por el error #0"+ e.getMessage());
								}	
							}								
							
							insertarLogs(solicitud, 8);
							LcredEstado estado = ObtenerEstadoSolictud("A");
							insertHitos(solicitud, estado, "NADA", 0);
							entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
							             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
							entityManager.flush();
							entityManager.refresh(solicitud);		
							
							evaluarDerivaciones(solicitud.getId().getNumSolicitud());
						}	
					
				}		
			}else if(this.paginaIngreso == 44){/* prorroga de cheques*/
				if(solicitud != null && listaProrrogas != null && solicitudOtra != null){
				
						Locale locale = new Locale("es","CL");
						NumberFormat numberFormatter;
						numberFormatter = NumberFormat.getNumberInstance(locale);
						
						solicitud.setEstado("A");
						solicitud.setUsuarioActual(solicitud.getCodEmisor());
						solicitud.setDevolver(true);
						
						solicitudOtra.setObservacionesFinal(this.observacionesFinales);
						solicitudOtra.setStatusSolicitud(solicitud.getEstado());
						solicitudOtra.setOpcionFinal(solicitudOtra.getOpcionInicial());
						
						/*actualizaciones la solicitud */
						boolean exito = scoringService.mergerSolicitud(solicitud);
						/*actualizaciones de solicitud de Otras solicitudes*/
						boolean exitoOS = scoringService.mergerSolicitudOtrasSolicitudes(solicitudOtra);
						if(exito == true && exitoOS == true){
							List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
							/*se agrega la observaciones final de una aprobacion final */
							LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
							Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
							if(correlativo != null){
								id.setCorrelativo(correlativo);
								id.setFecha(new Date());
								id.setHora(new Date());
								id.setNumSolicitud(solicitud.getId().getNumSolicitud());
								id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
								id.setObservacion(this.observacionesFinales);
								id.setUsuario(usuarioSegur.getAlias());
								LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
								obser.setId(id);
								scoringService.persistSolicitudObservaciones(obser);
								insertarLogs(solicitud, 5);
							}
							this.mensajeGlogal = "Se aprueba la solictud N¬∞ "+ solicitud.getId().getNumSolicitud();							
							if(listaFileUploadedDTOs != null && listaFileUploadedDTOs.size() != 0){
								for(FileUploadedDTO archivo :listaFileUploadedDTOs){
								   try {							
										OutputStream ostream = null;
										String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
										nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);	

										String url = "archivosRespuestaOS"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
										
										
										//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
										ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
										log.debug("url #0",archivo.getUploadItem().getContentType());
										IOUtils.copyStream(ostream, istream);
										ostream.flush();
										ostream.close();
										istream.close();
										//guardar datos en la BD
										ArchivoAdjunto archivoAux = new ArchivoAdjunto();
										archivoAux.setSolicitud(solicitud);
										archivoAux.setUrl(url);
										archivoAux.setUbicacion("");
										archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
										archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
										archivoAux.setUsuario(usuarioLogueado);	
										archivoAux.setFechaCreacion(new Date());
										entityManager.persist(archivoAux);
										entityManager.flush();
										ConceptoDTO objetoAux = new ConceptoDTO();
										objetoAux.setNombreArchivo(nombreArchivo);
										objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
										listaArchivoGuardadoResp.add(objetoAux);
										objetoAux = null;
										
									} catch (FileNotFoundException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}
									catch (IOException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}catch (Exception e) {
										e.printStackTrace();
									}							
								}		
							}	
							
							
							List<ProrrogaDTO> listaProrrogas = new ArrayList<ProrrogaDTO>(0);
							ProrrogaDTO obejtoProrroga =  null;
							for(DocumentoProrrogaDTO docto : listaDoctoProrrogaAgregados){
								LcredSolicitudProrroga solProrroga = null;
								if(docto != null){
									solProrroga = scoringService.getSolicitudProrroga(docto.getNumeroDocto(), solicitud.getId().getNumSolicitud());
									if(solProrroga != null){
										SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
										String fechaAux2 = format.format(docto.getFechaVencNuevo());
										solProrroga.getId().setVencNuevo(fechaAux2);
										boolean valido = scoringService.mergeSolicitudProrroga(solProrroga);
										if(valido){
											log.debug(valido);
										}
									}
								}

								if(solProrroga != null && docto != null){
								   obejtoProrroga = new ProrrogaDTO();
								   obejtoProrroga.setNumeroDocto(solProrroga.getId().getNroCheque());
								   obejtoProrroga.setMontoFormateado(numberFormatter.format(solProrroga.getId().getMonto()));
								   obejtoProrroga.setMotivoProrroga(this.motivoProrroga);
								   obejtoProrroga.setFechaVencicmiento(solProrroga.getId().getVencActual());
								   obejtoProrroga.setFechaSolicitado(solProrroga.getId().getVencNuevo());
								   listaProrrogas.add(obejtoProrroga);
								}
							}							
							
							
							List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());

							if(listaUsuarioCorreoagregados != null){
								/*setando los varlores del dto para el correo*/
								ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
								contenidoEmail.setTituloRespuesta("Respuesta solicitud ");
								contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
								contenidoEmail.setColor("VERDE");
								contenidoEmail.setAccion("Se Aprueba La Solicitud "+ solicitud.getId().getNumSolicitud());
								contenidoEmail.setAccionRespuesta("");
								contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
								contenidoEmail.setRespuestaFinalSolicitud(this.observacionesFinales);
								contenidoEmail.setOpcionFinal(3);
								contenidoEmail.setSolicitud(solicitud);
								
								StringBuffer rutNombre = new StringBuffer();
								rutNombre.append(cliente.getRut());
								rutNombre.append(" / ");
								rutNombre.append(modificarTexto(cliente.getRazonSocial()));
								contenidoEmail.setRutNombre(rutNombre.toString());
								contenidoEmail.setSoloNombre(cliente.getRazonSocial());
								contenidoEmail.setCanalVenta(cliente.getCanalVenta());
								
								Sucursal suc = obtenerObjetoSucursal(solicitud.getCodSucursal());
								if(suc != null){
									contenidoEmail.setSucursal(suc.getDescripcion());
								}else{
									contenidoEmail.setSucursal(solicitud.getCodSucursal());
								}
								
								UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
								if(ususarioEmisor != null){
									contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
								}else{
									contenidoEmail.setEmisor(solicitud.getCodEmisor());
								}	
								
								contenidoEmail.setTipoSolicitud("Prorroga de Cheque");
								contenidoEmail.setTipoProrroga("Prorroga.");
								contenidoEmail.setMotivoProrroga(this.motivoProrroga);
								
								
							    /*datos de archivos */
								contenidoEmail.setListaArchivos(listaArchivoGuardado);
								contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
								contenidoEmail.setListaObservaciones(listaObservaciones);
								
								/*datos de prorrogas*/
								contenidoEmail.setListaProrrogas(listaProrrogas);
								
								
								List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
								if(listaUsuarioCorreoagregados != null){
									for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
										if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !ucdto.getUsername().equals(usuarioLogueado.getAlias().trim())  ){
											log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
												if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
													ultimaListaCorreoPrueba.add(usuarioAux);	
													usuarioAux = new Usuariosegur();
												}											
											}
										}
									}
								}
								/*eliminar esto, cuando se establaque la solucion*/
								Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
								if(emisorCorreo != null){
									if(!ultimaListaCorreoPrueba.contains(emisorCorreo)){
										ultimaListaCorreoPrueba.add(emisorCorreo);
									}
									emisorCorreo = null;
								}
								
								Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
								if(correoAdministrador != null){
									ultimaListaCorreoPrueba.add(correoAdministrador);
									correoAdministrador = null;
								}
								contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);	
								/*cambio en SAP*/
								if(wvarActualizarSap){
									try{
										/*cambio en sap*/
							        	JCoFunction functionDatosProrrogas;
							        	JCoFunction functionDatosProrrogasCambio;
							    		SapSystem system = new SapSystem(globalParameters.getNameSap(),
							    				globalParameters.getIpSap(),
							    				globalParameters.getClientSap(), 
							    				globalParameters.getSystemNumberSap(),
							    				globalParameters.getUserSap(),
							    				globalParameters.getPasswordSap());  
										for(DocumentoProrrogaDTO docto : listaDoctoProrrogaAgregados){
											if(docto != null){
												SimpleDateFormat format = new SimpleDateFormat("yyyymmdd");
												String fechaAux2 = format.format(docto.getFechaVencNuevo());
												log.debug(cliente.getCleanRut());
												log.debug("fechas nuevo vencimiento #0", docto.getNumeroDocto());
												log.debug("numero de docto #0", fechaAux2);
										        try {
		  								               Connect connect = new Connect(system);  
										    		   functionDatosProrrogas = connect.getFunction("ZFIFN_CHEQUE_FV"); // Nombre RFC
										    		   functionDatosProrrogas.getImportParameterList().setValue("CODCLIENTE",cliente.getCleanRut()); // Paso de parametros
										    		   functionDatosProrrogas.getImportParameterList().setValue("NUMCHEQUE", docto.getNumeroDocto()); // Paso de parametros
										    		   connect.execute(functionDatosProrrogas);
										    		   
										    		   log.debug("fechas docto #0", (String)functionDatosProrrogas.getExportParameterList().getValue("FEC_VCTO"));
										    		   log.debug("ano docto #0", (String)functionDatosProrrogas.getExportParameterList().getValue("ANIO"));
										    		   log.debug("posicion  #0", (String)functionDatosProrrogas.getExportParameterList().getValue("POSICION"));
										    		   log.debug("sociedad  #0", (String)functionDatosProrrogas.getExportParameterList().getValue("SOCIEDAD"));
										    		   log.debug("nmero del cheque  #0", (String)functionDatosProrrogas.getExportParameterList().getValue("NUM_DOCUMENTO"));
										    		   
										    		   functionDatosProrrogasCambio = connect.getFunction("Z_SCK_PRORROGA_CHEQUES"); // Nombre RFC
										    		   functionDatosProrrogasCambio.getImportParameterList().setValue("SOCIEDAD",
										    				   (String)functionDatosProrrogas.getExportParameterList().getValue("SOCIEDAD"));//nombre de sociedad
										    		   functionDatosProrrogasCambio.getImportParameterList().setValue("NUM_DOCUMENTO", 
										    				   (String)functionDatosProrrogas.getExportParameterList().getValue("NUM_DOCUMENTO")); // numero de cheque
										    		   functionDatosProrrogasCambio.getImportParameterList().setValue("ANIO", 
										    				   (String)functionDatosProrrogas.getExportParameterList().getValue("ANIO")); // a√±o del documento 
										    		   functionDatosProrrogasCambio.getImportParameterList().setValue("POSICION", 
										    				   (String)functionDatosProrrogas.getExportParameterList().getValue("POSICION")); // posicion del documento 
										    		   functionDatosProrrogasCambio.getImportParameterList().setValue("FECHA_NEW", 	docto.getFechaVencNuevo() ); // nueva fechas de prorroga 								               

										    		   connect.execute(functionDatosProrrogasCambio);
										    		   
										        } catch (Exception e) {
										               log.debug("error al cargar datos cliente #0",e.toString());
										        }
											} 
										}											
									}catch (Exception e) {
										log.error("Error, cambio de sap.", e.getMessage());
									}									
								}
								/*fin de cambios en SAP*/
								
								try{
									if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
										/*envio de correo*/
										emailAlerta.enviarSolicitudRespuestaProrroga(contenidoEmail);	
										/*ingersar un registro  de  usurio derivada*/
										LcredEstado estadoAux = ObtenerEstadoSolictud("AE");
										Long numero = scoringService.getSolicitudUsuarioDerivacionMaximo();
										SolicitudUsuarioDerivada sud = new SolicitudUsuarioDerivada();
										sud.setSystemId(numero);
										sud.setIdSolicitud(solicitud.getId().getNumSolicitud());
										sud.setEstado(estadoAux);
										sud.setFechaHora(new Date());
										sud.setUsuario(usuarioLogueado);
										sud.setConfirmacionObligatoria(true);
										sud.setConfirmacion(true);
										sud.setCodEstadoDerivada(estadoAux.getCodEstado());
										boolean exitoingreso = scoringService.persitSolicitudUsuarioDerivacion(sud);
										log.debug(exitoingreso);											
									}	
								}catch (Exception e) {
									log.debug("paso por el error #0"+ e.getMessage());
								}
							}								
							
							insertarLogs(solicitud, 8);
							LcredEstado estado = ObtenerEstadoSolictud("A");
							insertHitos(solicitud, estado, "NADA", 0);
							entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
							             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
							entityManager.flush();
							entityManager.refresh(solicitud);	
							
							evaluarDerivaciones(solicitud.getId().getNumSolicitud());
						}	
				}		
			}
		}catch (Exception e) {
			log.error("Error al devolver la solicitud #0", e.getMessage());
		}
		
		return "volverPaginaSolicitud";		
	}
	@SuppressWarnings("unchecked")
	public void evaluarDerivaciones(Long idSolicitud){
		List<SolicitudUsuarioDerivada> lista = null;
		try{
			if(idSolicitud != null){
				lista = (List<SolicitudUsuarioDerivada>)
						entityManager.createQuery("select sud " +
								"	from SolicitudUsuarioDerivada sud" +
								" 	where sud.codEstadoDerivada in ('B','SA') " +
								"   and sud.idSolicitud=:solAux" +
								"   and sud.confirmacion is null ")
						.setParameter("solAux",idSolicitud)
						.getResultList();
				if(lista != null && lista.size() > 0){
					for(SolicitudUsuarioDerivada sud:lista){
						sud.setConfirmacionObligatoria(false);
						sud.setConfirmacion(true);
						entityManager.merge(sud);
						entityManager.flush();
						entityManager.refresh(sud);
					}
				}
			}
		}catch (Exception e) {
			log.error("Error, al sacar los datos derivados #0", e.getMessage());
		}
	}
	public void salirAprobarSolicitud(){
		  log.debug("salir del pop.");	
		  if(this.salirDelMensaje == false){
			  this.salirDelMensaje = true;
		  }
	}
	public void analizarSolicitud(){
		try{
			if(this.paginaIngreso == 11 || this.paginaIngreso == 12){
					if(solicitud != null && venta != null){
						String mensaje = scoringService.verificarSiEstaTomadaSolicitud(solicitud.getId().getNumSolicitud(), usuarioLogueado.getAlias(), usuarioCargoLogueado.getAdministrador());
						if(mensaje == null){
							if(this.modalAnalista.equals("I") || this.modalAnalista.equals("DR") 
							|| this.modalAnalista.equals("DC") || this.modalAnalista.equals("N")){
								solicitud.setEstado("E");
								solicitud.setUsuarioActual(usuarioLogueado.getAlias());
								if(this.modalAnalista.equals("I")){
									solicitud.setUsuarioDevuelve(usuarioLogueado.getAlias());
								}
								venta.setStatusSolicitud("E");
								venta.setFechaAnalisis(new Date());
								venta.setHoraAnalisis(new Date());
								venta.setUsuarioAnalisis(usuarioLogueado.getAlias());
								
								scoringService.mergerSolicitud(solicitud);
								scoringService.mergerSolicitudVentaPuntual(venta);
								
								insertarLogs(solicitud, 9);
								LcredEstado estado = ObtenerEstadoSolictud("E");
								insertHitos(solicitud, estado, "NADA", 0);
								entityManager.createQuery("update LcredSolicitud set analizar=1 where id.numSolicitud=:sol")
								             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
								entityManager.flush();	
								entityManager.refresh(solicitud);
								entityManager.refresh(venta);
								entityManager.flush();	
							}else if(this.modalAnalista.equals("E") || this.modalAnalista.equals("NU") || this.modalAnalista.equals("A") || this.modalAnalista.equals("R")){
								if(usuarioCargoAux != null && usuarioCargoAux.getAdministrador().booleanValue()){
									solicitud.setEstado("E");
									solicitud.setUsuarioActual(usuarioLogueado.getAlias());
									venta.setStatusSolicitud("E");	
									scoringService.mergerSolicitud(solicitud);
									scoringService.mergerSolicitudVentaPuntual(venta);
									
									insertarLogs(solicitud, 9);
									LcredEstado estado = ObtenerEstadoSolictud("E");
									insertHitos(solicitud, estado, "RESPUESTA", 0);
									entityManager.createQuery("update LcredSolicitud set analizar=1 where id.numSolicitud=:sol")
									             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
									entityManager.flush();
									entityManager.refresh(solicitud);
									entityManager.refresh(venta);
									entityManager.flush();
								}
							}else if(this.modalAnalista.equals("SA") || this.modalAnalista.equals("B") ){
								if(usuarioCargoAux != null && usuarioCargoAux.getAdministrador().booleanValue() == true && usuarioCargoAux.getUsuario().getAlias().equals(usuarioLogueado.getAlias())){
									solicitud.setEstado("E");
									solicitud.setUsuarioActual(usuarioLogueado.getAlias());
									venta.setStatusSolicitud("E");	
									scoringService.mergerSolicitud(solicitud);
									scoringService.mergerSolicitudVentaPuntual(venta);
									
									insertarLogs(solicitud, 9);
									LcredEstado estado = ObtenerEstadoSolictud("E");
									insertHitos(solicitud, estado, "RESPUESTA", 0);
									entityManager.createQuery("update LcredSolicitud set analizar=1 where id.numSolicitud=:sol")
									             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
									entityManager.flush();
									entityManager.refresh(solicitud);
									entityManager.refresh(venta);
									entityManager.flush();
								}						
							}
							evaludarDespuesAnalisis(solicitud);
							this.mensajeGlogal = null;
						}else{
							String[] cadenaInformacion = mensaje.split("-");
							if(cadenaInformacion != null){
								if(cadenaInformacion[0] != null && "1".equals(cadenaInformacion[0].trim())){
									if(cadenaInformacion[1] != null){
										this.mensajeGlogal = "La solicitud N¬∞ "+ solicitud.getId().getNumSolicitud() +" esta tomada por el usuario "+ cadenaInformacion[1] +".";
									}else{
										this.mensajeGlogal = "La solicitud ya fue tomada por otro usuario.";
									}
								}else if(cadenaInformacion[0] != null && "2".equals(cadenaInformacion[0].trim())){
									if(cadenaInformacion[1] != null){
										this.mensajeGlogal = cadenaInformacion[1].trim();
									}else{
										this.mensajeGlogal = "La solicitud ya fue tomada por otro usuario.";
									}
								}
							}
						}
					}else{
						
						if(usuarioCargoAux != null && usuarioCargoAux.getAdministrador().booleanValue()){
							if(this.modalAnalista.equals("I") || this.modalAnalista.equals("DR") 
							|| this.modalAnalista.equals("DC") || this.modalAnalista.equals("N")
							){
								solicitud.setEstado("E");
								solicitud.setUsuarioActual(usuarioLogueado.getAlias());
								if(this.modalAnalista.equals("I")){
									solicitud.setUsuarioDevuelve(usuarioLogueado.getAlias());
								}
								scoringService.mergerSolicitud(solicitud);
								
								insertarLogs(solicitud, 9);
								LcredEstado estado = ObtenerEstadoSolictud("E");
								insertHitos(solicitud, estado, "NADA", 0);
								entityManager.createQuery("update LcredSolicitud set analizar=1 where id.numSolicitud=:sol")
								             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
								entityManager.refresh(solicitud);
								entityManager.flush();	
							}else if(this.modalAnalista.equals("E") || this.modalAnalista.equals("NU") || this.modalAnalista.equals("A") || this.modalAnalista.equals("R")){
								if(usuarioCargoAux != null && usuarioCargoAux.getAdministrador().booleanValue()){
									solicitud.setEstado("E");
									solicitud.setUsuarioActual(usuarioLogueado.getAlias());
									scoringService.mergerSolicitud(solicitud);
									insertarLogs(solicitud, 9);
									LcredEstado estado = ObtenerEstadoSolictud("E");
									insertHitos(solicitud, estado, "RESPUESTA", 0);
									entityManager.createQuery("update LcredSolicitud set analizar=1 where id.numSolicitud=:sol")
									             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
									entityManager.refresh(solicitud);
									entityManager.flush();
								}else{
									
								}
							}else if(this.modalAnalista.equals("SA") || this.modalAnalista.equals("B")){
								if(usuarioCargoAux != null && usuarioCargoAux.getAdministrador().booleanValue() == true && usuarioCargoAux.getUsuario().getAlias().equals(usuarioLogueado.getAlias())){
									solicitud.setEstado("E");
									solicitud.setUsuarioActual(usuarioLogueado.getAlias());
									scoringService.mergerSolicitud(solicitud);
									insertarLogs(solicitud, 9);
									LcredEstado estado = ObtenerEstadoSolictud("E");
									insertHitos(solicitud, estado, "RESPUESTA", 0);
									entityManager.createQuery("update LcredSolicitud set analizar=1 where id.numSolicitud=:sol")
									             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
									entityManager.refresh(solicitud);
									entityManager.flush();
								}						
							}
							evaludarDespuesAnalisis(solicitud);
							this.mensajeGlogal = null;
						}else{
							this.mensajeGlogal = "Solo puede ser tomada por algun administrador, porque presenta problema la solicitud de datos.";
						}
						
					}
				
				
				
			}else if(this.paginaIngreso == 21 || this.paginaIngreso == 22 || this.paginaIngreso == 23 || this.paginaIngreso == 24){
				if(solicitud != null && credito != null){
					String mensaje = scoringService.verificarSiEstaTomadaSolicitud(solicitud.getId().getNumSolicitud(), usuarioLogueado.getAlias(), usuarioCargoLogueado.getAdministrador());
					if(mensaje == null){
						if(this.modalAnalista.equals("I") || this.modalAnalista.equals("DR") 
						|| this.modalAnalista.equals("DC") || this.modalAnalista.equals("ES") 
						|| this.modalAnalista.equals("N")){
							solicitud.setEstado("E");
							solicitud.setUsuarioActual(usuarioLogueado.getAlias());
							if(this.modalAnalista.equals("I")){
								solicitud.setUsuarioDevuelve(usuarioLogueado.getAlias());
							}
							credito.setStatusSolicitud("E");
							credito.setFechaAnalisis(new Date());
							credito.setHoraAnalisis(new Date());
							credito.setUsuarioAnalisis(usuarioLogueado.getAlias());
							scoringService.mergerSolicitud(solicitud);
							scoringService.mergerSolicitudLineaCredito(credito);
							
							entityManager.refresh(solicitud);
							entityManager.refresh(credito);
							
							insertarLogs(solicitud, 9);
							LcredEstado estado = ObtenerEstadoSolictud("E");
							insertHitos(solicitud, estado, "NADA", 0);
							entityManager.createQuery("update LcredSolicitud set analizar=1 where id.numSolicitud=:sol")
							             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
							entityManager.flush();	
						}else if(this.modalAnalista.equals("E") || this.modalAnalista.equals("NU") || this.modalAnalista.equals("A") || this.modalAnalista.equals("R")){
							if(usuarioCargoAux != null && usuarioCargoAux.getAdministrador().booleanValue()){
								solicitud.setEstado("E");
								solicitud.setUsuarioActual(usuarioLogueado.getAlias());
								credito.setStatusSolicitud("E");
								scoringService.mergerSolicitud(solicitud);
								scoringService.mergerSolicitudLineaCredito(credito);	
								
								insertarLogs(solicitud, 9);
								LcredEstado estado = ObtenerEstadoSolictud("E");
								insertHitos(solicitud, estado, "RESPUESTA", 0);
								entityManager.createQuery("update LcredSolicitud set analizar=1 where id.numSolicitud=:sol")
								             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
								entityManager.flush();
								entityManager.refresh(solicitud);
								entityManager.refresh(credito);
								entityManager.flush();	
							}
						}else if(this.modalAnalista.equals("SA") || this.modalAnalista.equals("B") ){
							if(usuarioCargoAux != null && usuarioCargoAux.getAdministrador().booleanValue() == true && usuarioCargoAux.getUsuario().getAlias().equals(usuarioLogueado.getAlias())){
								solicitud.setEstado("E");
								solicitud.setUsuarioActual(usuarioLogueado.getAlias());
								credito.setStatusSolicitud("E");
								scoringService.mergerSolicitud(solicitud);
								scoringService.mergerSolicitudLineaCredito(credito);	
								
								insertarLogs(solicitud, 9);
								LcredEstado estado = ObtenerEstadoSolictud("E");
								insertHitos(solicitud, estado, "RESPUESTA", 0);
								entityManager.createQuery("update LcredSolicitud set analizar=1 where id.numSolicitud=:sol")
								             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
								entityManager.flush();
								entityManager.refresh(solicitud);
								entityManager.refresh(credito);
								entityManager.flush();	
							}					
						}
						evaludarDespuesAnalisis(solicitud);
						this.mensajeGlogal = null;
					}else{
						String[] cadenaInformacion = mensaje.split("-");
						if(cadenaInformacion != null){
							if(cadenaInformacion[0] != null && "1".equals(cadenaInformacion[0].trim())){
								if(cadenaInformacion[1] != null){
									this.mensajeGlogal = "La solicitud N¬∞ "+ solicitud.getId().getNumSolicitud() +" esta tomada por el usuario "+ cadenaInformacion[1] +".";
								}else{
									this.mensajeGlogal = "La solicitud ya fue tomada por otro usuario.";
								}
							}else if(cadenaInformacion[0] != null && "2".equals(cadenaInformacion[0].trim())){
								if(cadenaInformacion[1] != null){
									this.mensajeGlogal = cadenaInformacion[1].trim();
								}else{
									this.mensajeGlogal = "La solicitud ya fue tomada por otro usuario.";
								}
							}
						}
				   }
				}else{
					if(usuarioCargoAux != null && usuarioCargoAux.getAdministrador().booleanValue()){
						if(this.modalAnalista.equals("I") || this.modalAnalista.equals("DR") 
						|| this.modalAnalista.equals("DC") || this.modalAnalista.equals("N")
						){
							solicitud.setEstado("E");
							solicitud.setUsuarioActual(usuarioLogueado.getAlias());
							if(this.modalAnalista.equals("I")){
								solicitud.setUsuarioDevuelve(usuarioLogueado.getAlias());
							}
							scoringService.mergerSolicitud(solicitud);
							
							insertarLogs(solicitud, 9);
							LcredEstado estado = ObtenerEstadoSolictud("E");
							insertHitos(solicitud, estado, "NADA", 0);
							entityManager.createQuery("update LcredSolicitud set analizar=1 where id.numSolicitud=:sol")
							             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
							entityManager.refresh(solicitud);
							entityManager.flush();	
						}else if(this.modalAnalista.equals("E") || this.modalAnalista.equals("NU") || this.modalAnalista.equals("A") || this.modalAnalista.equals("R")){
							if(usuarioCargoAux != null && usuarioCargoAux.getAdministrador().booleanValue()){
								solicitud.setEstado("E");
								solicitud.setUsuarioActual(usuarioLogueado.getAlias());
								scoringService.mergerSolicitud(solicitud);
								insertarLogs(solicitud, 9);
								LcredEstado estado = ObtenerEstadoSolictud("E");
								insertHitos(solicitud, estado, "RESPUESTA", 0);
								entityManager.createQuery("update LcredSolicitud set analizar=1 where id.numSolicitud=:sol")
								             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
								entityManager.refresh(solicitud);
								entityManager.flush();
							}
						}else if(this.modalAnalista.equals("SA") || this.modalAnalista.equals("B")){
							if(usuarioCargoAux != null && usuarioCargoAux.getAdministrador().booleanValue() == true && usuarioCargoAux.getUsuario().getAlias().equals(usuarioLogueado.getAlias())){
								solicitud.setEstado("E");
								solicitud.setUsuarioActual(usuarioLogueado.getAlias());
								scoringService.mergerSolicitud(solicitud);
								insertarLogs(solicitud, 9);
								LcredEstado estado = ObtenerEstadoSolictud("E");
								insertHitos(solicitud, estado, "RESPUESTA", 0);
								entityManager.createQuery("update LcredSolicitud set analizar=1 where id.numSolicitud=:sol")
								             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
								entityManager.refresh(solicitud);
								entityManager.flush();
							}					
						}
						evaludarDespuesAnalisis(solicitud);
						this.mensajeGlogal = null;
					}else{
						this.mensajeGlogal = "Solo puede ser tomada por algun administrador, porque presenta problema la solicitud de datos.";
					}
				}
			}else if(this.paginaIngreso == 31 ){
				if(solicitud != null && condicion != null){
					String mensaje = scoringService.verificarSiEstaTomadaSolicitud(solicitud.getId().getNumSolicitud(), usuarioLogueado.getAlias(), usuarioCargoLogueado.getAdministrador());
					if(mensaje == null){
						if(this.modalAnalista.equals("I") || this.modalAnalista.equals("DR") 
						|| this.modalAnalista.equals("DC") || this.modalAnalista.equals("N")
						){
							solicitud.setEstado("E");
							solicitud.setUsuarioActual(usuarioLogueado.getAlias());
							if(this.modalAnalista.equals("I")){
								solicitud.setUsuarioDevuelve(usuarioLogueado.getAlias());
							}
							condicion.setStatusSolicitud("E");
							condicion.setFechaAnalisis(new Date());
							condicion.setHoraAnalisis(new Date());
							condicion.setUsuarioAnalisis(usuarioLogueado.getAlias());
							scoringService.mergerSolicitud(solicitud);
							scoringService.mergerSolicitudCondiciones(condicion);
							
							insertarLogs(solicitud, 9);
							LcredEstado estado = ObtenerEstadoSolictud("E");
							insertHitos(solicitud, estado, "NADA", 0);
							entityManager.createQuery("update LcredSolicitud set analizar=1 where id.numSolicitud=:sol")
							             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
							entityManager.flush();	
							entityManager.refresh(solicitud);
							entityManager.refresh(condicion);
						}else if(this.modalAnalista.equals("E") || this.modalAnalista.equals("NU") || this.modalAnalista.equals("A") 
								|| this.modalAnalista.equals("R") || this.modalAnalista.equals("N")){
							if(usuarioCargoAux != null && usuarioCargoAux.getAdministrador().booleanValue()){
								solicitud.setEstado("E");
								solicitud.setUsuarioActual(usuarioLogueado.getAlias());
								condicion.setStatusSolicitud("E");	
								scoringService.mergerSolicitud(solicitud);
								scoringService.mergerSolicitudCondiciones(condicion);
								
								insertarLogs(solicitud, 9);
								LcredEstado estado = ObtenerEstadoSolictud("E");
								insertHitos(solicitud, estado, "RESPUESTA", 0);
								entityManager.createQuery("update LcredSolicitud set analizar=1 where id.numSolicitud=:sol")
								             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
								entityManager.flush();
								
								entityManager.refresh(solicitud);
								entityManager.refresh(condicion);
								entityManager.flush();	
							}
						}else if(this.modalAnalista.equals("SA") || this.modalAnalista.equals("B")){
							if(usuarioCargoAux != null && usuarioCargoAux.getAdministrador().booleanValue() == true && usuarioCargoAux.getUsuario().getAlias().equals(usuarioLogueado.getAlias())){
								solicitud.setEstado("E");
								solicitud.setUsuarioActual(usuarioLogueado.getAlias());
								condicion.setStatusSolicitud("E");	
								scoringService.mergerSolicitud(solicitud);
								scoringService.mergerSolicitudCondiciones(condicion);
								
								insertarLogs(solicitud, 9);
								LcredEstado estado = ObtenerEstadoSolictud("E");
								insertHitos(solicitud, estado, "RESPUESTA", 0);
								entityManager.createQuery("update LcredSolicitud set analizar=1 where id.numSolicitud=:sol")
								             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
								entityManager.flush();
								
								entityManager.refresh(solicitud);
								entityManager.refresh(condicion);
								entityManager.flush();	
							}
						}
						evaludarDespuesAnalisis(solicitud);
						this.mensajeGlogal = null;
					}else{
						String[] cadenaInformacion = mensaje.split("-");
						if(cadenaInformacion != null){
							if(cadenaInformacion[0] != null && "1".equals(cadenaInformacion[0].trim())){
								if(cadenaInformacion[1] != null){
									this.mensajeGlogal = "La solicitud N¬∞ "+ solicitud.getId().getNumSolicitud() +" esta tomada por el usuario "+ cadenaInformacion[1] +".";
								}else{
									this.mensajeGlogal = "La solicitud ya fue tomada por otro usuario.";
								}
							}else if(cadenaInformacion[0] != null && "2".equals(cadenaInformacion[0].trim())){
								if(cadenaInformacion[1] != null){
									this.mensajeGlogal = cadenaInformacion[1].trim();
								}else{
									this.mensajeGlogal = "La solicitud ya fue tomada por otro usuario.";
								}
							}
						}
					}
				}else{
					if(usuarioCargoAux != null && usuarioCargoAux.getAdministrador().booleanValue()){
						if(this.modalAnalista.equals("I") || this.modalAnalista.equals("DR") 
						|| this.modalAnalista.equals("DC") || this.modalAnalista.equals("N")
						|| this.modalAnalista.equals("R")){
							solicitud.setEstado("E");
							solicitud.setUsuarioActual(usuarioLogueado.getAlias());
							if(this.modalAnalista.equals("I")){
								solicitud.setUsuarioDevuelve(usuarioLogueado.getAlias());
							}
							scoringService.mergerSolicitud(solicitud);
							
							insertarLogs(solicitud, 9);
							LcredEstado estado = ObtenerEstadoSolictud("E");
							insertHitos(solicitud, estado, "NADA", 0);
							entityManager.createQuery("update LcredSolicitud set analizar=1 where id.numSolicitud=:sol")
							             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
							entityManager.refresh(solicitud);
							entityManager.flush();	
						}else if(this.modalAnalista.equals("E") || this.modalAnalista.equals("NU") || this.modalAnalista.equals("A") || this.modalAnalista.equals("R")){
							if(usuarioCargoAux != null && usuarioCargoAux.getAdministrador().booleanValue()){
								solicitud.setEstado("E");
								solicitud.setUsuarioActual(usuarioLogueado.getAlias());
								scoringService.mergerSolicitud(solicitud);
								insertarLogs(solicitud, 9);
								LcredEstado estado = ObtenerEstadoSolictud("E");
								insertHitos(solicitud, estado, "RESPUESTA", 0);
								entityManager.createQuery("update LcredSolicitud set analizar=1 where id.numSolicitud=:sol")
								             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
								entityManager.refresh(solicitud);
								entityManager.flush();
							}
						}else if(this.modalAnalista.equals("SA") || this.modalAnalista.equals("B")){
							if(usuarioCargoAux != null && usuarioCargoAux.getAdministrador().booleanValue() == true && usuarioCargoAux.getUsuario().getAlias().equals(usuarioLogueado.getAlias())){
								solicitud.setEstado("E");
								solicitud.setUsuarioActual(usuarioLogueado.getAlias());
								scoringService.mergerSolicitud(solicitud);
								insertarLogs(solicitud, 9);
								LcredEstado estado = ObtenerEstadoSolictud("E");
								insertHitos(solicitud, estado, "RESPUESTA", 0);
								entityManager.createQuery("update LcredSolicitud set analizar=1 where id.numSolicitud=:sol")
								             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
								entityManager.refresh(solicitud);
								entityManager.flush();
							}
						}
						
						evaludarDespuesAnalisis(solicitud);
						this.mensajeGlogal = null;
					}else{
						this.mensajeGlogal = "Solo puede ser tomada por algun administrador, porque presenta problema la solicitud de datos.";
					}
				}
		}else if(this.paginaIngreso == 41 || this.paginaIngreso == 43 || this.paginaIngreso == 44){
				if(solicitud != null && solicitudOtra != null){
					String mensaje = scoringService.verificarSiEstaTomadaSolicitud(solicitud.getId().getNumSolicitud(), usuarioLogueado.getAlias(), usuarioCargoLogueado.getAdministrador());
					if(mensaje == null){					
						if(this.modalAnalista.equals("I") || this.modalAnalista.equals("DR") 
						|| this.modalAnalista.equals("DC") || this.modalAnalista.equals("N")
						){
							solicitud.setEstado("E");
							solicitud.setUsuarioActual(usuarioLogueado.getAlias());
							if(this.modalAnalista.equals("I")){
								solicitud.setUsuarioDevuelve(usuarioLogueado.getAlias());
							}
							solicitudOtra.setStatusSolicitud("E");
							solicitudOtra.setFechaAnalisis(new Date());
							solicitudOtra.setHoraAnalisis(new Date());
							solicitudOtra.setUsuarioAnalisis(usuarioLogueado.getAlias());
							scoringService.mergerSolicitud(solicitud);
							scoringService.mergerSolicitudOtrasSolicitudes(solicitudOtra);
							
						
							insertarLogs(solicitud, 9);
							LcredEstado estado = ObtenerEstadoSolictud("E");
							insertHitos(solicitud, estado, "NADA", 0);
							entityManager.createQuery("update LcredSolicitud set analizar=1 where id.numSolicitud=:sol")
							             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
							entityManager.flush();
							
							entityManager.refresh(solicitud);
							entityManager.refresh(solicitudOtra);
						}else if(this.modalAnalista.equals("E") || this.modalAnalista.equals("NU") || this.modalAnalista.equals("A") || this.modalAnalista.equals("R")){
							if(usuarioCargoAux != null && usuarioCargoAux.getAdministrador().booleanValue()){
								solicitud.setEstado("E");
								solicitud.setUsuarioActual(usuarioLogueado.getAlias());
								solicitudOtra.setStatusSolicitud("E");	
								scoringService.mergerSolicitud(solicitud);
								scoringService.mergerSolicitudOtrasSolicitudes(solicitudOtra);
								
								insertarLogs(solicitud, 9);
								LcredEstado estado = ObtenerEstadoSolictud("E");
								insertHitos(solicitud, estado, "RESPUESTA", 0);
								entityManager.createQuery("update LcredSolicitud set analizar=1 where id.numSolicitud=:sol")
								             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
								entityManager.flush();
		
								entityManager.refresh(solicitud);
								entityManager.refresh(solicitudOtra);
							}
						}else if(this.modalAnalista.equals("SA") || this.modalAnalista.equals("B")){
							if(usuarioCargoAux != null && usuarioCargoAux.getAdministrador().booleanValue() == true && usuarioCargoAux.getUsuario().getAlias().equals(usuarioLogueado.getAlias())){
								solicitud.setEstado("E");
								solicitud.setUsuarioActual(usuarioLogueado.getAlias());
								solicitudOtra.setStatusSolicitud("E");	
								scoringService.mergerSolicitud(solicitud);
								scoringService.mergerSolicitudOtrasSolicitudes(solicitudOtra);
								
								insertarLogs(solicitud, 9);
								LcredEstado estado = ObtenerEstadoSolictud("E");
								insertHitos(solicitud, estado, "RESPUESTA", 0);
								entityManager.createQuery("update LcredSolicitud set analizar=1 where id.numSolicitud=:sol")
								             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
								entityManager.flush();
		
								entityManager.refresh(solicitud);
								entityManager.refresh(solicitudOtra);
							}
						}
						evaludarDespuesAnalisis(solicitud);
						this.mensajeGlogal = null;
					}else{
						String[] cadenaInformacion = mensaje.split("-");
						if(cadenaInformacion != null){
							if(cadenaInformacion[0] != null && "1".equals(cadenaInformacion[0].trim())){
								if(cadenaInformacion[1] != null){
									this.mensajeGlogal = "La solicitud N¬∞ "+ solicitud.getId().getNumSolicitud() +" esta tomada por el usuario "+ cadenaInformacion[1] +".";
								}else{
									this.mensajeGlogal = "La solicitud ya fue tomada por otro usuario.";
								}
							}else if(cadenaInformacion[0] != null && "2".equals(cadenaInformacion[0].trim())){
								if(cadenaInformacion[1] != null){
									this.mensajeGlogal = cadenaInformacion[1].trim();
								}else{
									this.mensajeGlogal = "La solicitud ya fue tomada por otro usuario.";
								}
							}
						}
					}
				}else{
					if(usuarioCargoAux != null && usuarioCargoAux.getAdministrador().booleanValue()){
						if(this.modalAnalista.equals("I") || this.modalAnalista.equals("DR") 
						|| this.modalAnalista.equals("DC") || this.modalAnalista.equals("N")){
							solicitud.setEstado("E");
							solicitud.setUsuarioActual(usuarioLogueado.getAlias());
							if(this.modalAnalista.equals("I")){
								solicitud.setUsuarioDevuelve(usuarioLogueado.getAlias());
							}
							scoringService.mergerSolicitud(solicitud);
							
							insertarLogs(solicitud, 9);
							LcredEstado estado = ObtenerEstadoSolictud("E");
							insertHitos(solicitud, estado, "NADA", 0);
							entityManager.createQuery("update LcredSolicitud set analizar=1 where id.numSolicitud=:sol")
							             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
							entityManager.refresh(solicitud);
							entityManager.flush();	
						}else if(this.modalAnalista.equals("E") || this.modalAnalista.equals("NU") || this.modalAnalista.equals("A") || this.modalAnalista.equals("R")){
							if(usuarioCargoAux != null && usuarioCargoAux.getAdministrador().booleanValue()){
								solicitud.setEstado("E");
								solicitud.setUsuarioActual(usuarioLogueado.getAlias());
								scoringService.mergerSolicitud(solicitud);
								insertarLogs(solicitud, 9);
								LcredEstado estado = ObtenerEstadoSolictud("E");
								insertHitos(solicitud, estado, "RESPUESTA", 0);
								entityManager.createQuery("update LcredSolicitud set analizar=1 where id.numSolicitud=:sol")
								             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
								entityManager.refresh(solicitud);
								entityManager.flush();
							}
						}else if(this.modalAnalista.equals("SA") || this.modalAnalista.equals("B")){
							if(usuarioCargoAux != null && usuarioCargoAux.getAdministrador().booleanValue() == true && usuarioCargoAux.getUsuario().getAlias().equals(usuarioLogueado.getAlias())){
								solicitud.setEstado("E");
								solicitud.setUsuarioActual(usuarioLogueado.getAlias());
								scoringService.mergerSolicitud(solicitud);
								insertarLogs(solicitud, 9);
								LcredEstado estado = ObtenerEstadoSolictud("E");
								insertHitos(solicitud, estado, "RESPUESTA", 0);
								entityManager.createQuery("update LcredSolicitud set analizar=1 where id.numSolicitud=:sol")
								             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
								entityManager.refresh(solicitud);
								entityManager.flush();
							}
						}
						evaludarDespuesAnalisis(solicitud);
						this.mensajeGlogal = null;
					}else{
						this.mensajeGlogal = "Solo puede ser tomada por algun administrador, porque presenta problema la solicitud de datos.";
					}
				}
			}
				
		}catch (Exception e) {
			log.error("Error, al cambiar el estado de la solicitud #0", e.getMessage());
		}
	}
	public void enviarASeguroSolicitud(){
		try{
			if(this.paginaIngreso == 11 || this.paginaIngreso == 12){	
				if(solicitud != null && venta != null){
				 if(this.modalAnalista.equals("E")){
						solicitud.setEstado("ES");
						solicitud.setUsuarioActual(usuarioLogueado.getAlias());
						solicitud.setUsuarioDevuelve(usuarioLogueado.getAlias());
						venta.setStatusSolicitud("ES");	
						scoringService.mergerSolicitud(solicitud);
						scoringService.mergerSolicitudVentaPuntual(venta);
						
						insertarLogs(solicitud, 12);
						LcredEstado estado = ObtenerEstadoSolictud("ES");
						insertHitos(solicitud, estado, "NADA", 0);
						entityManager.createQuery("update LcredSolicitud set analizar=1 where id.numSolicitud=:sol")
						             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
						entityManager.flush();
					}
					evaludarDespuesAnalisis(solicitud);
					this.mensajeGlogal = "Se envia a seguro La solicitud N¬∞ "+ solicitud.getId().getNumSolicitud() +".";
				}
			}else if(this.paginaIngreso == 21 || this.paginaIngreso == 22 || this.paginaIngreso == 23 || this.paginaIngreso == 24){
				if(solicitud != null && credito != null){
					 if(this.modalAnalista.equals("E")){
						solicitud.setEstado("ES");
						solicitud.setUsuarioActual(usuarioLogueado.getAlias());
						solicitud.setUsuarioDevuelve(usuarioLogueado.getAlias());
						credito.setStatusSolicitud("ES");
						scoringService.mergerSolicitud(solicitud);
						scoringService.mergerSolicitudLineaCredito(credito);						
						
						insertarLogs(solicitud, 12);
						LcredEstado estado = ObtenerEstadoSolictud("ES");
						insertHitos(solicitud, estado, "NADA", 0);
						entityManager.createQuery("update LcredSolicitud set analizar=1 where id.numSolicitud=:sol")
						             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
						entityManager.flush();
					}
					evaludarDespuesAnalisis(solicitud);
					this.mensajeGlogal = "Se envia a seguro La solicitud N¬∞ "+ solicitud.getId().getNumSolicitud() +".";
				}				
				
			}else if(this.paginaIngreso == 31 ){
				if(solicitud != null && condicion != null){
					if(this.modalAnalista.equals("E")){
						solicitud.setEstado("ES");
						solicitud.setUsuarioActual(usuarioLogueado.getAlias());
						solicitud.setUsuarioDevuelve(usuarioLogueado.getAlias());
						condicion.setStatusSolicitud("ES");	
						scoringService.mergerSolicitud(solicitud);
						scoringService.mergerSolicitudCondiciones(condicion);
						
						
						insertarLogs(solicitud, 12);
						LcredEstado estado = ObtenerEstadoSolictud("ES");
						insertHitos(solicitud, estado, "NADA", 0);
						entityManager.createQuery("update LcredSolicitud set analizar=1 where id.numSolicitud=:sol")
						             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
						entityManager.flush();
					}
					evaludarDespuesAnalisis(solicitud);
					this.mensajeGlogal = "Se envia a seguro La solicitud N¬∞ "+ solicitud.getId().getNumSolicitud() +".";
				}				
			}else if(this.paginaIngreso == 41 || this.paginaIngreso == 43 || this.paginaIngreso == 44){
				if(solicitud != null && solicitudOtra != null){
					 if(this.modalAnalista.equals("E")){
						solicitud.setEstado("ES");
						solicitud.setUsuarioActual(usuarioLogueado.getAlias());
						solicitud.setUsuarioDevuelve(usuarioLogueado.getAlias());
						solicitudOtra.setStatusSolicitud("ES");	
						scoringService.mergerSolicitud(solicitud);
						scoringService.mergerSolicitudOtrasSolicitudes(solicitudOtra);
						
						insertarLogs(solicitud, 12);
						LcredEstado estado = ObtenerEstadoSolictud("ES");
						insertHitos(solicitud, estado, "NADA", 0);
						entityManager.createQuery("update LcredSolicitud set analizar=1 where id.numSolicitud=:sol")
						             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
						entityManager.flush();
					}
					evaludarDespuesAnalisis(solicitud);
					this.mensajeGlogal = "Se envia a seguro La solicitud N¬∞ "+ solicitud.getId().getNumSolicitud() +".";
				}				
			}
				
		}catch (Exception e) {
			log.error("Error, al cambiar el estado de la solicitud", e.getMessage());
		}
	}
	public void salirAnalisisSolicitud(){
		  log.debug("salir del pop.");	
		  if(this.salirDelMensaje == false){
			  this.salirDelMensaje = true;
		  }
	}
	public LcredCargos sacarCargoUsuario(String codigo){
		LcredCargos cargo = null;
		try{
			if(listaCargos != null){
				for(LcredCargos lc : listaCargos){
					if(lc.getCodCargo().equals(codigo)){
						cargo = lc;
						break;
					}
				}
			}
		}catch (Exception e) {
			log.error("Error, al buscar el cargo.", e.getMessage());
		}
		return cargo;
	}
	public void sacarLogHitos(){
		SolicitudDTO sol = null;
		try{
			if(solicitud != null && cliente != null){
				sol = new SolicitudDTO();
				sol.setIdSolictud(solicitud.getId().getNumSolicitud());
				sol.setRazonSocial(cliente.getRazonSocial());
				sol.setEstado(cliente.getEstadoSolicitud());				
				globalHitosLogdService.setSolicitud(sol);
				List<SolicitudHitos> listaSolicitudesHitos = scoringService.getSolicitudHitos(sol.getIdSolictud());
				if(listaSolicitudesHitos != null){
					globalHitosLogdService.setListaHitos(listaSolicitudesHitos);
				}
			}
			
		}catch (Exception e) {
			log.error("Error, al desplegar los datos de la solicitud", e.getMessage());
		}
		
	}		
	public void validarBotonera(TipoCuentasKupferType tipo, LcredSolicitud sol ){
		try{
			if(usuarioCargoAux != null && usuarioCargoAux.getAdministrador().booleanValue() == true){
				botonera.setDevolver(true);
				
				botonera.setAdjuntar(true);
				if(sol.getEstado().equals("A") || sol.getEstado().equals("R") || sol.getEstado().equals("P") || sol.getEstado().equals("NU")){
					botonera.setEvaluarAdjuntarArchivo(2);
				}else{
					botonera.setEvaluarAdjuntarArchivo(1);
				}
				botonera.setAnular(true);
				botonera.setObservaiones(true);
				botonera.setSalir(true);	
				botonera.setHitos(true);
				botonera.setLogs(true);
				botonera.setAnalisis(true);
				botonera.setDerivar(true);
				botonera.setImprimir(true);
				if(sol.getEstado().equals("SA") || sol.getEstado().equals("B")){
					log.debug("Estado : #0", sol.getEstado());
					SolicitudUsuarioDerivada sud =  scoringService.
							getSolicitudUsuarioDerivacionForSolicitudIpPersonal(solicitud.getId().getNumSolicitud(),
									usuarioLogueado.getIdPersonal());
					
					if(sud != null){
						log.debug("si tiene  asignacion");
						if(sol.getEstado().equals("SA")){
							botonera.setMuestraBotonAnalisisToCierraAnalisis(3);
							botonera.setAprobar(true);
							botonera.setRechazar(true);
						}else if(sol.getEstado().equals("B")){
							botonera.setMuestraBotonAnalisisToCierraAnalisis(1);
							botonera.setAprobar(false);
							botonera.setRechazar(false);
						}
					}
				}else{
					botonera.setMuestraBotonAnalisisToCierraAnalisis(0);
					botonera.setAprobar(true);
					botonera.setRechazar(true);
				}
			}else{
				if(tipo  != null && usuarioCargoAux != null && sol != null){
					if(sol.getEstado().equals("I") || sol.getEstado().equals("E") || sol.getEstado().equals("N") ||
					   sol.getEstado().equals("DE") || sol.getEstado().equals("DR") || sol.getEstado().equals("DC") || sol.getEstado().equals("ES")){//'I','E','N','DE','DR','DC'
						if(sol.getUsuarioDevuelve() == null || sol.getUsuarioDevuelve().equals("")){
							List<FuncionesType> lista = scoringService.obtenerFuncionesUsuario(usuarioCargoAux.getUsuario().getIdPersonal());
							if(lista != null){
								for(FuncionesType pfc : lista){
									log.debug("perfil funcion canales #0", pfc.name());
									if(pfc.name().equals(FuncionesType.GENERARSOLICITUD.name())){
										botonera.setDevolver(true);
									}else if(pfc.name().equals(FuncionesType.APRUEBARECHAZO.name())){
										botonera.setDevolver(true);
										botonera.setAdjuntar(true);
										if(sol.getEstado().equals("A") || sol.getEstado().equals("R") || sol.getEstado().equals("P") || sol.getEstado().equals("NU")){
											botonera.setEvaluarAdjuntarArchivo(2);
										}else{
											botonera.setEvaluarAdjuntarArchivo(1);
										}
										botonera.setAprobar(true);
										botonera.setRechazar(true);
										botonera.setAnular(true);
										botonera.setAnalisis(true);
										botonera.setMuestraBotonAnalisisToCierraAnalisis(0);
										botonera.setImprimir(true);
									}else if(pfc.name().equals(FuncionesType.SOLOVISUALIZAR.name())){
										botonera.setObservaiones(true);
										botonera.setSalir(true);	
										botonera.setHitos(true);
										botonera.setLogs(true);
										botonera.setImprimir(true);
									}else if(pfc.name().equals(FuncionesType.ANALISTAFINANCIERO.name())){
										botonera.setAnalisis(true);
										botonera.setMuestraBotonAnalisisToCierraAnalisis(0);
										botonera.setImprimir(true);
									}else if(pfc.name().equals(FuncionesType.ANALISTANEGOCIO.name())){
										botonera.setAnalisis(true);
										botonera.setMuestraBotonAnalisisToCierraAnalisis(0);
										botonera.setDerivar(true);
										botonera.setImprimir(true);
									}
								}
							}
						}else{
							if(sol.getUsuarioDevuelve() != null  && sol.getUsuarioDevuelve().equals(usuarioLogueado.getAlias())){
									List<FuncionesType> lista = scoringService.obtenerFuncionesUsuario(usuarioCargoAux.getUsuario().getIdPersonal());
									if(lista != null){
										for(FuncionesType pfc : lista){
											log.debug("perfil funcion canales #0", pfc.name());
											if(pfc.name().equals(FuncionesType.GENERARSOLICITUD.name())){
												botonera.setDevolver(true);
											}else if(pfc.name().equals(FuncionesType.APRUEBARECHAZO.name())){
												botonera.setDevolver(true);
												botonera.setAdjuntar(true);
												if(sol.getEstado().equals("A") || sol.getEstado().equals("R") || sol.getEstado().equals("P") || sol.getEstado().equals("NU")){
													botonera.setEvaluarAdjuntarArchivo(2);
												}else{
													botonera.setEvaluarAdjuntarArchivo(1);
												}
												botonera.setAprobar(true);
												botonera.setRechazar(true);
												botonera.setAnular(true);
												botonera.setImprimir(true);
											}else if(pfc.name().equals(FuncionesType.SOLOVISUALIZAR.name())){
												botonera.setObservaiones(true);
												botonera.setSalir(true);
												botonera.setHitos(true);
												botonera.setLogs(true);
												botonera.setImprimir(true);
											}else if(pfc.name().equals(FuncionesType.ANALISTAFINANCIERO.name())){
												botonera.setAnalisis(true);
												botonera.setMuestraBotonAnalisisToCierraAnalisis(0);
												botonera.setImprimir(true);
											}else if(pfc.name().equals(FuncionesType.ANALISTANEGOCIO.name())){
												botonera.setAnalisis(true);
												botonera.setMuestraBotonAnalisisToCierraAnalisis(0);
												botonera.setDerivar(true);
												botonera.setImprimir(true);
											}
										}
								}else{
									botonera.setObservaiones(true);
									botonera.setSalir(true);
									botonera.setHitos(true);
									botonera.setLogs(true);	
									botonera.setImprimir(true);
									botonera.setAdjuntar(true);
									if(sol.getEstado().equals("A") || sol.getEstado().equals("R") || sol.getEstado().equals("P") || sol.getEstado().equals("NU")){
										botonera.setEvaluarAdjuntarArchivo(2);
									}else{
										botonera.setEvaluarAdjuntarArchivo(1);
									}
									
								}
							}else{
								botonera.setAdjuntar(true);
								if(sol.getEstado().equals("A") || sol.getEstado().equals("R") || sol.getEstado().equals("P") || sol.getEstado().equals("NU")){
									botonera.setEvaluarAdjuntarArchivo(2);
								}else{
									botonera.setEvaluarAdjuntarArchivo(1);
								}
								botonera.setObservaiones(true);
								botonera.setSalir(true);
								botonera.setHitos(true);
								botonera.setLogs(true);	
								botonera.setImprimir(true);
								if(sol.getEstado().equals("SA") || sol.getEstado().equals("B")){
									log.debug("Estado : #0", sol.getEstado());
									SolicitudUsuarioDerivada sud =  scoringService.
											getSolicitudUsuarioDerivacionForSolicitudIpPersonal(solicitud.getId().getNumSolicitud(),
													usuarioLogueado.getIdPersonal());
									
									if(sud != null){
										log.debug("si tiene  asignacion");
										if(sol.getEstado().equals("SA")){
											botonera.setMuestraBotonAnalisisToCierraAnalisis(3);
											botonera.setAprobar(true);
											botonera.setRechazar(true);
										}else if(sol.getEstado().equals("B")){
											botonera.setMuestraBotonAnalisisToCierraAnalisis(1);
											botonera.setAprobar(false);
											botonera.setRechazar(false);
										}
									}
									
								}else if(sol.getEstado().equals("N")){
									botonera.setMuestraBotonAnalisisToCierraAnalisis(2);
									botonera.setCerrarAnalisis(true);
									botonera.setAprobar(true);
									botonera.setRechazar(true);
								}
							}
						}
					}else{
						botonera.setAdjuntar(true);
						if(sol.getEstado().equals("A") || sol.getEstado().equals("R") || sol.getEstado().equals("P") || sol.getEstado().equals("NU")){
							botonera.setEvaluarAdjuntarArchivo(2);
						}else{
							botonera.setEvaluarAdjuntarArchivo(1);
						}						
						botonera.setObservaiones(true);
						botonera.setSalir(true);
						botonera.setHitos(true);
						botonera.setLogs(true);	
						botonera.setImprimir(true);
						if(sol.getEstado().equals("SA") || sol.getEstado().equals("B")){
							log.debug("Estado : #0", sol.getEstado());
							SolicitudUsuarioDerivada sud =  scoringService.
									getSolicitudUsuarioDerivacionForSolicitudIpPersonal(solicitud.getId().getNumSolicitud(),
											usuarioLogueado.getIdPersonal());
							
							if(sud != null){
								log.debug("si tiene  asignacion");
								if(sol.getEstado().equals("SA")){
									botonera.setMuestraBotonAnalisisToCierraAnalisis(3);
									botonera.setAprobar(true);
									botonera.setRechazar(true);
								}else if(sol.getEstado().equals("B")){
									botonera.setMuestraBotonAnalisisToCierraAnalisis(1);
									botonera.setAprobar(true);
									botonera.setRechazar(true);
									botonera.setAnalisis(true);
								}
							}
						}else if(sol.getEstado().equals("N")){
							botonera.setMuestraBotonAnalisisToCierraAnalisis(2);
							botonera.setCerrarAnalisis(true);
							botonera.setAprobar(true);
							botonera.setRechazar(true);
						}
					}
				}
			}
			
		}catch (Exception e) {
			log.error("Error, al setear al botenera #0", e.getMessage());
		}
	}
	public void sacarAprobadores(){
		SolicitudDTO sol = null;
		try{
			if(solicitud != null && cliente != null){
				sol = new SolicitudDTO();
				sol.setIdSolictud(solicitud.getId().getNumSolicitud());
				sol.setRazonSocial(cliente.getRazonSocial());
				sol.setEstado(cliente.getEstadoSolicitud());
				this.setEstadoLogHitos(scoringService.obtenerEstado(solicitud.getEstado()));
				globalHitosLogdService.setSolicitud(sol);
//				List<SolicitudAprobaRechaza> listaSolicitudAprobaRechaza = scoringService.getSolicitudAprobaRechazo(sol.getIdSolictud());
//				if(listaSolicitudAprobaRechaza != null){
//					globalHitosLogdService.setListaAprobadoToRechazado(listaSolicitudAprobaRechaza);
//				}
				List<SolicitudUsuarioDerivada> listaDerivadas = scoringService.getSolicitudUsuarioDerivacionForSolicitud(solicitudLogHitos.getId().getNumSolicitud());
				if(listaDerivadas != null && listaDerivadas.size() > 0){
					this.setListUsuariosDerivados(listaDerivadas);
				}				
				
				this.listaRechazosSolicitudesNuevas = scoringService.getSolicitudMotivoRechazoForSolicitud(solicitud.getId().getNumSolicitud());
				if(this.listaRechazosSolicitudesNuevas != null && this.listaRechazosSolicitudesNuevas.size() > 0 ){
					log.debug("cantidad de rechazos de la solicitud #3", this.listaRechazosSolicitudesNuevas.size());
				}
				if(this.paginaIngreso == 11 || this.paginaIngreso == 12 ){
					if(this.venta != null){
						this.setObservacionesFinalesModal(venta.getObservacionesFinal());
					}
				}else if(this.paginaIngreso == 21 || this.paginaIngreso == 22 || this.paginaIngreso == 23 || this.paginaIngreso == 24){
					if(this.credito != null){
						this.setObservacionesFinalesModal(credito.getObservacionesFinal());					
					}				
				}else if(this.paginaIngreso == 31){
					if(this.condicion != null){
						this.setObservacionesFinalesModal(condicion.getObservacionesFinal());	
					}				
				}else if(this.paginaIngreso == 41 || this.paginaIngreso == 42 || this.paginaIngreso == 43 || this.paginaIngreso == 44){
					if(this.solicitudOtra != null){
						this.setObservacionesFinalesModal(solicitudOtra.getObservacionesFinal());							
					}
				}	
				
				
			}
		}catch (Exception e) {
			log.error("Error, al sacar los datos aprobadores", e.getMessage());
		}
		
	}
	
	public void sacarAprobadoresSckAntiguas(){
		SolicitudAntiguaDTO sol = null;
		SolicitudAntiguaDTO solSegunda = null; 
		String[] arrayCodigoRechazo = null;
		try{
			if(solicitud != null){
				sol = new SolicitudAntiguaDTO();
				solSegunda = new SolicitudAntiguaDTO();
				sol.setSolicitud(solicitud);
				solSegunda.setSolicitud(solicitud);
				if(this.paginaIngreso == 11 || this.paginaIngreso == 12 ){
					if(this.venta != null){
						sol.setFechaAnalisis(venta.getFechaAnalisis());
						sol.setHoraAnalisis(venta.getHoraAnalisis());
						sol.setUsuarioAnalisis(venta.getUsuarioAnalisis());
						sol.setObservacionesRechazo(venta.getObservacionesRechazo());
						if(venta.getMotivoRechazo() != null ){
							arrayCodigoRechazo = venta.getMotivoRechazo().split("/");
						}
						
					}
				}else if(this.paginaIngreso == 21 || this.paginaIngreso == 22 || this.paginaIngreso == 23 || this.paginaIngreso == 24){
					if(this.credito != null){
						sol.setFechaAnalisis(credito.getFechaAnalisis());
						sol.setHoraAnalisis(credito.getHoraAnalisis());
						sol.setUsuarioAnalisis(credito.getUsuarioAnalisis());
						sol.setObservacionesRechazo(credito.getObservacionesRechazo());
						if(credito.getMotivoRechazo() != null ){
							arrayCodigoRechazo = credito.getMotivoRechazo().split("/");
						}						
					}				
				}else if(this.paginaIngreso == 31){
					if(this.condicion != null){
						sol.setFechaAnalisis(condicion.getFechaAnalisis());
						sol.setHoraAnalisis(condicion.getHoraAnalisis());
						sol.setUsuarioAnalisis(condicion.getUsuarioAnalisis());
						sol.setObservacionesRechazo(condicion.getObservacionesRechazo());
						if(condicion.getMotivoRechazo() != null ){
							arrayCodigoRechazo = condicion.getMotivoRechazo().split("/");
						}						
					}				
				}else if(this.paginaIngreso == 41 || this.paginaIngreso == 42 || this.paginaIngreso == 43 || this.paginaIngreso == 44){
					if(this.solicitudOtra != null){
						sol.setFechaAnalisis(solicitudOtra.getFechaAnalisis());
						sol.setHoraAnalisis(solicitudOtra.getHoraAnalisis());
						sol.setUsuarioAnalisis(solicitudOtra.getUsuarioAnalisis());
						sol.setObservacionesRechazo(solicitudOtra.getObservacionesRechazo());
						if(solicitudOtra.getMotivoRechazo() != null ){
							arrayCodigoRechazo = solicitudOtra.getMotivoRechazo().split("/");
						}						
						
					}
				}
				
				//vamos a sacar los aprobadores 
				
				List<String> listaAprobadores = scoringService.getTheAprobadoresRechazaronSolicitud(solicitud.getId().getNumSolicitud(), "PA");
				if(listaAprobadores != null){
					sol.setListaAprobadores(listaAprobadores);
				}
				
				//vamos a sacar los usuarios que rechazaron
				List<String> listaRechazaron  = scoringService.getTheAprobadoresRechazaronSolicitud(solicitud.getId().getNumSolicitud(), "SA");
				if(listaRechazaron != null){
					sol.setListaRechazos(listaRechazaron);
				}				
				
				if(arrayCodigoRechazo != null && arrayCodigoRechazo.length > 0){
					List<LcredMotivoRechazo> listMotRechazo = new ArrayList<LcredMotivoRechazo>(0);
					for(String codigo : arrayCodigoRechazo){
						LcredMotivoRechazo motivoAux = scoringService.getMotivosRechazosCodigo(codigo);
						if(motivoAux != null){
							listMotRechazo.add(motivoAux);
						}
					}
					sol.setListaMotivosRechazos(listaMotivosRechazos);
				}else{
					sol.setListaMotivosRechazos(null);
				}
				this.setSolicitudAntiguaDTO(sol);
			}
		}catch (Exception e) {
			log.error("Error, al sacar los datos aprobadores", e.getMessage());
		}
		
	}	
	public void verificaTicketCorreoConfirmar(SolicitudUsuarioCorreo objeto){
		try{
			if(objeto != null){
				log.debug("ticket  del usuario#0", objeto.getConfirmar());
			}
		}catch (Exception e) {
			log.error("Error,  no poder sacar los los ojebtos de zona");
		}
	}
	public Long getCodigoPersonal(String alias){
		Long id = (long)0;
		try{
			if(listaUsuarioSegurDTO != null){
				for(UsuarioSegurDTO obj : listaUsuarioSegurDTO){
					if((obj.getAlias().trim()).equals(alias.trim())){
						id = obj.getIdPersonal();
						break;
					}
				}
			}
		}catch (Exception e) {
			log.error("Error, al sacar los datos del usuario de la lista Usuario SegurDTO ", e.getMessage());
		}
		return id;
	}
	public boolean revisarExistenciaUsuarioEnListaUsuarioAgregado(String alias){
		boolean existente = false;
		try{
			if(listaDescripcionUsuariosCorreos != null){
				for(SolicitudUsuarioCorreo obj : listaDescripcionUsuariosCorreos){
					if((obj.getUsername().trim()).equals(alias.trim())){
						existente = true;
						break;
					}
				}
			}
		}catch (Exception e) {
			log.error("Error, al sacar los datos del usuario de la lista Usuario SegurDTO ", e.getMessage());
		}
		return existente;
	}
	public Sucursal obtenerObjetoSucursal(String codigo) {
		Sucursal suc = null;
		if (listaSucursales != null && codigo != null) {
			for (Sucursal s : listaSucursales) {
				if (s.getCodigo().equals(codigo)) {
					suc = s;
					break;
				}
			}
		}
		return suc;
	}
	
	List<SolicitudUsuarioCorreo> listaUsuariosEspeciales = new ArrayList<SolicitudUsuarioCorreo>(0);
	List<SolicitudUsuarioCorreo> listaUsuariosEspecialesPrincipal = new ArrayList<SolicitudUsuarioCorreo>(0);
	private String nombreUsuario;
	private String correoElectronico;
	
	
   /* seteo string de  socios */
	public void agregarUsuarioEspecial(){
		try{
			if(listaUsuariosEspeciales != null){
				for(SolicitudUsuarioCorreo suc : listaUsuariosEspeciales){
					if(listaCorreoAnaDer != null){
						listaCorreoAnaDer.add(suc);	
					}else{
						listaCorreoAnaDer = new ArrayList<SolicitudUsuarioCorreo>(0);
						listaCorreoAnaDer.add(suc);
					}
				}
			}
		}catch (Exception e) {
			log.error("Error al setear el string de nombre  y correo #0", e.getMessage());
		}
	}
	public void revisarToIngresarToLista(){
		try{
			if(this.nombreUsuario == null){
				FacesMessages.instance().add(Severity.ERROR,"Debe ingresar el nombre de usuario.");
				return;
			}else{
				if("".equals(this.nombreUsuario)){
					FacesMessages.instance().add(Severity.ERROR,"Debe ingresar el nombre de usuario.");
					return;
				}
			}
			if(this.correoElectronico == null){
				FacesMessages.instance().add(Severity.ERROR,"Debe ingresar el correo del usuario.");
				return;
			}else{
				if("".equals(this.correoElectronico)){
					FacesMessages.instance().add(Severity.ERROR,"Debe ingresar el correo del usuario.");
					return;
				}
				if(validarEmail(this.correoElectronico) == false){
					FacesMessages.instance().add(Severity.ERROR,"el correo ingresado no cumple con el formato de correo. Ej:(xxxxxxxx@kupfer.cl)");
					return;
				}
				
				SolicitudUsuarioCorreo usuarioEspecial = new SolicitudUsuarioCorreo();
				usuarioEspecial.setNombre(modificarTexto(this.nombreUsuario));
				usuarioEspecial.setCorreo(this.correoElectronico);
				usuarioEspecial.setUsername("Especial");
				usuarioEspecial.setEvaluar(true);
				
				if(listaUsuariosEspeciales == null){
					listaUsuariosEspeciales = new ArrayList<SolicitudUsuarioCorreo>(0);
					listaUsuariosEspeciales.add(usuarioEspecial);
					FacesMessages.instance().add(Severity.INFO,"Se agrego el usuario en la grilla.");
				}else{
					listaUsuariosEspeciales.add(usuarioEspecial);
					FacesMessages.instance().add(Severity.INFO,"Se agrego el usuario en la grilla.");

				}
				
				this.nombreUsuario = null;
				this.correoElectronico = null;
				
			}
			
			
		}catch (Exception e) {
			log.error("error, al ingresar los usuarios a la lista #0", e.getMessage());
		}
		
	}
	public void revisarToIngresarToListaPrincipal(){
		try{
			if(this.nombreUsuario == null){
				FacesMessages.instance().add(Severity.ERROR,"Debe ingresar el nombre de usuario.");
				return;
			}else{
				if("".equals(this.nombreUsuario)){
					FacesMessages.instance().add(Severity.ERROR,"Debe ingresar el nombre de usuario.");
					return;
				}
			}
			if(this.correoElectronico == null){
				FacesMessages.instance().add(Severity.ERROR,"Debe ingresar el correo del usuario.");
				return;
			}else{
				if("".equals(this.correoElectronico)){
					FacesMessages.instance().add(Severity.ERROR,"Debe ingresar el correo del usuario.");
					return;
				}
				if(validarEmail(this.correoElectronico) == false){
					FacesMessages.instance().add(Severity.ERROR,"el correo ingresado no cumple con el formato de correo. Ej:(xxxxxxxx@kupfer.cl)");
					return;
				}
				
				SolicitudUsuarioCorreo usuarioEspecial = new SolicitudUsuarioCorreo();
				usuarioEspecial.setNombre(modificarTexto(this.nombreUsuario));
				usuarioEspecial.setCorreo(this.correoElectronico);
				usuarioEspecial.setUsername("Especial");
				usuarioEspecial.setEvaluar(true);
				
				if(listaUsuariosEspecialesPrincipal == null){
					listaUsuariosEspecialesPrincipal = new ArrayList<SolicitudUsuarioCorreo>(0);
					listaUsuariosEspecialesPrincipal.add(usuarioEspecial);
					FacesMessages.instance().add(Severity.INFO,"Se agrego el usuario en la grilla.");
				}else{
					listaUsuariosEspecialesPrincipal.add(usuarioEspecial);
					FacesMessages.instance().add(Severity.INFO,"Se agrego el usuario en la grilla.");

				}
				
				this.nombreUsuario = null;
				this.correoElectronico = null;
				
			}
			
			
		}catch (Exception e) {
			log.error("error, al ingresar los usuarios a la lista #0", e.getMessage());
		}
		
	}	
	
   /* seteo string de  socios */
	public void agregarUsuarioEspecialPrincipal(){
		try{
			if(listaUsuariosEspecialesPrincipal != null){
				for(SolicitudUsuarioCorreo suc : listaUsuariosEspecialesPrincipal){
					if(listaUsuarioCorreoagregados != null){
						listaUsuarioCorreoagregados.add(suc);	
					}else{
						listaUsuarioCorreoagregados = new ArrayList<SolicitudUsuarioCorreo>(0);
						listaUsuarioCorreoagregados.add(suc);
					}
				}
			}
		}catch (Exception e) {
			log.error("Error al setear el string de nombre  y correo #0", e.getMessage());
		}
	}	
	public void eliminarUsuarioEspecial(SolicitudUsuarioCorreo suc){
		try{
			if(suc != null){
				listaUsuariosEspeciales.remove(suc);
			}
		}catch (Exception e) {
			log.error("Error,  al sacar de la lista al usuario especial #0", e.getMessage());
		}
	}
	public void eliminarUsuarioEspecialPrincipal(SolicitudUsuarioCorreo suc){
		try{
			if(suc != null){
				listaUsuariosEspecialesPrincipal.remove(suc);
			}
		}catch (Exception e) {
			log.error("Error,  al sacar de la lista al usuario especial #0", e.getMessage());
		}
	}
	public boolean validarEmail(String email) {
		String regex = "^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$";
		Pattern pattern = Pattern.compile(regex);
		Matcher matcher = pattern.matcher(email);
		return matcher.matches();
	}
	public void limpiarFormulario(){
		this.nombreUsuario = null;
		this.correoElectronico = null;
		listaUsuariosEspeciales = new ArrayList<SolicitudUsuarioCorreo>(0);
		listaUsuariosEspecialesPrincipal = new ArrayList<SolicitudUsuarioCorreo>(0);
	}
	
	public String getNombreUsuario() {
		return nombreUsuario;
	}
	public void setNombreUsuario(String nombreUsuario) {
		this.nombreUsuario = nombreUsuario;
	}
	public String getCorreoElectronico() {
		return correoElectronico;
	}
	public void setCorreoElectronico(String correoElectronico) {
		this.correoElectronico = correoElectronico;
	}

	/*
 	* es una cadena o frase de palabras donde todoas las palabras que contengan mas 1 caracter la primera 
 	* la de en maytusculas y las demas en minusculas.
    */
	public String modificarTexto(String cadenaAux){
		StringBuffer cadenaBuffer = new StringBuffer();
		try{
			if(cadenaAux != null){
				
				String[] splitRazonSocial = cadenaAux.split(" ");
				for(String cadena : splitRazonSocial){
					if(!"".equals(cadena)){
						if(cadena.length() > 1 && !cadena.equals("S.A.")){
							cadenaBuffer.append(capitalizarTexto(cadena));
							cadenaBuffer.append(" ");
						}else{
							cadenaBuffer.append(cadena);
							cadenaBuffer.append(" ");
						}
					}
				}
				return cadenaBuffer.toString();
			}else{
				return "";
			}
		}catch (Exception e) {
			log.error("Error al sacar las palabras del texto #0", e.getMessage());
		}
		return cadenaBuffer.toString();
	}
	
	/*
	 * se sacan os caracteres especiales antes de transformar la cadena de string
	 * **/
    public String capitalizarTexto(String textoSinFormato){
    	
        String []palabras = textoSinFormato.split("\\s+");
        StringBuilder textoFormateado = new StringBuilder();
        
        for(String palabra : palabras){
            textoFormateado.append(palabra.substring(0,1).toUpperCase()
        	    	.concat( palabra.substring(1,palabra.length())
        		.toLowerCase()).concat(" "));
        }
        
        return textoFormateado.toString();        
    }
    
    
	public void sacarPorcetajeGlobalConceptoNegocio(){
		  List<CotPedDTO>  listaPrincipal = null; //listaCotPedDTOs 
		  List<CabeceraCotPedDTO> lista = null;
		  List<DetalleCotPedDTO> listaDetalle = null;
		  Double sumaTotal = (double) 0;
		  Double suma = (double)0;
		  Double sumaConcepto = (double)0;
		  Double porcentajeNegocio = (double)0;
		  Double porcentajeMonto = (double)0;
		  Double margenConcepto = (double)0;
		 try{
			 if(listaCotPedDTOs != null){
				 listaPrincipal = new ArrayList<CotPedDTO>(0);
				for(CotPedDTO pc : listaCotPedDTOs){
					if(pc != null){
						 lista = new ArrayList<CabeceraCotPedDTO>(0);
						 for(CabeceraCotPedDTO o :pc.getListaCabeceraCotPeds()){
								 listaDetalle = new ArrayList<DetalleCotPedDTO>(0);
								 if(o.getListaDetalle() != null){
									for(DetalleCotPedDTO obj : o.getListaDetalle()){
										if(obj.getListaDetalleCp() != null){
											log.debug("monto general pedido  :"+ pc.getMontoTotal());
											log.debug("getPorcePorConcepto  :"+ obj.getPorcePorConcepto());
											log.debug("getMonto  :"+ obj.getMonto());
											/*calculo de porcentaje de articulos*/
											Double sumaDetalle = (double)0;
											for(DetalleCp dcp :  obj.getListaDetalleCp()){
												double calculoNew = ((dcp.getMargen() / 100) * ( dcp.getMargProdProc() / 100));
												log.debug("calculoNew : #0", calculoNew);
												sumaDetalle += calculoNew;
											}
											
											sumaDetalle = sumaDetalle * 100;
											log.debug("sumaDetalle : #0", sumaDetalle);
											
											porcentajeMonto = ((obj.getMonto().doubleValue() * 100)/obj.getMonto());
											obj.setPorceDelTotal(porcentajeMonto);
											sumaTotal += obj.getMonto().doubleValue(); 
											log.debug("porcentaje Monto : "+ porcentajeMonto);
											log.debug("(obj.getPorcePorConcepto() / 100):"+ (obj.getPorcePorConcepto() / 100));
											log.debug("(porcentajeMonto / 100):"+ (porcentajeMonto / 100));
											suma += ((obj.getPorcePorConcepto() / 100) * (porcentajeMonto / 100));
											sumaConcepto = ((obj.getPorcePorConcepto() / 100) * (porcentajeMonto / 100));
											log.debug("suma negocio:"+ suma);
											margenConcepto = (sumaConcepto * 100);
											log.debug("margen de concepto : "+ margenConcepto);
											obj.setMargenConcepto(margenConcepto);
											margenConcepto = (double)0;
										}
										listaDetalle.add(obj);
									}
									porcentajeNegocio = (suma * 100);
									log.debug("margen de suma de negocio : "+ porcentajeNegocio);
									o.setPorcentaje(porcentajeNegocio);
									o.setMontoGeneral(sumaTotal.longValue());
									suma = (double)0;
									sumaTotal  = (double)0;
								 }
								 o.setListaDetalle(listaDetalle);
								 lista.add(o);
						  }
					}
					listaPrincipal.add(pc);
				} 

				if(listaCotPedDTOs != null){
					 listaCotPedDTOs.clear();
					 setListaCotPedDTOs(listaPrincipal);
				 }else{
					 setListaCotPedDTOs(listaPrincipal);
				 }
			 }
		 }catch (Exception e) {
			log.error("error al insertar la lista de detalle a la lista de cabecera #0", e.getMessage());
		}
	  }
	public void sacarPorcetajeGlobal(){
	  List<CotPedDTO>  listaPrincipal = null; //listaCotPedDTOs 
		  List<CabeceraCotPedDTO> lista = null;
		  List<DetalleCotPedDTO> listaDetalle = null;
		  Double suma = (double)0;
		  Double porcentajeNegocio = (double)0;
		  Double porcentajeMonto = (double)0;
		  porcentajeGlobal = (double)0;
		  Double sumaPorcentajeGeneralNegocio = (double)0;
		 try{
			 if(listaCotPedDTOs != null){
				 listaPrincipal = new ArrayList<CotPedDTO>(0);
				for(CotPedDTO pc : listaCotPedDTOs){
					if(pc != null){
						 lista = new ArrayList<CabeceraCotPedDTO>(0);
						 for(CabeceraCotPedDTO o :pc.getListaCabeceraCotPeds()){
								 listaDetalle = new ArrayList<DetalleCotPedDTO>(0);
								 if(o.getListaDetalle() != null && o.getListaDetalle().size() == 1){
									for(DetalleCotPedDTO obj : o.getListaDetalle()){
										if(obj.getListaDetalleCp() != null){
											log.debug("monto general negocio  :"+ o.getMontoGeneral());
											log.debug("monto general del concepto  :"+ obj.getMonto());
											log.debug("getMargenConcepto  :"+ obj.getMargenConcepto());
											porcentajeMonto = ((obj.getMonto().doubleValue() * 100)/o.getMontoGeneral());
											log.debug("porcentaje Monto : "+ porcentajeMonto);
											log.debug("(obj.getMargenConcepto() / 100):"+ (obj.getMargenConcepto() / 100));
											log.debug("(porcentajeMonto / 100):"+ (porcentajeMonto / 100));
											log.debug(" ((obj.getMargenConcepto() / 100) * (porcentajeMonto / 100)):"+  ((obj.getMargenConcepto() / 100) * (porcentajeMonto / 100)));
											suma += ((obj.getMargenConcepto() / 100) * (porcentajeMonto / 100));
											
										}
										listaDetalle.add(obj);
									}
									porcentajeNegocio = (suma * 100);
									log.debug("margen de global (porcentajeNegocio): "+ porcentajeNegocio);
									Double representacion = (o.getMontoGeneral().doubleValue() *100)/pc.getMontoTotal();
									log.debug(" representacion :"+ representacion);
									o.setRepresentacion(representacion);
									o.setPorcentaje(porcentajeNegocio);
									sumaPorcentajeGeneralNegocio += porcentajeNegocio;
									suma = (double)0;
								 }else{
									Double sumaMontodeConceptosGenerales = (double)0;
									for(DetalleCotPedDTO obj : o.getListaDetalle()){
										if(obj.getListaDetalleCp() != null){
											log.debug("monto general negocio  :"+ o.getMontoGeneral());
											log.debug("monto general del concepto  :"+ obj.getMonto());
											log.debug("getMargenConcepto  :"+ obj.getMargenConcepto());
											porcentajeMonto = ((obj.getMonto().doubleValue() * 100)/o.getMontoGeneral());
											log.debug("porcentaje Monto : "+ porcentajeMonto);
											log.debug("(obj.getMargenConcepto() / 100):"+ (obj.getMargenConcepto() / 100));
											log.debug("(porcentajeMonto / 100):"+ (porcentajeMonto / 100));
											suma += ((obj.getMargenConcepto() / 100) * (porcentajeMonto / 100));
											sumaMontodeConceptosGenerales +=obj.getMonto();
										}
										listaDetalle.add(obj);
									}
									porcentajeNegocio = (suma * 100);
									log.debug("margen de global (porcentajeNegocio): "+ porcentajeNegocio);
									Double representacion = (sumaMontodeConceptosGenerales *100)/pc.getMontoTotal();
									log.debug(" representacion :"+ representacion);
									o.setRepresentacion(representacion);
									o.setPorcentaje(porcentajeNegocio);
									sumaPorcentajeGeneralNegocio += porcentajeNegocio;
									suma = (double)0;								 
								 }
								 
								 o.setListaDetalle(listaDetalle);
								 lista.add(o);
						  }
						 
						 
						 pc.setMargenGlobal(sumaPorcentajeGeneralNegocio);
						 sumaPorcentajeGeneralNegocio = (double)0;
						 
					}
					listaPrincipal.add(pc);
				} 

				if(listaCotPedDTOs != null){
					 listaCotPedDTOs.clear();
					 setListaCotPedDTOs(listaPrincipal);
				 }else{
					 setListaCotPedDTOs(listaPrincipal);
				 }
			 }
		 }catch (Exception e) {
			log.error("error al insertar la lista de detalle a la lista de cabecera #0", e.getMessage());
		}
	  }
	public void sacarPorcetajeCotizacionToPedido(){
		  List<CotPedDTO>  listaPrincipal = null; //listaCotPedDTOs 
		  Double porcentajeCotizacion = (double)0;
		  Double resultadoFinal = (double)0;
		  Double multiplicacion = (double)0;
		  try{
			 if(listaCotPedDTOs != null){
				 listaPrincipal = new ArrayList<CotPedDTO>(0);
				for(CotPedDTO pc : listaCotPedDTOs){
					if(pc != null){
						if(pc.getListaCabeceraCotPeds() != null && pc.getListaCabeceraCotPeds().size() == 1){
							CabeceraCotPedDTO negocio = null;
							porcentajeCotizacion =((pc.getMontoTotal().doubleValue() * 100)/pc.getMontoTotal());
							log.debug("porcentaje Cotizacion 1 :" + porcentajeCotizacion);
							
							negocio = pc.getListaCabeceraCotPeds().get(0);
							if(negocio != null){
								multiplicacion = (porcentajeCotizacion * (negocio.getPorcentaje()/100)); 
								log.debug("multiplicacion de porcentaje del pedido * el porcentaje del negocio :"+ multiplicacion);
								pc.setMargenGlobal(multiplicacion);
								pc.setPonderacion(multiplicacion);
							}else{
								pc.setMargenGlobal(porcentajeCotizacion);
								pc.setPonderacion(porcentajeCotizacion);
							}
						}else{
							for(CabeceraCotPedDTO obj : pc.getListaCabeceraCotPeds()){
								porcentajeCotizacion =((obj.getMontoGeneral().doubleValue() * 100)/pc.getMontoTotal());
								log.debug("porcentaje Cotizacion 2 :" + porcentajeCotizacion);
								log.debug("negocio.getPorcentaje() : "+ obj.getPorcentaje());
								resultadoFinal += (porcentajeCotizacion / 100) * (obj.getPorcentaje()/ 100);
							}
							if(resultadoFinal != 0){
								multiplicacion = (resultadoFinal*100); 
								log.debug("multiplicacion de porcentaje del pedido * el porcentaje del negocio :"+ multiplicacion);
								pc.setMargenGlobal(multiplicacion);	
								
								
								
							}else{
								pc.setMargenGlobal(porcentajeCotizacion);
								pc.setPonderacion(multiplicacion);
							}
						}
					}
					listaPrincipal.add(pc);
					porcentajeCotizacion = (double)0;
					resultadoFinal = (double)0;
					multiplicacion = (double)0;
				} 
				
				
				
				
				if(listaCotPedDTOs != null){
					 listaCotPedDTOs.clear();
					 setListaCotPedDTOs(listaPrincipal);
				 }else{
					 setListaCotPedDTOs(listaPrincipal);
				 }
			 }
		 }catch (Exception e) {
			log.error("error al insertar la lista de detalle a la lista de cabecera #0", e.getMessage());
		}
	  }
	public void sacarPorcetajePedidoGlobal(){
		  List<CotPedDTO>  listaPrincipal = null; //listaCotPedDTOs 
		  Double porcentajeCotizacion = (double)0;
		  Double multiplicacion = (double)0;
		  porcentajeGlobal = (double)0;
		  try{
			 if(listaCotPedDTOs != null && montoTotal != null && montoTotal.longValue() > 0){
				 listaPrincipal = new ArrayList<CotPedDTO>(0);
				for(CotPedDTO pc : listaCotPedDTOs){
					if(pc != null){
						 porcentajeCotizacion =((pc.getMontoTotal().doubleValue() * 100)/montoTotal);
						 log.debug("porcentaje pedido o cotizacion :" + porcentajeCotizacion);
						 multiplicacion = (porcentajeCotizacion * (pc.getMargenGlobal()/100));
						 log.debug("multiplicacion :" + multiplicacion);
						 porcentajeGlobal += multiplicacion;
						 pc.setPonderacion(multiplicacion);
					}
					
					listaPrincipal.add(pc);
					porcentajeCotizacion = (double)0;
					multiplicacion = (double)0;
				} 
				if(listaCotPedDTOs != null){
					 listaCotPedDTOs.clear();
					 setListaCotPedDTOs(listaPrincipal);
				 }else{
					 setListaCotPedDTOs(listaPrincipal);
				 }
			 }
		 }catch (Exception e) {
			log.error("error al insertar la lista de detalle a la lista de cabecera #0", e.getMessage());
		}
	  }	
	public void insertMontosEnListaConceptosMontos(){
		List<ConceptoMontoDTO> listaFinal = new ArrayList<ConceptoMontoDTO>(0);
		Long monto = new Long(0);
		this.montoGeneralConceptoMonto = 0;
		try{
			if(listaConceptosMontos != null){
				for(ConceptoMontoDTO cmd : listaConceptosMontos){
					cmd.setMonto(0);
					if(listaCotPedDTOs != null){
						for(CotPedDTO pc : listaCotPedDTOs){
							if(pc != null){
								 for(CabeceraCotPedDTO o :pc.getListaCabeceraCotPeds()){
									 if(o != null && o.getListaDetalle() != null){
										 for(DetalleCotPedDTO  dp :o.getListaDetalle()){
											 if((dp.getNegocio().getConcepto().trim()).equals(cmd.getConcepto().trim())){
												 monto+=dp.getMonto(); 
											 }											 
										 }
									 }
								 }
							}	 
						}
					 }
					if(monto != null && monto.longValue() > 0){
						cmd.setMarca("X");
						cmd.setMonto(monto);
						this.montoGeneralConceptoMonto +=monto;
						monto = new Long(0);
					}
					listaFinal.add(cmd);
				}
				this.setListaConceptosMontos(listaFinal);
			}
		}catch (Exception e) {
			log.error("Error al colcar lo montos dentro de la grilla ", e.getMessage());
		}
	}
	public void sacarLogSolicitudPagina() {
		try {
			if (this.solicitudLogHitos != null) {
				this.setEstadoLogHitos(scoringService.obtenerEstado(this.solicitudLogHitos.getEstado()));
				List<SolicitudLogs> listaSolicitudesLogs = scoringService.getSolicitudLogs(solicitudLogHitos.getId().getNumSolicitud());
				if (listaSolicitudesLogs != null) {
					this.setListaLogs(listaSolicitudesLogs);
				}
			}
		} catch (Exception e) {
			log.error("Error, al desplegar los datos de la solicitud", e.getMessage());
		}

	}
	public void sacarLogHitosPagina() {
		try {
			if (this.solicitudLogHitos != null) {
				this.setEstadoLogHitos(scoringService.obtenerEstado(this.solicitudLogHitos.getEstado()));
				List<SolicitudHitos> listaSolicitudesHitos = scoringService
						.getSolicitudHitos(solicitudLogHitos.getId().getNumSolicitud());
				if (listaSolicitudesHitos != null) {
					this.setListaHitos(listaSolicitudesHitos);
					
				}
				List<SolicitudUsuarioDerivada> listaDerivadas = scoringService.getSolicitudUsuarioDerivacionForSolicitud(solicitudLogHitos.getId().getNumSolicitud());
				if(listaDerivadas != null && listaDerivadas.size() > 0){
					this.setListUsuariosDerivados(listaDerivadas);
				}
			}

		} catch (Exception e) {
			log.error("Error, al desplegar los datos de la solicitud", e.getMessage());
		}
	}
	public void limpiarHitos(){
		this.listaHitos = null;
		this.listaLogs = null;
		this.listUsuariosDerivados = null;
	}
	public void sacarLogHitosSolicitudUsuarioDerivada(SolicitudHitos sol) {
		int contadorNoConfirmados= 0;
		List<SolicitudUsuarioDerivada> listaFinal = null;
		try {
			if (sol != null) {
				this.setSolicitudHitos(sol);
				List<SolicitudUsuarioDerivada> listaDerivadas = scoringService
						.getSolicitudUsuarioDerivacionForSolicitudEstado(sol.getIdSolicitud(), sol.getCodEstadoDerivada());
				if(listaDerivadas != null && listaDerivadas.size() > 0){
					listaFinal =  new ArrayList<SolicitudUsuarioDerivada>();
					for(SolicitudUsuarioDerivada sud : listaDerivadas){
						if(sud.getEstado() != null){
							if("AP".equals(sud.getEstado().getCodEstado())){
								sud.setApruebaRechazo("Aprobar");
							}else if("RP".equals(sud.getEstado().getCodEstado())){
								sud.setApruebaRechazo("Rechazar");
							}
						}else{
							sud.setApruebaRechazo(null);
						}
						listaFinal.add(sud);
						if(sud.getUsernameAutorizacion() == null){
							contadorNoConfirmados++;
						}
						
					}	
					
					if(listaFinal != null && listaFinal.size()>0){
						globalHitosLogdService.setListUsuariosDerivados(listaFinal);
						this.setListUsuariosDerivados(listaFinal);
					}else{
						globalHitosLogdService.setListUsuariosDerivados(null);
						this.setListUsuariosDerivados(null);
					}
					 /*habilita el boton si hay algun usuario no confirmado sea obligatorio y no obligatorio.*/
					if(contadorNoConfirmados == 0){
						this.habilitaBotonApruebaToRechazarAdmin = true;
					}else{
						this.habilitaBotonApruebaToRechazarAdmin = false;
					}
				}else{
					this.habilitaBotonApruebaToRechazarAdmin = true;
				}
			}

		} catch (Exception e) {
			log.error("Error, al desplegar los datos de la solicitud", e.getMessage());
		}

	}
	public void verificarFechaVencimientoNuevoMayorFechaActual(DocumentoProrrogaDTO objeto){
		boolean valido = false;
		List<DocumentoProrrogaDTO> listaNuevaDctoAgregadosNuevos = new ArrayList<DocumentoProrrogaDTO>(0);
		Calendar calActual = Calendar.getInstance();
		Calendar calNueva = Calendar.getInstance();
		SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
		if(objeto != null){
			log.debug("numero documento #0", objeto.getNumeroDocto());
			log.debug("fecha vencimiento actual  de  #0", format.format(objeto.getFechaVencActual()));
			log.debug("fecha vencimiento nuevo  de  #0",format.format(objeto.getFechaVencNuevo()));
			
			calActual.setTime(objeto.getFechaVencActual());
			long actual = calActual.getTimeInMillis();
			
			calNueva.setTime(objeto.getFechaVencNuevo());
			long nuevo = calNueva.getTimeInMillis();
			
			if(actual > nuevo){
				valido = true;
			}
			
			
			for(DocumentoProrrogaDTO dto: listaDoctoProrrogaAgregados){
				if(dto != null && dto.getNumeroDocto().equals(objeto.getNumeroDocto()) && valido==true){
					objeto.setFechaVencNuevo(null);
					listaNuevaDctoAgregadosNuevos.add(objeto);
					this.mensajeGlogal ="la fecha nueva  de prorroga tiene que ser mayor que la fecha actual.";
				}else{
					this.modificarProrroga = true;
					listaNuevaDctoAgregadosNuevos.add(dto);
				}
			}
			listaDoctoProrrogaAgregados.clear();
			setListaDoctoProrrogaAgregados(listaNuevaDctoAgregadosNuevos);

		}
		calActual=null;
		calNueva=null;
	}
	
	public Date DeStringADate(String fecha){
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
        String strFecha = fecha;
        Date fechaDate = null;
        try {
            fechaDate = formato.parse(strFecha);
                        log.debug(fechaDate.toString());
            return fechaDate;
        } catch (ParseException ex) {
            ex.printStackTrace();
            return fechaDate;
        }
    }
	public void limpiarAprobadoresAndUsuarioRechazos(){
		this.solicitudAntiguaDTO = null;
	}
	
	/*metodos de derivadas*/
	public void ingresoAprobarDerivada(){
		if(this.solicitud != null && this.tipoSolicitudAux != null){
			log.debug("solicitud #0 tipo de solicitud #1", solicitud.getId().getNumSolicitud(), tipoSolicitudAux.getCodTipoSolicitud());
			if(solicitud != null){
				if(solicitud.getEstado().equals("P") || solicitud.getEstado().equals("A") || solicitud.getEstado().equals("R")){
					this.mensajeGlogal = "La solicitud esta procesada y/o aprobada.";
					return;
				}else if(solicitud.getEstado().equals("B")){
					this.mensajeGlogal = "Solicitud debe estar en an√°lisis.";
					return;
				}else{
					this.mensajeGlogal = null;
				}
			}
			
			
			if(this.listaUsuarioCorreoagregados ==null){
				this.mensajeGlogal = "Debe ingresar los usuarios para el envio de correo.";
				return;
			}else{
				if(this.listaUsuarioCorreoagregados.size() == 0 ){
					this.mensajeGlogal = "Debe ingresar los usuarios para el envio de correo.";
					return ;
				}
			}
			
			if(this.observacionesFinales == null){
				this.mensajeGlogal = "Debe ingresar Observaciones finales.";
				return;				
			}else{
				if("".equals(this.observacionesFinales)){
					this.mensajeGlogal = "Debe ingresar Observaciones finales.";
					return;				
					
				}
			}
			
			
			
		
			this.mensajeGlogal = null;
		}else{
			this.mensajeGlogal = "La solicitud no tiene asociada el tipo de solicitud...";
		}
	}	
	public String aprobarSolicitudesDerivada(){
		try{
			LcredEstado estado = scoringService.obtenerEstado("AP");
			boolean exitoSud = false;
			int cantidad = 0;
			int aprobado = 0;
			int rechazado= 0;
			int verificadosObligados = 0;
			int cantVeriObligadosAprobado = 0;
			int cantVeriObligadosRechazado = 0;
			boolean cambioEstadosolicitud = false;
			
			if(this.paginaIngreso == 11 || this.paginaIngreso == 12){
				if(solicitud != null && venta != null && usuarioLogueado != null){
					SolicitudUsuarioDerivada sud =  scoringService.
							getSolicitudUsuarioDerivacionForSolicitudIpPersonal(solicitud.getId().getNumSolicitud(),
									usuarioLogueado.getIdPersonal());
					if(sud != null){
						sud.setConfirmacion(true);
						sud.setEstado(estado);
						sud.setUsernameAutorizacion(usuarioLogueado.getAlias());
						exitoSud = scoringService.mergerSolicitudUsuarioDerivacion(sud);
						log.debug(exitoSud);
					}
					
					List<SolicitudUsuarioDerivada> listaVerificacion = scoringService
							.getSolicitudUsuarioDerivacionForSolicitudEstado(solicitud.getId().getNumSolicitud(),solicitud.getEstadoEvaluacion());
					if(listaVerificacion != null){
						cantidad = listaVerificacion.size();
						/*verificar cantidad de usuarios obligatorios debe aprobar*/
						for(SolicitudUsuarioDerivada sudAux : listaVerificacion){
							if(sudAux.getConfirmacionObligatoria() == true){
								verificadosObligados++;
							}
						}
						
						
						/*verificar la cantidad de aprobados, rechazados, la cantidad de usuarios*/
						for(SolicitudUsuarioDerivada sudAux2 : listaVerificacion){
							if(sudAux2.getEstado().getCodEstado().equals("AP")){
								aprobado++;
								if(sudAux2.getConfirmacion()){
									if(sudAux2.getConfirmacionObligatoria()){
										cantVeriObligadosAprobado++;
									}
								}
							}else if(sudAux2.getEstado().getCodEstado().equals("RP")){
								rechazado++;
								if(sudAux2.getConfirmacion()){
									if(sudAux2.getConfirmacionObligatoria()){
										cantVeriObligadosRechazado++;
									}
								}								
							}
						}
					}
					
					if(verificadosObligados == (cantVeriObligadosAprobado + cantVeriObligadosRechazado)){
						cambioEstadosolicitud = true;
					}
					if(cambioEstadosolicitud == true  && !solicitud.getEstado().equals("DR")){/*cambio de estado de la solicitud */
						solicitud.setEstado("DR");
						solicitud.setAnalizar(true);
						venta.setStatusSolicitud("DR");
						boolean exitoUno = scoringService.mergerSolicitud(solicitud);
						boolean exitoDos = scoringService.mergerSolicitudVentaPuntual(venta);
						entityManager.refresh(solicitud);
						entityManager.refresh(venta);
						if(exitoUno == true && exitoDos == true){
							if(solicitud.getEstadoEvaluacion() != null && solicitud.getEstadoEvaluacion().equals("B")){
								this.mensajeGlogal = "La solicitud "+ solicitud.getId().getNumSolicitud() +" fue analizada por "+ modificarTexto(usuarioLogueado.getNombre())+".";
							}else{
								this.mensajeGlogal = "La solicitud "+ solicitud.getId().getNumSolicitud() +" fue aprobada por "+ modificarTexto(usuarioLogueado.getNombre())+".";
								
							}
							/*se agrega la observaciones final de una aprobacion final */
							LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
							Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
							if(correlativo != null){
								id.setCorrelativo(correlativo);
								id.setFecha(new Date());
								id.setHora(new Date());
								id.setNumSolicitud(solicitud.getId().getNumSolicitud());
								id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
								id.setObservacion(this.observacionesFinales);
								id.setUsuario(usuarioSegur.getAlias());
								LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
								obser.setId(id);
								scoringService.persistSolicitudObservaciones(obser);
								insertarLogs(solicitud, 5);
							}
							
							
							List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
							if(listaFileUploadedDTOs != null){
								for(FileUploadedDTO archivo :listaFileUploadedDTOs){
								   try {							
										OutputStream ostream = null;
										String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
										nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);
										String url = "archivos"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
										
										
										//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
										ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
										log.debug("url #0",archivo.getUploadItem().getContentType());
										IOUtils.copyStream(ostream, istream);
										ostream.flush();
										ostream.close();
										istream.close();
										//guardar datos en la BD
										ArchivoAdjunto archivoAux = new ArchivoAdjunto();
										archivoAux.setSolicitud(solicitud);
										archivoAux.setUrl(url);
										archivoAux.setUbicacion("");
										archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
										archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
										archivoAux.setUsuario(usuarioLogueado);
										archivoAux.setFechaCreacion(new Date());
										entityManager.persist(archivoAux);
										entityManager.flush();
										
										entityManager.remove(archivo.getArchivo());
										entityManager.flush();
										
										
										
										ConceptoDTO objetoAux = new ConceptoDTO();
										objetoAux.setNombreArchivo(nombreArchivo);
										objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
										listaArchivoGuardadoResp.add(objetoAux);
										objetoAux = null;
										
									} catch (FileNotFoundException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}
									catch (IOException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}catch (Exception e) {
										e.printStackTrace();
									}							
								}		
							}							
							
							
							
							
							List<ConceptoDTO> lista = scoringService.getConceptoMonto(solicitud.getId().getNumSolicitud());
							List<ConceptoDTO> listaProducto = scoringService.getProductos(solicitud.getId().getNumSolicitud());
							List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
							
							if(listaUsuarioCorreoagregados != null){
								Locale locale = new Locale("es","CL");
								/*setando los varlores del dto para el correo*/
								ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
								
								if(solicitud.getEstadoEvaluacion() != null && solicitud.getEstadoEvaluacion().equals("B")){
									contenidoEmail.setTituloRespuesta("An√°lisis individual solicitud");
								}else{
									contenidoEmail.setTituloRespuesta("Aprobaci√≥n individual solicitud");
									contenidoEmail.setDesicionEjecutivo("Aprobada");
								}
								
								contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
								contenidoEmail.setColor("VERDE");
								contenidoEmail.setAccion("Se Aprob√≥ la Solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
								contenidoEmail.setAccionRespuesta("");
								contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
								contenidoEmail.setObservacionRespuesta(this.observacionesFinales);
								contenidoEmail.setObservacionEjecutivo(null);
								contenidoEmail.setOpcionFinal(2);	
								contenidoEmail.setSolicitud(solicitud);
								NumberFormat numberFormatter;
								StringBuffer rutNombre = new StringBuffer();
								rutNombre.append(cliente.getRut());
								rutNombre.append(" / ");
								rutNombre.append(modificarTexto(cliente.getRazonSocial()));
								contenidoEmail.setRutNombre(rutNombre.toString());
								contenidoEmail.setSoloNombre(cliente.getRazonSocial());
								contenidoEmail.setCanalVenta(cliente.getCanalVenta());
								contenidoEmail.setSucursal(sucursal.getDescripcion());
								UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
								if(ususarioEmisor != null){
									contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
								}else{
									contenidoEmail.setEmisor(solicitud.getCodEmisor());
								}
								
								
								contenidoEmail.setTipoSolicitud("Venta Puntual");
								contenidoEmail.setTipoVentas(modificarTexto(tipoSolicitudAux.getDesTipoSolicitud()));
								
								numberFormatter = NumberFormat.getNumberInstance(locale);
								log.debug(numberFormatter.format(venta.getMontoInicial()));
								
								contenidoEmail.setMontoMasIva(numberFormatter.format(venta.getMontoInicial()));
								contenidoEmail.setMontoPie(numberFormatter.format(venta.getMontoPieInicial()));
								contenidoEmail.setMargenNegocio(String.valueOf(numberFormatter.format(this.margenGlogal)));
								contenidoEmail.setFormaPago(this.formaPago);
								contenidoEmail.setMotivoCompra(modificarTexto(this.motivoCompra));
								contenidoEmail.setMontoMasIvaAprobado(numberFormatter.format(this.montoNuevo));
								contenidoEmail.setMontoPieAprobado(numberFormatter.format(this.pieNuevo));	
								

								if("VIG".equals(cliente.getVigenciaSeguro().trim())){
									contenidoEmail.setLineaSeguro(numberFormatter.format(cliente.getMontoSeguro()));
								}else{
									contenidoEmail.setLineaSeguro(numberFormatter.format(0));
								}								
								contenidoEmail.setCoberturaSeguro(numberFormatter.format(expoRiesgoKh.getMontoAsegurado()));
								contenidoEmail.setPeakCredito(numberFormatter.format(expoRiesgoKh.getPeakCredito()));
								contenidoEmail.setRisgoKupfer(numberFormatter.format(expoRiesgoKh.getMontoRiesgoKupfer()));
								contenidoEmail.setListaProductos(listaProducto);
								contenidoEmail.setListaConceptoMontos(lista);
								contenidoEmail.setListaArchivos(listaArchivoGuardado);
								contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
								contenidoEmail.setListaObservaciones(listaObservaciones);
								
								List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
								if(listaUsuarioCorreoagregados != null){
									for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
										if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !((ucdto.getUsername().trim()).toLowerCase()).equals(solicitud.getCodEmisor().trim().toLowerCase())){
											log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
												if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
													ultimaListaCorreoPrueba.add(usuarioAux);	
													usuarioAux = new Usuariosegur();
												}													
											}
										}
									}
								}
								/*eliminar esto, cuando se establaque la solucion*/
								Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
								if(emisorCorreo != null){
									if(!ultimaListaCorreoPrueba.contains(emisorCorreo)){
										ultimaListaCorreoPrueba.add(emisorCorreo);
									}
									emisorCorreo = null;
								}
								Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
								if(correoAdministrador != null){
									ultimaListaCorreoPrueba.add(correoAdministrador);
									correoAdministrador = null;
								}								
								contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);										
								try{
									if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
										emailAlerta.enviarRespuestaSolicitudVenta(contenidoEmail);	
									}	
								}catch (Exception e) {
									log.debug("paso por el error #0"+ e.getMessage());
								}
							}
							
							insertarLogs(solicitud, 8);
							if(this.estadoSolicitudAnalisisAprobacion != null && this.estadoSolicitudAnalisisAprobacion.equals("B")){
								LcredEstado e = scoringService.obtenerEstado("AD");
								insertHitos(solicitud, e, "NADA", 0);
							}else if(this.estadoSolicitudAnalisisAprobacion != null  && this.estadoSolicitudAnalisisAprobacion.equals("SA")){
								insertHitos(solicitud, estado, "NADA", 0);
							}else{
								insertHitos(solicitud, estado, "NADA", 0);
							}
							
							
							entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
							             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
							entityManager.flush();
						}
						
					}else{/*solo envio de correo de la aprobacion del usuario que acaba de aprobar*/

						if(solicitud.getEstadoEvaluacion() != null && solicitud.getEstadoEvaluacion().equals("B")){
							this.mensajeGlogal = "La solicitud "+ solicitud.getId().getNumSolicitud() +" fue analizada por "+ modificarTexto(usuarioLogueado.getNombre())+".";
						}else{
							this.mensajeGlogal = "La solicitud "+ solicitud.getId().getNumSolicitud() +" fue aprobada por "+ modificarTexto(usuarioLogueado.getNombre())+".";
							
						}
						/*se agrega la observaciones final de una aprobacion final */
						LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
						Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							id.setCorrelativo(correlativo);
							id.setFecha(new Date());
							id.setHora(new Date());
							id.setNumSolicitud(solicitud.getId().getNumSolicitud());
							id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							id.setObservacion(this.observacionesFinales);
							id.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(id);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}
						
						List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
						if(listaFileUploadedDTOs != null){
							for(FileUploadedDTO archivo :listaFileUploadedDTOs){
							   try {							
									OutputStream ostream = null;
									String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
									nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);
									String url = "archivos"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
									
									
									//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
									ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
									log.debug("url #0",archivo.getUploadItem().getContentType());
									IOUtils.copyStream(ostream, istream);
									ostream.flush();
									ostream.close();
									istream.close();
									//guardar datos en la BD
									ArchivoAdjunto archivoAux = new ArchivoAdjunto();
									archivoAux.setSolicitud(solicitud);
									archivoAux.setUrl(url);
									archivoAux.setUbicacion("");
									archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
									archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
									archivoAux.setUsuario(usuarioLogueado);
									archivoAux.setFechaCreacion(new Date());
									entityManager.persist(archivoAux);
									entityManager.flush();
									
									entityManager.remove(archivo.getArchivo());
									entityManager.flush();
									
									
									
									ConceptoDTO objetoAux = new ConceptoDTO();
									objetoAux.setNombreArchivo(nombreArchivo);
									objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
									listaArchivoGuardadoResp.add(objetoAux);
									objetoAux = null;
									
								} catch (FileNotFoundException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}
								catch (IOException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}catch (Exception e) {
									e.printStackTrace();
								}							
							}		
						}							
	
						
						List<ConceptoDTO> lista = scoringService.getConceptoMonto(solicitud.getId().getNumSolicitud());
						List<ConceptoDTO> listaProducto = scoringService.getProductos(solicitud.getId().getNumSolicitud());
						List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
						if(listaUsuarioCorreoagregados != null){
							Locale locale = new Locale("es","CL");
							/*setando los varlores del dto para el correo*/
							ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
							if(solicitud.getEstadoEvaluacion() != null && solicitud.getEstadoEvaluacion().equals("B")){
								contenidoEmail.setTituloRespuesta("An√°lisis individual solicitud");
							}else{
								contenidoEmail.setTituloRespuesta("Aprobaci√≥n individual solicitud");
								contenidoEmail.setDesicionEjecutivo("Aprobada");
							}
							contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
							contenidoEmail.setColor("VERDE");
							contenidoEmail.setAccion("Se Aprob√≥ la Solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
							contenidoEmail.setAccionRespuesta("");
							contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
							contenidoEmail.setObservacionRespuesta(this.observacionesFinales);
							contenidoEmail.setObservacionEjecutivo(null);
							contenidoEmail.setOpcionFinal(2);	
							contenidoEmail.setSolicitud(solicitud);
							NumberFormat numberFormatter;
							StringBuffer rutNombre = new StringBuffer();
							rutNombre.append(cliente.getRut());
							rutNombre.append(" / ");
							rutNombre.append(modificarTexto(cliente.getRazonSocial()));
							contenidoEmail.setRutNombre(rutNombre.toString());
							contenidoEmail.setSoloNombre(cliente.getRazonSocial());
							contenidoEmail.setCanalVenta(cliente.getCanalVenta());
							contenidoEmail.setSucursal(sucursal.getDescripcion());
							
							UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
							if(ususarioEmisor != null){
								contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
							}else{
								contenidoEmail.setEmisor(solicitud.getCodEmisor());
							}
							
							contenidoEmail.setTipoSolicitud("Venta Puntual");
							contenidoEmail.setTipoVentas(modificarTexto(tipoSolicitudAux.getDesTipoSolicitud()));
							
							numberFormatter = NumberFormat.getNumberInstance(locale);
							log.debug(numberFormatter.format(venta.getMontoInicial()));
							
							contenidoEmail.setMontoMasIva(numberFormatter.format(venta.getMontoInicial()));
							contenidoEmail.setMontoPie(numberFormatter.format(venta.getMontoPieInicial()));
							contenidoEmail.setMargenNegocio(String.valueOf(numberFormatter.format(this.margenGlogal)));
							contenidoEmail.setFormaPago(this.formaPago);
							contenidoEmail.setMotivoCompra(modificarTexto(this.motivoCompra));
							contenidoEmail.setMontoMasIvaAprobado(numberFormatter.format(this.montoNuevo));
							contenidoEmail.setMontoPieAprobado(numberFormatter.format(this.pieNuevo));	
							

							if("VIG".equals(cliente.getVigenciaSeguro().trim())){
								contenidoEmail.setLineaSeguro(numberFormatter.format(cliente.getMontoSeguro()));
							}else{
								contenidoEmail.setLineaSeguro(numberFormatter.format(0));
							}								
							contenidoEmail.setCoberturaSeguro(numberFormatter.format(expoRiesgoKh.getMontoAsegurado()));
							contenidoEmail.setPeakCredito(numberFormatter.format(expoRiesgoKh.getPeakCredito()));
							contenidoEmail.setRisgoKupfer(numberFormatter.format(expoRiesgoKh.getMontoRiesgoKupfer()));
							contenidoEmail.setListaProductos(listaProducto);
							contenidoEmail.setListaConceptoMontos(lista);
							contenidoEmail.setListaArchivos(listaArchivoGuardado);
							contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
							contenidoEmail.setListaObservaciones(listaObservaciones);
							
							List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
							if(listaUsuarioCorreoagregados != null){
								for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
									if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !((ucdto.getUsername().trim()).toLowerCase()).equals(solicitud.getCodEmisor().trim().toLowerCase())){
										log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
										Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
										if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
											if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
												ultimaListaCorreoPrueba.add(usuarioAux);	
												usuarioAux = new Usuariosegur();
											}													
										}
									}
								}
							}
							/*eliminar esto, cuando se establaque la solucion*/
							Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
							if(emisorCorreo != null){
								if(!ultimaListaCorreoPrueba.contains(emisorCorreo)){
									ultimaListaCorreoPrueba.add(emisorCorreo);
								}
								emisorCorreo = null;
							}
							Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
							if(correoAdministrador != null){
								ultimaListaCorreoPrueba.add(correoAdministrador);
								correoAdministrador = null;
							}							
							contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);									
							try{
								if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
									emailAlerta.enviarRespuestaSolicitudVenta(contenidoEmail);	
								}	
							}catch (Exception e) {
								log.debug("paso por el error #0"+ e.getMessage());
							}
						}
						
						insertarLogs(solicitud, 8);
						insertHitos(solicitud, estado, "NADA", 0);
						entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
						             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
						entityManager.flush();
					}
					
					
					
				}	
			}else if(this.paginaIngreso == 21 || this.paginaIngreso == 22 || this.paginaIngreso == 23){
				if(solicitud != null && credito != null && usuarioLogueado != null){
					SolicitudUsuarioDerivada sud =  scoringService.
							getSolicitudUsuarioDerivacionForSolicitudIpPersonal(solicitud.getId().getNumSolicitud(),
									usuarioLogueado.getIdPersonal());
					if(sud != null){
						sud.setConfirmacion(true);
						sud.setEstado(estado);
						sud.setUsernameAutorizacion(usuarioLogueado.getAlias());
						exitoSud = scoringService.mergerSolicitudUsuarioDerivacion(sud);
						log.debug(exitoSud);
					}
					
					List<SolicitudUsuarioDerivada> listaVerificacion = scoringService.getSolicitudUsuarioDerivacionForSolicitudEstado(solicitud.getId().getNumSolicitud(),solicitud.getEstadoEvaluacion());
					if(listaVerificacion != null){
						cantidad = listaVerificacion.size();
						/*verificar cantidad de usuarios obligatorios debe aprobar*/
						for(SolicitudUsuarioDerivada sudAux : listaVerificacion){
							if(sudAux.getConfirmacionObligatoria() == true){
								verificadosObligados++;
							}
						}
						
						
						/*verificar la cantidad de aprobados, rechazados, la cantidad de usuarios*/
						for(SolicitudUsuarioDerivada sudAux2 : listaVerificacion){
							if(sudAux2.getEstado().getCodEstado().equals("AP")){
								aprobado++;
								if(sudAux2.getConfirmacion()){
									if(sudAux2.getConfirmacionObligatoria()){
										cantVeriObligadosAprobado++;
									}
								}
							}else if(sudAux2.getEstado().getCodEstado().equals("RP")){
								rechazado++;
								if(sudAux2.getConfirmacion()){
									if(sudAux2.getConfirmacionObligatoria()){
										cantVeriObligadosRechazado++;
									}
								}								
							}
						}
					}
					
					if(verificadosObligados == (cantVeriObligadosAprobado + cantVeriObligadosRechazado)){
						cambioEstadosolicitud = true;
					}
					if(cambioEstadosolicitud == true  && !solicitud.getEstado().equals("DR")){/*cambio de estado de la solicitud */
						
						solicitud.setEstado("DR");
						solicitud.setAnalizar(true);
						credito.setStatusSolicitud("DR");
						
						boolean exitoUno = scoringService.mergerSolicitud(solicitud);
						boolean exitoDos = scoringService.mergerSolicitudLineaCredito(credito);
						entityManager.refresh(solicitud);
						entityManager.refresh(credito);
						if(exitoUno == true && exitoDos == true){
							
							if(solicitud.getEstadoEvaluacion() != null && solicitud.getEstadoEvaluacion().equals("B")){
								this.mensajeGlogal = "La solicitud "+ solicitud.getId().getNumSolicitud() +" fue analizada por "+ modificarTexto(usuarioLogueado.getNombre())+".";
							}else{
								this.mensajeGlogal = "La solicitud "+ solicitud.getId().getNumSolicitud() +" fue aprobada por "+ modificarTexto(usuarioLogueado.getNombre())+".";
							}
							/*se agrega la observaciones final de una aprobacion final */
							LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
							Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
							if(correlativo != null){
								id.setCorrelativo(correlativo);
								id.setFecha(new Date());
								id.setHora(new Date());
								id.setNumSolicitud(solicitud.getId().getNumSolicitud());
								id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
								id.setObservacion(this.observacionesFinales);
								id.setUsuario(usuarioSegur.getAlias());
								LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
								obser.setId(id);
								scoringService.persistSolicitudObservaciones(obser);
								insertarLogs(solicitud, 5);
							}							
							List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
							if(listaFileUploadedDTOs != null){
								for(FileUploadedDTO archivo :listaFileUploadedDTOs){
								   try {							
										OutputStream ostream = null;
										String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
										nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);
										String url = "archivos"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
										
										
										//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
										ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
										log.debug("url #0",archivo.getUploadItem().getContentType());
										IOUtils.copyStream(ostream, istream);
										ostream.flush();
										ostream.close();
										istream.close();
										//guardar datos en la BD
										ArchivoAdjunto archivoAux = new ArchivoAdjunto();
										archivoAux.setSolicitud(solicitud);
										archivoAux.setUrl(url);
										archivoAux.setUbicacion("");
										archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
										archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
										archivoAux.setUsuario(usuarioLogueado);
										archivoAux.setFechaCreacion(new Date());
										entityManager.persist(archivoAux);
										entityManager.flush();
										
										entityManager.remove(archivo.getArchivo());
										entityManager.flush();
										
										
										
										ConceptoDTO objetoAux = new ConceptoDTO();
										objetoAux.setNombreArchivo(nombreArchivo);
										objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
										listaArchivoGuardadoResp.add(objetoAux);
										objetoAux = null;
										
									} catch (FileNotFoundException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}
									catch (IOException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}catch (Exception e) {
										e.printStackTrace();
									}							
								}		
							}							
							
							Locale locale = new Locale("es","CL");
							NumberFormat numberFormatter;
							numberFormatter = NumberFormat.getNumberInstance(locale);							

							/* sacar los datos concecptos involucrados*/
							List<SolicitudConceptosNegocioLC> listaConceptoInvolucarado = scoringService
									.getListarSolicitudConceptosNegocioLC(solicitud.getId().getNumSolicitud());	
							
							/*crear lista de concepto de involucrados*/
							List<ConceptoDTO> conceptosInvolucrado = new ArrayList<ConceptoDTO>(0);
							if(listaConceptoInvolucarado != null){
								for(SolicitudConceptosNegocioLC scn : listaConceptoInvolucarado){
									ConceptoDTO ci = new ConceptoDTO();
									ci.setDescripcion(scn.getConceptosNegocio().getDescripcion());
									ci.setMontoFormateado(numberFormatter.format(scn.getMonto()));
									conceptosInvolucrado.add(ci);
									ci=null;
								}
							}
							
							
							List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
							
							if(listaUsuarioCorreoagregados != null){
								/*setando los varlores del dto para el correo*/
								ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
								if(solicitud.getEstadoEvaluacion() != null && solicitud.getEstadoEvaluacion().equals("B")){
									contenidoEmail.setTituloRespuesta("An√°lisis individual solicitud");
								}else{
									contenidoEmail.setTituloRespuesta("Aprobaci√≥n individual solicitud");
									contenidoEmail.setDesicionEjecutivo("Aprobada");
								}
								contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
								contenidoEmail.setColor("VERDE");
								contenidoEmail.setAccion("Se Aprob√≥ la Solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
								contenidoEmail.setAccionRespuesta("");
								contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
								contenidoEmail.setObservacionRespuesta(this.observacionesFinales);
								contenidoEmail.setObservacionEjecutivo(null);
								contenidoEmail.setOpcionFinal(2);	
								contenidoEmail.setSolicitud(solicitud);
								
								
								StringBuffer rutNombre = new StringBuffer();
								rutNombre.append(cliente.getRut());
								rutNombre.append(" / ");
								rutNombre.append(modificarTexto(cliente.getRazonSocial()));
								contenidoEmail.setRutNombre(rutNombre.toString());
								contenidoEmail.setSoloNombre(cliente.getRazonSocial());
								contenidoEmail.setCanalVenta(cliente.getCanalVenta());
								contenidoEmail.setSucursal(sucursal.getDescripcion());
								

								
								Sucursal suc = obtenerObjetoSucursal(solicitud.getCodSucursal());
								if(suc != null){
									contenidoEmail.setSucursal(suc.getDescripcion());
								}else{
									contenidoEmail.setSucursal(solicitud.getCodSucursal());
								}
								
								UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
								if(ususarioEmisor != null){
									contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
								}else{
									contenidoEmail.setEmisor(modificarTexto(solicitud.getCodEmisor()));
								}
								contenidoEmail.setTipoSolicitud("Linea de Cr√©dito.");
								contenidoEmail.setTipoLineaCredito(tipoSolicitudAux.getDesTipoSolicitud());

								if("VIG".equals(solicitud.getVigSeguro().trim())){
									contenidoEmail.setLineaSeguroActual(numberFormatter.format(expoRiesgoKh.getMontoAsegurado()));
								}else{
									contenidoEmail.setLineaSeguroActual(numberFormatter.format(0));
								}
								
								if(this.modificarCredito){
									log.debug(numberFormatter.format(this.montoLineaCreditoNuevo));
									contenidoEmail.setMontoSolicitado(numberFormatter.format(this.montoLineaCreditoNuevo));
									contenidoEmail.setCondicionRiesgo(this.clsRiesgoNuevo);
									contenidoEmail.setCondicionPago(this.cPagoNuevo);
									
								}else{
									contenidoEmail.setMontoSolicitado(numberFormatter.format(this.montoCredito));
									contenidoEmail.setCondicionRiesgo(this.clsRiesgo);
									contenidoEmail.setCondicionPago(this.cPago);
								}
								
								contenidoEmail.setProyecto(credito.getDpDescripcionProyecto());
								contenidoEmail.setMontoProyecto(credito.getDpMonto());
								contenidoEmail.setPlazoEjecucion(modificarTexto(credito.getDpPlazoEjecucion()));
								contenidoEmail.setPotencialCompra(credito.getDpPotencialCompra());
								
								
								List<String> listaSocios = new ArrayList<String>(0);
								if(credito.getDpSocios() != null){
									String[] array = credito.getDpSocios().split(",");
									if(array != null){
										for(String s : array){
											listaSocios.add(s);
										}
									}
								}
								
							    /*datos de lineas credito solCredito */
								contenidoEmail.setListaSocios(listaSocios);
								contenidoEmail.setListaConceptoMontos(conceptosInvolucrado);
								contenidoEmail.setListaArchivos(listaArchivoGuardado);
								contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
								contenidoEmail.setListaObservaciones(listaObservaciones);
								
								List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
								if(listaUsuarioCorreoagregados != null){
									for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
										if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !((ucdto.getUsername().trim()).toLowerCase()).equals(solicitud.getCodEmisor().trim().toLowerCase())){
											log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
												if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
													ultimaListaCorreoPrueba.add(usuarioAux);	
													usuarioAux = new Usuariosegur();
												}													
											}
										}
									}
								}
								/*eliminar esto, cuando se establaque la solucion*/
								Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
								if(emisorCorreo != null){
									if(!ultimaListaCorreoPrueba.contains(emisorCorreo)){
										ultimaListaCorreoPrueba.add(emisorCorreo);
									}
									emisorCorreo = null;
								}
								Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
								if(correoAdministrador != null){
									ultimaListaCorreoPrueba.add(correoAdministrador);
									correoAdministrador = null;
								}								
								contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);										
								try{
									if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
										emailAlerta.enviarRespuestaSolicitudVenta(contenidoEmail);	
									}	
								}catch (Exception e) {
									log.debug("paso por el error #0"+ e.getMessage());
								}
							}
							
							
							insertarLogs(solicitud, 8);
							if(this.estadoSolicitudAnalisisAprobacion != null && this.estadoSolicitudAnalisisAprobacion.equals("B")){
								LcredEstado e = scoringService.obtenerEstado("AD");
								insertHitos(solicitud, e, "NADA", 0);
							}else if(this.estadoSolicitudAnalisisAprobacion != null  && this.estadoSolicitudAnalisisAprobacion.equals("SA")){
								insertHitos(solicitud, estado, "NADA", 0);
							}else{
								insertHitos(solicitud, estado, "NADA", 0);
							}
							entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
							             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
							entityManager.flush();
						}
						
					}else{/*solo envio de correo de la aprobacion del usuario que acaba de aprobar*/
						
						if(solicitud.getEstadoEvaluacion() != null && solicitud.getEstadoEvaluacion().equals("B")){
							this.mensajeGlogal = "La solicitud "+ solicitud.getId().getNumSolicitud() +" fue analizada por "+ modificarTexto(usuarioLogueado.getNombre())+".";
						}else{
							this.mensajeGlogal = "La solicitud "+ solicitud.getId().getNumSolicitud() +" fue aprobada por "+ modificarTexto(usuarioLogueado.getNombre())+".";
							
						}
						/*se agrega la observaciones final de una aprobacion final */
						LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
						Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							id.setCorrelativo(correlativo);
							id.setFecha(new Date());
							id.setHora(new Date());
							id.setNumSolicitud(solicitud.getId().getNumSolicitud());
							id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							id.setObservacion(this.observacionesFinales);
							id.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(id);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}
						
						List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
						
						if(listaFileUploadedDTOs != null){
							for(FileUploadedDTO archivo :listaFileUploadedDTOs){
							   try {							
									OutputStream ostream = null;
									String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
									nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);
									String url = "archivos"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
									
									
									//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
									ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
									log.debug("url #0",archivo.getUploadItem().getContentType());
									IOUtils.copyStream(ostream, istream);
									ostream.flush();
									ostream.close();
									istream.close();
									//guardar datos en la BD
									ArchivoAdjunto archivoAux = new ArchivoAdjunto();
									archivoAux.setSolicitud(solicitud);
									archivoAux.setUrl(url);
									archivoAux.setUbicacion("");
									archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
									archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
									archivoAux.setUsuario(usuarioLogueado);
									archivoAux.setFechaCreacion(new Date());
									entityManager.persist(archivoAux);
									entityManager.flush();
									
									entityManager.remove(archivo.getArchivo());
									entityManager.flush();
									
									
									
									ConceptoDTO objetoAux = new ConceptoDTO();
									objetoAux.setNombreArchivo(nombreArchivo);
									objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
									listaArchivoGuardadoResp.add(objetoAux);
									objetoAux = null;
									
								} catch (FileNotFoundException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}
								catch (IOException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}catch (Exception e) {
									e.printStackTrace();
								}							
							}		
						}							
						
						
						
						Locale locale = new Locale("es","CL");
						NumberFormat numberFormatter;
						numberFormatter = NumberFormat.getNumberInstance(locale);							
						
						/* sacar los datos concecptos involucrados*/
						List<SolicitudConceptosNegocioLC> listaConceptoInvolucarado = scoringService
								.getListarSolicitudConceptosNegocioLC(solicitud.getId().getNumSolicitud());	
						
						/*crear lista de concepto de involucrados*/
						List<ConceptoDTO> conceptosInvolucrado = new ArrayList<ConceptoDTO>(0);
						if(listaConceptoInvolucarado != null){
							for(SolicitudConceptosNegocioLC scn : listaConceptoInvolucarado){
								ConceptoDTO ci = new ConceptoDTO();
								ci.setDescripcion(scn.getConceptosNegocio().getDescripcion());
								ci.setMontoFormateado(numberFormatter.format(scn.getMonto()));
								conceptosInvolucrado.add(ci);
								ci=null;
							}
						}
						
						List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
						
						if(listaUsuarioCorreoagregados != null){
							/*setando los varlores del dto para el correo*/
							ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
							if(solicitud.getEstadoEvaluacion() != null && solicitud.getEstadoEvaluacion().equals("B")){
								contenidoEmail.setTituloRespuesta("An√°lisis individual solicitud");
							}else{
								contenidoEmail.setTituloRespuesta("Aprobaci√≥n individual solicitud");
								contenidoEmail.setDesicionEjecutivo("Aprobada");
							}
							contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
							contenidoEmail.setColor("VERDE");
							contenidoEmail.setAccion("Se Aprob√≥ la Solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
							contenidoEmail.setAccionRespuesta("");
							contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
							contenidoEmail.setObservacionRespuesta(this.observacionesFinales);
							contenidoEmail.setObservacionEjecutivo(null);
							contenidoEmail.setOpcionFinal(2);	
							contenidoEmail.setSolicitud(solicitud);
							
							
							StringBuffer rutNombre = new StringBuffer();
							rutNombre.append(cliente.getRut());
							rutNombre.append(" / ");
							rutNombre.append(modificarTexto(cliente.getRazonSocial()));
							contenidoEmail.setRutNombre(rutNombre.toString());
							contenidoEmail.setSoloNombre(cliente.getRazonSocial());
							contenidoEmail.setCanalVenta(cliente.getCanalVenta());
							contenidoEmail.setSucursal(sucursal.getDescripcion());
							
							Sucursal suc = obtenerObjetoSucursal(solicitud.getCodSucursal());
							if(suc != null){
								contenidoEmail.setSucursal(suc.getDescripcion());
							}else{
								contenidoEmail.setSucursal(solicitud.getCodSucursal());
							}
							
							UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
							if(ususarioEmisor != null){
								contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
							}else{
								contenidoEmail.setEmisor(modificarTexto(solicitud.getCodEmisor()));
							}
							contenidoEmail.setTipoSolicitud("Linea de Cr√©dito.");
							contenidoEmail.setTipoLineaCredito(tipoSolicitudAux.getDesTipoSolicitud());

							if("VIG".equals(solicitud.getVigSeguro().trim())){
								contenidoEmail.setLineaSeguroActual(numberFormatter.format(expoRiesgoKh.getMontoAsegurado()));
							}else{
								contenidoEmail.setLineaSeguroActual(numberFormatter.format(0));
							}
							
							if(this.modificarCredito){
								log.debug(numberFormatter.format(this.montoLineaCreditoNuevo));
								contenidoEmail.setMontoSolicitado(numberFormatter.format(this.montoLineaCreditoNuevo));
								contenidoEmail.setCondicionRiesgo(this.clsRiesgoNuevo);
								contenidoEmail.setCondicionPago(this.cPagoNuevo);
								
							}else{
								contenidoEmail.setMontoSolicitado(numberFormatter.format(this.montoCredito));
								contenidoEmail.setCondicionRiesgo(this.clsRiesgo);
								contenidoEmail.setCondicionPago(this.cPago);
							}
							
							contenidoEmail.setProyecto(credito.getDpDescripcionProyecto());
							contenidoEmail.setMontoProyecto(credito.getDpMonto());
							contenidoEmail.setPlazoEjecucion(modificarTexto(credito.getDpPlazoEjecucion()));
							contenidoEmail.setPotencialCompra(credito.getDpPotencialCompra());
							
							
							List<String> listaSocios = new ArrayList<String>(0);
							if(credito.getDpSocios() != null){
								String[] array = credito.getDpSocios().split(",");
								if(array != null){
									for(String s : array){
										listaSocios.add(s);
									}
								}
							}
							
						    /*datos de lineas credito solCredito */
							contenidoEmail.setListaSocios(listaSocios);
							contenidoEmail.setListaConceptoMontos(conceptosInvolucrado);
							contenidoEmail.setListaArchivos(listaArchivoGuardado);
							contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
							contenidoEmail.setListaObservaciones(listaObservaciones);
							
							
							List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
							if(listaUsuarioCorreoagregados != null){
								for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
									if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !((ucdto.getUsername().trim()).toLowerCase()).equals(solicitud.getCodEmisor().trim().toLowerCase())){
										log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
										Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
										if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
											if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
												ultimaListaCorreoPrueba.add(usuarioAux);	
												usuarioAux = new Usuariosegur();
											}													
										}
									}
								}
							}
							/*eliminar esto, cuando se establaque la solucion*/
							Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
							if(emisorCorreo != null){
								if(!ultimaListaCorreoPrueba.contains(emisorCorreo)){
									ultimaListaCorreoPrueba.add(emisorCorreo);
								}
								emisorCorreo = null;
							}
							Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
							if(correoAdministrador != null){
								ultimaListaCorreoPrueba.add(correoAdministrador);
								correoAdministrador = null;
							}
							contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);									
							
							try{
								if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
									emailAlerta.enviarRespuestaSolicitudVenta(contenidoEmail);	
								}	
							}catch (Exception e) {
								log.debug("paso por el error #0"+ e.getMessage());
							}
						}
						
						
						insertarLogs(solicitud, 8);
						insertHitos(solicitud, estado, "NADA", 0);
						entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
						             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
						entityManager.flush();
					}
				}	
			}else if (this.paginaIngreso == 31){
				if(solicitud != null && condicion != null && usuarioLogueado != null){
					SolicitudUsuarioDerivada sud =  scoringService.
							getSolicitudUsuarioDerivacionForSolicitudIpPersonal(solicitud.getId().getNumSolicitud(),
									usuarioLogueado.getIdPersonal());
					if(sud != null){
						sud.setConfirmacion(true);
						sud.setEstado(estado);
						sud.setUsernameAutorizacion(usuarioLogueado.getAlias());
						exitoSud = scoringService.mergerSolicitudUsuarioDerivacion(sud);
						log.debug(exitoSud);
					}
					
					List<SolicitudUsuarioDerivada> listaVerificacion = scoringService.getSolicitudUsuarioDerivacionForSolicitudEstado(solicitud.getId().getNumSolicitud(),solicitud.getEstadoEvaluacion());
					if(listaVerificacion != null){
						cantidad = listaVerificacion.size();
						/*verificar cantidad de usuarios obligatorios debe aprobar*/
						for(SolicitudUsuarioDerivada sudAux : listaVerificacion){
							if(sudAux.getConfirmacionObligatoria() == true){
								verificadosObligados++;
							}
						}
						
						
						/*verificar la cantidad de aprobados, rechazados, la cantidad de usuarios*/
						for(SolicitudUsuarioDerivada sudAux2 : listaVerificacion){
							if(sudAux2.getEstado().getCodEstado().equals("AP")){
								aprobado++;
								if(sudAux2.getConfirmacion()){
									if(sudAux2.getConfirmacionObligatoria()){
										cantVeriObligadosAprobado++;
									}
								}
							}else if(sudAux2.getEstado().getCodEstado().equals("RP")){
								rechazado++;
								if(sudAux2.getConfirmacion()){
									if(sudAux2.getConfirmacionObligatoria()){
										cantVeriObligadosRechazado++;
									}
								}								
							}
						}
					}
					
					if(verificadosObligados == (cantVeriObligadosAprobado + cantVeriObligadosRechazado)){
						cambioEstadosolicitud = true;
					}
					if(cambioEstadosolicitud == true  && !solicitud.getEstado().equals("DR")){/*cambio de estado de la solicitud */
						
						solicitud.setEstado("DR");
						solicitud.setAnalizar(true);
						condicion.setStatusSolicitud("DR");
						
						boolean exitoUno = scoringService.mergerSolicitud(solicitud);
						boolean exitoDos = scoringService.mergerSolicitudCondiciones(condicion);
						entityManager.refresh(solicitud);
						entityManager.refresh(condicion);
						if(exitoUno == true && exitoDos == true){
							if(solicitud.getEstadoEvaluacion() != null && solicitud.getEstadoEvaluacion().equals("B")){
								this.mensajeGlogal = "La solicitud "+ solicitud.getId().getNumSolicitud() +" fue analizada por "+ modificarTexto(usuarioLogueado.getNombre())+".";
							}else{
								this.mensajeGlogal = "La solicitud "+ solicitud.getId().getNumSolicitud() +" fue aprobada por "+ modificarTexto(usuarioLogueado.getNombre())+".";
							}
							
							/*se agrega la observaciones final de una aprobacion final */
							LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
							Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
							if(correlativo != null){
								id.setCorrelativo(correlativo);
								id.setFecha(new Date());
								id.setHora(new Date());
								id.setNumSolicitud(solicitud.getId().getNumSolicitud());
								id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
								id.setObservacion(this.observacionesFinales);
								id.setUsuario(usuarioSegur.getAlias());
								LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
								obser.setId(id);
								scoringService.persistSolicitudObservaciones(obser);
								insertarLogs(solicitud, 5);
							}
							List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
							if(listaFileUploadedDTOs != null){
								for(FileUploadedDTO archivo :listaFileUploadedDTOs){
								   try {							
										OutputStream ostream = null;
										String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
										nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);
										String url = "archivos"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
										
										
										//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
										ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
										log.debug("url #0",archivo.getUploadItem().getContentType());
										IOUtils.copyStream(ostream, istream);
										ostream.flush();
										ostream.close();
										istream.close();
										//guardar datos en la BD
										ArchivoAdjunto archivoAux = new ArchivoAdjunto();
										archivoAux.setSolicitud(solicitud);
										archivoAux.setUrl(url);
										archivoAux.setUbicacion("");
										archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
										archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
										archivoAux.setUsuario(usuarioLogueado);
										archivoAux.setFechaCreacion(new Date());
										entityManager.persist(archivoAux);
										entityManager.flush();
										
										entityManager.remove(archivo.getArchivo());
										entityManager.flush();
										
										
										
										ConceptoDTO objetoAux = new ConceptoDTO();
										objetoAux.setNombreArchivo(nombreArchivo);
										objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
										listaArchivoGuardadoResp.add(objetoAux);
										objetoAux = null;
										
									} catch (FileNotFoundException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}
									catch (IOException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}catch (Exception e) {
										e.printStackTrace();
									}							
								}		
							}								
							
							
							
							List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
							
							if(listaUsuarioCorreoagregados != null){
								/*setando los varlores del dto para el correo*/
								ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
								if(solicitud.getEstadoEvaluacion() != null && solicitud.getEstadoEvaluacion().equals("B")){
									contenidoEmail.setTituloRespuesta("An√°lisis individual solicitud");
								}else{
									contenidoEmail.setTituloRespuesta("Aprobaci√≥n individual solicitud");
									contenidoEmail.setDesicionEjecutivo("Aprobada");
								}
								contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
								contenidoEmail.setColor("VERDE");
								contenidoEmail.setAccion("Se Aprob√≥ la Solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
								contenidoEmail.setAccionRespuesta("");
								contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
								contenidoEmail.setObservacionRespuesta(this.observacionesFinales);
								contenidoEmail.setObservacionEjecutivo(null);
								contenidoEmail.setOpcionFinal(2);	
								contenidoEmail.setSolicitud(solicitud);
								
								
								StringBuffer rutNombre = new StringBuffer();
								rutNombre.append(cliente.getRut());
								rutNombre.append(" / ");
								rutNombre.append(modificarTexto(cliente.getRazonSocial()));
								contenidoEmail.setRutNombre(rutNombre.toString());
								contenidoEmail.setSoloNombre(cliente.getRazonSocial());
								contenidoEmail.setCanalVenta(cliente.getCanalVenta());
								contenidoEmail.setSucursal(sucursal.getDescripcion());
								UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
								if(ususarioEmisor != null){
									contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
								}else{
									contenidoEmail.setEmisor(solicitud.getCodEmisor());
								}
								
								

								contenidoEmail.setTipoSolicitud("Cambio de Condiciones.");
								
								if(this.modificarCondicion){
									if(this.condicionRiesgoNew == true && this.condicionPagoNew == false){
										contenidoEmail.setTipoLineaCredito("Condiciones de Riesgo.");	
										contenidoEmail.setCondicionRiesgo(cliente.getClasificacionRiesgo());
										contenidoEmail.setCondicionPago("");
										contenidoEmail.setCondicionRiesgoNuevo(this.clsRiesgoNuevo);								
										contenidoEmail.setCondicionPagoNuevo("");
									
									}else if(this.condicionRiesgoNew == false && this.condicionPagoNew == true){
										contenidoEmail.setTipoLineaCredito("Condiciones de Pago.");
										contenidoEmail.setCondicionRiesgo("");
										contenidoEmail.setCondicionPago(cliente.getCondicionPago());
										contenidoEmail.setCondicionRiesgoNuevo("");								
										contenidoEmail.setCondicionPagoNuevo(this.cPagoNuevo);									
									
									}else if(this.condicionRiesgoNew == true && this.condicionPagoNew == true){
										contenidoEmail.setTipoLineaCredito("Condiciones "+ this.tipoSolicitudAux.getDesTipoSolicitud());
										contenidoEmail.setCondicionRiesgo(cliente.getClasificacionRiesgo());
										contenidoEmail.setCondicionPago(cliente.getCondicionPago());
										contenidoEmail.setCondicionRiesgoNuevo(this.clsRiesgoNuevo);								
										contenidoEmail.setCondicionPagoNuevo(this.cPagoNuevo);
									}								
								}else{
									
									if(this.condicionRiesgo == true && this.condicionPago == false){
										contenidoEmail.setTipoLineaCredito("Condiciones de Riesgo.");	
										contenidoEmail.setCondicionRiesgo(cliente.getClasificacionRiesgo());
										contenidoEmail.setCondicionPago("");
										contenidoEmail.setCondicionRiesgoNuevo(this.clsRiesgo);								
										contenidoEmail.setCondicionPagoNuevo("");
									
									}else if(this.condicionRiesgo == false && this.condicionPago == true){
										contenidoEmail.setTipoLineaCredito("Condiciones de Pago.");
										contenidoEmail.setCondicionRiesgo("");
										contenidoEmail.setCondicionPago(cliente.getCondicionPago());
										contenidoEmail.setCondicionRiesgoNuevo("");								
										contenidoEmail.setCondicionPagoNuevo(this.cPago);									
									
									}else if(this.condicionRiesgo == true && this.condicionPago == true){
										contenidoEmail.setTipoLineaCredito("Condiciones "+ this.tipoSolicitudAux.getDesTipoSolicitud());
										contenidoEmail.setCondicionRiesgo(cliente.getClasificacionRiesgo());
										contenidoEmail.setCondicionPago(cliente.getCondicionPago());
										contenidoEmail.setCondicionRiesgoNuevo(this.clsRiesgo);								
										contenidoEmail.setCondicionPagoNuevo(this.cPago);
									}								
								}
								contenidoEmail.setMotivoCambio(condicion.getMotivoCambio());
							    /*datos de condiciones */
								contenidoEmail.setListaArchivos(listaArchivoGuardado);
								contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);	
								contenidoEmail.setListaObservaciones(listaObservaciones);
								
								List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
								if(listaUsuarioCorreoagregados != null){
									for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
										if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !((ucdto.getUsername().trim()).toLowerCase()).equals(solicitud.getCodEmisor().trim().toLowerCase())){
											log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
												if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
													ultimaListaCorreoPrueba.add(usuarioAux);	
													usuarioAux = new Usuariosegur();
												}													
											}
										}
									}
								}
								/*eliminar esto, cuando se establaque la solucion*/
								Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
								if(emisorCorreo != null){
									if(!ultimaListaCorreoPrueba.contains(emisorCorreo)){
										ultimaListaCorreoPrueba.add(emisorCorreo);
									}
									emisorCorreo = null;
								}
								Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
								if(correoAdministrador != null){
									ultimaListaCorreoPrueba.add(correoAdministrador);
									correoAdministrador = null;
								}
								contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);										
								try{
									if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
										emailAlerta.enviarRespuestaSolicitudCondiciones(contenidoEmail);	
									}	
								}catch (Exception e) {
									log.debug("paso por el error #0"+ e.getMessage());
								}
							}
							
							
							insertarLogs(solicitud, 8);
							if(this.estadoSolicitudAnalisisAprobacion != null && this.estadoSolicitudAnalisisAprobacion.equals("B")){
								LcredEstado e = scoringService.obtenerEstado("AD");
								insertHitos(solicitud, e, "NADA", 0);
							}else if(this.estadoSolicitudAnalisisAprobacion != null  && this.estadoSolicitudAnalisisAprobacion.equals("SA")){
								insertHitos(solicitud, estado, "NADA", 0);
							}else{
								insertHitos(solicitud, estado, "NADA", 0);
							}
							entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
							             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
							entityManager.flush();
						}
						
					}else{/*solo envio de correo de la aprobacion del usuario que acaba de aprobar*/
						if(solicitud.getEstadoEvaluacion() != null && solicitud.getEstadoEvaluacion().equals("B")){
							this.mensajeGlogal = "La solicitud "+ solicitud.getId().getNumSolicitud() +" fue analizada por "+ modificarTexto(usuarioLogueado.getNombre())+".";
						}else{
							this.mensajeGlogal = "La solicitud "+ solicitud.getId().getNumSolicitud() +" fue aprobada por "+ modificarTexto(usuarioLogueado.getNombre())+".";
						}
						/*se agrega la observaciones final de una aprobacion final */
						LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
						Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							id.setCorrelativo(correlativo);
							id.setFecha(new Date());
							id.setHora(new Date());
							id.setNumSolicitud(solicitud.getId().getNumSolicitud());
							id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							id.setObservacion(this.observacionesFinales);
							id.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(id);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}
						List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
						if(listaFileUploadedDTOs != null){
							for(FileUploadedDTO archivo :listaFileUploadedDTOs){
							   try {							
									OutputStream ostream = null;
									String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
									nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);
									String url = "archivos"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
									
									
									//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
									ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
									log.debug("url #0",archivo.getUploadItem().getContentType());
									IOUtils.copyStream(ostream, istream);
									ostream.flush();
									ostream.close();
									istream.close();
									//guardar datos en la BD
									ArchivoAdjunto archivoAux = new ArchivoAdjunto();
									archivoAux.setSolicitud(solicitud);
									archivoAux.setUrl(url);
									archivoAux.setUbicacion("");
									archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
									archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
									archivoAux.setUsuario(usuarioLogueado);
									archivoAux.setFechaCreacion(new Date());
									entityManager.persist(archivoAux);
									entityManager.flush();
									
									entityManager.remove(archivo.getArchivo());
									entityManager.flush();
									
									
									
									ConceptoDTO objetoAux = new ConceptoDTO();
									objetoAux.setNombreArchivo(nombreArchivo);
									objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
									listaArchivoGuardadoResp.add(objetoAux);
									objetoAux = null;
									
								} catch (FileNotFoundException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}
								catch (IOException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}catch (Exception e) {
									e.printStackTrace();
								}							
							}		
						}							
						
						List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
						
						if(listaUsuarioCorreoagregados != null){
							/*setando los varlores del dto para el correo*/
							ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
							if(solicitud.getEstadoEvaluacion() != null && solicitud.getEstadoEvaluacion().equals("B")){
								contenidoEmail.setTituloRespuesta("An√°lisis individual solicitud");
							}else{
								contenidoEmail.setTituloRespuesta("Aprobaci√≥n individual solicitud");
								contenidoEmail.setDesicionEjecutivo("Aprobada");
							}
							contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
							contenidoEmail.setColor("VERDE");
							contenidoEmail.setAccion("Se Aprob√≥ la Solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
							contenidoEmail.setAccionRespuesta("");
							contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
							contenidoEmail.setObservacionRespuesta(this.observacionesFinales);
							contenidoEmail.setObservacionEjecutivo(null);
							contenidoEmail.setOpcionFinal(2);	
							contenidoEmail.setSolicitud(solicitud);
							
							
							StringBuffer rutNombre = new StringBuffer();
							rutNombre.append(cliente.getRut());
							rutNombre.append(" / ");
							rutNombre.append(modificarTexto(cliente.getRazonSocial()));
							contenidoEmail.setRutNombre(rutNombre.toString());
							contenidoEmail.setSoloNombre(cliente.getRazonSocial());
							contenidoEmail.setCanalVenta(cliente.getCanalVenta());
							contenidoEmail.setSucursal(sucursal.getDescripcion());
							
							UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
							if(ususarioEmisor != null){
								contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
							}else{
								contenidoEmail.setEmisor(solicitud.getCodEmisor());
							}

							contenidoEmail.setTipoSolicitud("Cambio de Condiciones.");
							
							if(this.modificarCondicion){
								if(this.condicionRiesgoNew == true && this.condicionPagoNew == false){
									contenidoEmail.setTipoLineaCredito("Condiciones de Riesgo.");	
									contenidoEmail.setCondicionRiesgo(cliente.getClasificacionRiesgo());
									contenidoEmail.setCondicionPago("");
									contenidoEmail.setCondicionRiesgoNuevo(this.clsRiesgoNuevo);								
									contenidoEmail.setCondicionPagoNuevo("");
								
								}else if(this.condicionRiesgoNew == false && this.condicionPagoNew == true){
									contenidoEmail.setTipoLineaCredito("Condiciones de Pago.");
									contenidoEmail.setCondicionRiesgo("");
									contenidoEmail.setCondicionPago(cliente.getCondicionPago());
									contenidoEmail.setCondicionRiesgoNuevo("");								
									contenidoEmail.setCondicionPagoNuevo(this.cPagoNuevo);									
								
								}else if(this.condicionRiesgoNew == true && this.condicionPagoNew == true){
									contenidoEmail.setTipoLineaCredito("Condiciones "+ this.tipoSolicitudAux.getDesTipoSolicitud());
									contenidoEmail.setCondicionRiesgo(cliente.getClasificacionRiesgo());
									contenidoEmail.setCondicionPago(cliente.getCondicionPago());
									contenidoEmail.setCondicionRiesgoNuevo(this.clsRiesgoNuevo);								
									contenidoEmail.setCondicionPagoNuevo(this.cPagoNuevo);
								}								
							}else{
								
								if(this.condicionRiesgo == true && this.condicionPago == false){
									contenidoEmail.setTipoLineaCredito("Condiciones de Riesgo.");	
									contenidoEmail.setCondicionRiesgo(cliente.getClasificacionRiesgo());
									contenidoEmail.setCondicionPago("");
									contenidoEmail.setCondicionRiesgoNuevo(this.clsRiesgo);								
									contenidoEmail.setCondicionPagoNuevo("");
								
								}else if(this.condicionRiesgo == false && this.condicionPago == true){
									contenidoEmail.setTipoLineaCredito("Condiciones de Pago.");
									contenidoEmail.setCondicionRiesgo("");
									contenidoEmail.setCondicionPago(cliente.getCondicionPago());
									contenidoEmail.setCondicionRiesgoNuevo("");								
									contenidoEmail.setCondicionPagoNuevo(this.cPago);									
								
								}else if(this.condicionRiesgo == true && this.condicionPago == true){
									contenidoEmail.setTipoLineaCredito("Condiciones "+ this.tipoSolicitudAux.getDesTipoSolicitud());
									contenidoEmail.setCondicionRiesgo(cliente.getClasificacionRiesgo());
									contenidoEmail.setCondicionPago(cliente.getCondicionPago());
									contenidoEmail.setCondicionRiesgoNuevo(this.clsRiesgo);								
									contenidoEmail.setCondicionPagoNuevo(this.cPago);
								}								
							}
							contenidoEmail.setMotivoCambio(condicion.getMotivoCambio());
						    /*datos de condiciones */
							contenidoEmail.setListaArchivos(listaArchivoGuardado);
							contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);	
							contenidoEmail.setListaObservaciones(listaObservaciones);
							
							List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
							if(listaUsuarioCorreoagregados != null){
								for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
									if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !((ucdto.getUsername().trim()).toLowerCase()).equals(solicitud.getCodEmisor().trim().toLowerCase())){
										log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
										Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
										if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
											if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
												ultimaListaCorreoPrueba.add(usuarioAux);	
												usuarioAux = new Usuariosegur();
											}													
										}
									}
								}
							}	
							/*eliminar esto, cuando se establaque la solucion*/
							Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
							if(emisorCorreo != null){
								if(!ultimaListaCorreoPrueba.contains(emisorCorreo)){
									ultimaListaCorreoPrueba.add(emisorCorreo);
								}
								emisorCorreo = null;
							}
							Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
							if(correoAdministrador != null){
								ultimaListaCorreoPrueba.add(correoAdministrador);
								correoAdministrador = null;
							}							
							contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);									
							try{
								if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
									emailAlerta.enviarRespuestaSolicitudCondiciones(contenidoEmail);	
								}	
							}catch (Exception e) {
								log.debug("paso por el error #0"+ e.getMessage());
							}
						}
						
						
						insertarLogs(solicitud, 8);
						insertHitos(solicitud, estado, "NADA", 0);
						entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
						             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
						entityManager.flush();
					}
				}	
			}else if(this.paginaIngreso == 41){
				if(solicitud != null && solicitudOtra != null && usuarioLogueado != null){
					SolicitudUsuarioDerivada sud =  scoringService.
							getSolicitudUsuarioDerivacionForSolicitudIpPersonal(solicitud.getId().getNumSolicitud(),
									usuarioLogueado.getIdPersonal());
					if(sud != null){
						sud.setConfirmacion(true);
						sud.setEstado(estado);
						sud.setUsernameAutorizacion(usuarioLogueado.getAlias());
						exitoSud = scoringService.mergerSolicitudUsuarioDerivacion(sud);
						log.debug(exitoSud);
					}
					
					List<SolicitudUsuarioDerivada> listaVerificacion = scoringService.getSolicitudUsuarioDerivacionForSolicitudEstado(solicitud.getId().getNumSolicitud(),solicitud.getEstadoEvaluacion());
					if(listaVerificacion != null){
						cantidad = listaVerificacion.size();
						/*verificar cantidad de usuarios obligatorios debe aprobar*/
						for(SolicitudUsuarioDerivada sudAux : listaVerificacion){
							if(sudAux.getConfirmacionObligatoria() == true){
								verificadosObligados++;
							}
						}
						
						
						/*verificar la cantidad de aprobados, rechazados, la cantidad de usuarios*/
						for(SolicitudUsuarioDerivada sudAux2 : listaVerificacion){
							if(sudAux2.getEstado().getCodEstado().equals("AP")){
								aprobado++;
								if(sudAux2.getConfirmacion()){
									if(sudAux2.getConfirmacionObligatoria()){
										cantVeriObligadosAprobado++;
									}
								}
							}else if(sudAux2.getEstado().getCodEstado().equals("RP")){
								rechazado++;
								if(sudAux2.getConfirmacion()){
									if(sudAux2.getConfirmacionObligatoria()){
										cantVeriObligadosRechazado++;
									}
								}								
							}
						}
					}
					
					if(verificadosObligados == (cantVeriObligadosAprobado + cantVeriObligadosRechazado)){
						cambioEstadosolicitud = true;
					}
					if(cambioEstadosolicitud == true  && !solicitud.getEstado().equals("DR")){/*cambio de estado de la solicitud */
						
						solicitud.setEstado("DR");
						solicitud.setAnalizar(true);
						solicitudOtra.setStatusSolicitud("DR");
						
						boolean exitoUno = scoringService.mergerSolicitud(solicitud);
						boolean exitoDos = scoringService.mergerSolicitudOtrasSolicitudes(solicitudOtra);
						entityManager.refresh(solicitud);
						entityManager.refresh(solicitudOtra);
						if(exitoUno == true && exitoDos == true){
							if(solicitud.getEstadoEvaluacion() != null && solicitud.getEstadoEvaluacion().equals("B")){
								this.mensajeGlogal = "La solicitud "+ solicitud.getId().getNumSolicitud() +" fue analizada por "+ modificarTexto(usuarioLogueado.getNombre())+".";
							}else{
								this.mensajeGlogal = "La solicitud "+ solicitud.getId().getNumSolicitud() +" fue aprobada por "+ modificarTexto(usuarioLogueado.getNombre())+".";
							}
							/*se agrega la observaciones final de una aprobacion final */
							LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
							Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
							if(correlativo != null){
								id.setCorrelativo(correlativo);
								id.setFecha(new Date());
								id.setHora(new Date());
								id.setNumSolicitud(solicitud.getId().getNumSolicitud());
								id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
								id.setObservacion(this.observacionesFinales);
								id.setUsuario(usuarioSegur.getAlias());
								LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
								obser.setId(id);
								scoringService.persistSolicitudObservaciones(obser);
								insertarLogs(solicitud, 5);
							}							
							List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
							if(listaFileUploadedDTOs != null){
								for(FileUploadedDTO archivo :listaFileUploadedDTOs){
								   try {							
										OutputStream ostream = null;
										String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
										nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);
										String url = "archivos"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
										
										
										//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
										ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
										log.debug("url #0",archivo.getUploadItem().getContentType());
										IOUtils.copyStream(ostream, istream);
										ostream.flush();
										ostream.close();
										istream.close();
										//guardar datos en la BD
										ArchivoAdjunto archivoAux = new ArchivoAdjunto();
										archivoAux.setSolicitud(solicitud);
										archivoAux.setUrl(url);
										archivoAux.setUbicacion("");
										archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
										archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
										archivoAux.setUsuario(usuarioLogueado);
										archivoAux.setFechaCreacion(new Date());
										entityManager.persist(archivoAux);
										entityManager.flush();
										
										entityManager.remove(archivo.getArchivo());
										entityManager.flush();
										
										
										
										ConceptoDTO objetoAux = new ConceptoDTO();
										objetoAux.setNombreArchivo(nombreArchivo);
										objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
										listaArchivoGuardadoResp.add(objetoAux);
										objetoAux = null;
										
									} catch (FileNotFoundException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}
									catch (IOException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}catch (Exception e) {
										e.printStackTrace();
									}							
								}		
							}								
							
							List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
							
							if(listaUsuarioCorreoagregados != null){
								/*setando los varlores del dto para el correo*/
								ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
								if(solicitud.getEstadoEvaluacion() != null && solicitud.getEstadoEvaluacion().equals("B")){
									contenidoEmail.setTituloRespuesta("An√°lisis individual solicitud");
								}else{
									contenidoEmail.setTituloRespuesta("Aprobaci√≥n individual solicitud");
									contenidoEmail.setDesicionEjecutivo("Aprobada");
								}
								contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
								contenidoEmail.setColor("VERDE");
								contenidoEmail.setAccion("Se Aprob√≥ la Solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
								contenidoEmail.setAccionRespuesta("");
								contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
								contenidoEmail.setObservacionRespuesta(this.observacionesFinales);
								contenidoEmail.setObservacionEjecutivo(null);
								contenidoEmail.setOpcionFinal(2);	
								contenidoEmail.setSolicitud(solicitud);
								
								
								StringBuffer rutNombre = new StringBuffer();
								rutNombre.append(cliente.getRut());
								rutNombre.append(" / ");
								rutNombre.append(modificarTexto(cliente.getRazonSocial()));
								contenidoEmail.setRutNombre(rutNombre.toString());
								contenidoEmail.setSoloNombre(cliente.getRazonSocial());
								contenidoEmail.setCanalVenta(cliente.getCanalVenta());
								contenidoEmail.setSucursal(sucursal.getDescripcion());
								
								UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
								if(ususarioEmisor != null){
									contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
								}else{
									contenidoEmail.setEmisor(solicitud.getCodEmisor());
								}
								
								

								contenidoEmail.setTipoSolicitud("Bloqueo / Desbloqueo.");
								
								if("41".equals(this.opcionBloqueoDesbloqueo)){
									contenidoEmail.setTipoBloqueoDesbloqueo("Bloqueo.");
			
								}else if("42".equals(this.opcionBloqueoDesbloqueo)){
									contenidoEmail.setTipoBloqueoDesbloqueo("Desbloqueo.");
								}
								
								contenidoEmail.setMotivoBloqueoDesbloqueo(this.motivoBloDesbloqueo);
								contenidoEmail.setObservacionesBloqueoDesblorqueo(this.motivoBloDesbloqueo);
								
							    /*datos de condiciones */
								contenidoEmail.setListaArchivos(listaArchivoGuardado);
								contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);	
								contenidoEmail.setListaObservaciones(listaObservaciones);

								List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
								if(listaUsuarioCorreoagregados != null){
									for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
										if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !((ucdto.getUsername().trim()).toLowerCase()).equals(solicitud.getCodEmisor().trim().toLowerCase())){
											log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
												if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
													ultimaListaCorreoPrueba.add(usuarioAux);	
													usuarioAux = new Usuariosegur();
												}													
											}
										}
									}
								}
								/*eliminar esto, cuando se establaque la solucion*/
								Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
								if(emisorCorreo != null){
									if(!ultimaListaCorreoPrueba.contains(emisorCorreo)){
										ultimaListaCorreoPrueba.add(emisorCorreo);
									}
									emisorCorreo = null;
								}
								Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
								if(correoAdministrador != null){
									ultimaListaCorreoPrueba.add(correoAdministrador);
									correoAdministrador = null;
								}
								contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);										
								try{
									if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
										emailAlerta.enviarRespuestaSolicitudBloqueoDesbloqueo(contenidoEmail);	
									}	
								}catch (Exception e) {
									log.debug("paso por el error #0"+ e.getMessage());
								}
							}
							
							
							insertarLogs(solicitud, 8);
							if(this.estadoSolicitudAnalisisAprobacion != null && this.estadoSolicitudAnalisisAprobacion.equals("B")){
								LcredEstado e = scoringService.obtenerEstado("AD");
								insertHitos(solicitud, e, "NADA", 0);
							}else if(this.estadoSolicitudAnalisisAprobacion != null  && this.estadoSolicitudAnalisisAprobacion.equals("SA")){
								insertHitos(solicitud, estado, "NADA", 0);
							}else{
								insertHitos(solicitud, estado, "NADA", 0);
							}
							entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
							             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
							entityManager.flush();
						}
						
					}else{/*solo envio de correo de la aprobacion del usuario que acaba de aprobar*/
						if(solicitud.getEstadoEvaluacion() != null && solicitud.getEstadoEvaluacion().equals("B")){
							this.mensajeGlogal = "La solicitud "+ solicitud.getId().getNumSolicitud() +" fue analizada por "+ modificarTexto(usuarioLogueado.getNombre())+".";
						}else{
							this.mensajeGlogal = "La solicitud "+ solicitud.getId().getNumSolicitud() +" fue aprobada por "+ modificarTexto(usuarioLogueado.getNombre())+".";
						}
						/*se agrega la observaciones final de una aprobacion final */
						LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
						Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							id.setCorrelativo(correlativo);
							id.setFecha(new Date());
							id.setHora(new Date());
							id.setNumSolicitud(solicitud.getId().getNumSolicitud());
							id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							id.setObservacion(this.observacionesFinales);
							id.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(id);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}
						List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
						if(listaFileUploadedDTOs != null){
							for(FileUploadedDTO archivo :listaFileUploadedDTOs){
							   try {							
									OutputStream ostream = null;
									String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
									nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);
									String url = "archivos"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
									
									
									//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
									ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
									log.debug("url #0",archivo.getUploadItem().getContentType());
									IOUtils.copyStream(ostream, istream);
									ostream.flush();
									ostream.close();
									istream.close();
									//guardar datos en la BD
									ArchivoAdjunto archivoAux = new ArchivoAdjunto();
									archivoAux.setSolicitud(solicitud);
									archivoAux.setUrl(url);
									archivoAux.setUbicacion("");
									archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
									archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
									archivoAux.setUsuario(usuarioLogueado);
									archivoAux.setFechaCreacion(new Date());
									entityManager.persist(archivoAux);
									entityManager.flush();
									
									entityManager.remove(archivo.getArchivo());
									entityManager.flush();
									
									
									
									ConceptoDTO objetoAux = new ConceptoDTO();
									objetoAux.setNombreArchivo(nombreArchivo);
									objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
									listaArchivoGuardadoResp.add(objetoAux);
									objetoAux = null;
									
								} catch (FileNotFoundException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}
								catch (IOException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}catch (Exception e) {
									e.printStackTrace();
								}							
							}		
						}							
						
						List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
						
						if(listaUsuarioCorreoagregados != null){
							/*setando los varlores del dto para el correo*/
							ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
							if(solicitud.getEstadoEvaluacion() != null && solicitud.getEstadoEvaluacion().equals("B")){
								contenidoEmail.setTituloRespuesta("An√°lisis individual solicitud");
							}else{
								contenidoEmail.setTituloRespuesta("Aprobaci√≥n individual solicitud");
								contenidoEmail.setDesicionEjecutivo("Aprobada");
							}
							contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
							contenidoEmail.setColor("VERDE");
							contenidoEmail.setAccion("Se Aprob√≥ la Solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
							contenidoEmail.setAccionRespuesta("");
							contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
							contenidoEmail.setObservacionRespuesta(this.observacionesFinales);
							contenidoEmail.setObservacionEjecutivo(this.mensajeRechazoSolicitud);
							contenidoEmail.setOpcionFinal(2);	
							contenidoEmail.setSolicitud(solicitud);
							
							
							StringBuffer rutNombre = new StringBuffer();
							rutNombre.append(cliente.getRut());
							rutNombre.append(" / ");
							rutNombre.append(modificarTexto(cliente.getRazonSocial()));
							contenidoEmail.setRutNombre(rutNombre.toString());
							contenidoEmail.setSoloNombre(cliente.getRazonSocial());
							contenidoEmail.setCanalVenta(cliente.getCanalVenta());
							contenidoEmail.setSucursal(sucursal.getDescripcion());
							UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
							if(ususarioEmisor != null){
								contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
							}else{
								contenidoEmail.setEmisor(solicitud.getCodEmisor());
							}
							
							contenidoEmail.setTipoSolicitud("Bloqueo / Desbloqueo.");
							
							if("41".equals(this.opcionBloqueoDesbloqueo)){
								contenidoEmail.setTipoBloqueoDesbloqueo("Bloqueo.");
		
							}else if("42".equals(this.opcionBloqueoDesbloqueo)){
								contenidoEmail.setTipoBloqueoDesbloqueo("Desbloqueo.");
							}
							
							contenidoEmail.setMotivoBloqueoDesbloqueo(modificarTexto(this.motivoBloDesbloqueo));
							contenidoEmail.setObservacionesBloqueoDesblorqueo(modificarTexto(this.motivoBloDesbloqueo));
							
						    /*datos de lista de archivos de ingreso y resp√∫esta */
							contenidoEmail.setListaArchivos(listaArchivoGuardado);
							contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);	
							contenidoEmail.setListaObservaciones(listaObservaciones);

							List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
							if(listaUsuarioCorreoagregados != null){
								for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
									if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !((ucdto.getUsername().trim()).toLowerCase()).equals(solicitud.getCodEmisor().trim().toLowerCase())){
										log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
										Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
										if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
											if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
												ultimaListaCorreoPrueba.add(usuarioAux);	
												usuarioAux = new Usuariosegur();
											}													
										}
									}
								}
							}
							/*eliminar esto, cuando se establaque la solucion*/
							Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
							if(emisorCorreo != null){
								ultimaListaCorreoPrueba.add(emisorCorreo);
								emisorCorreo = null;
							}
							Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
							if(correoAdministrador != null){
								ultimaListaCorreoPrueba.add(correoAdministrador);
								correoAdministrador = null;
							}
							contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);		
							try{
								if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
									emailAlerta.enviarRespuestaSolicitudBloqueoDesbloqueo(contenidoEmail);	
								}	
							}catch (Exception e) {
								log.debug("paso por el error #0"+ e.getMessage());
							}
						}
						
						
						insertarLogs(solicitud, 8);
						insertHitos(solicitud, estado, "NADA", 0);
						entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
						             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
						entityManager.flush();
					}
				}	
			}else if(this.paginaIngreso == 43){
				if(solicitud != null && solicitudOtra != null && usuarioLogueado != null){
					SolicitudUsuarioDerivada sud =  scoringService.
							getSolicitudUsuarioDerivacionForSolicitudIpPersonal(solicitud.getId().getNumSolicitud(),
									usuarioLogueado.getIdPersonal());
					if(sud != null){
						sud.setConfirmacion(true);
						sud.setEstado(estado);
						sud.setUsernameAutorizacion(usuarioLogueado.getAlias());
						exitoSud = scoringService.mergerSolicitudUsuarioDerivacion(sud);
						log.debug(exitoSud);
					}
					
					List<SolicitudUsuarioDerivada> listaVerificacion = scoringService.getSolicitudUsuarioDerivacionForSolicitudEstado(solicitud.getId().getNumSolicitud(),solicitud.getEstadoEvaluacion());
					if(listaVerificacion != null){
						cantidad = listaVerificacion.size();
						/*verificar cantidad de usuarios obligatorios debe aprobar*/
						for(SolicitudUsuarioDerivada sudAux : listaVerificacion){
							if(sudAux.getConfirmacionObligatoria() == true){
								verificadosObligados++;
							}
						}
						
						
						/*verificar la cantidad de aprobados, rechazados, la cantidad de usuarios*/
						for(SolicitudUsuarioDerivada sudAux2 : listaVerificacion){
							if(sudAux2.getEstado().getCodEstado().equals("AP")){
								aprobado++;
								if(sudAux2.getConfirmacion()){
									if(sudAux2.getConfirmacionObligatoria()){
										cantVeriObligadosAprobado++;
									}
								}
							}else if(sudAux2.getEstado().getCodEstado().equals("RP")){
								rechazado++;
								if(sudAux2.getConfirmacion()){
									if(sudAux2.getConfirmacionObligatoria()){
										cantVeriObligadosRechazado++;
									}
								}								
							}
						}
					}
					
					if(verificadosObligados == (cantVeriObligadosAprobado + cantVeriObligadosRechazado)){
						cambioEstadosolicitud = true;
					}
					if(cambioEstadosolicitud == true  && !solicitud.getEstado().equals("DR")){/*cambio de estado de la solicitud */
						
						solicitud.setEstado("DR");
						solicitud.setAnalizar(true);
						solicitudOtra.setStatusSolicitud("DR");
						
						boolean exitoUno = scoringService.mergerSolicitud(solicitud);
						boolean exitoDos = scoringService.mergerSolicitudOtrasSolicitudes(solicitudOtra);
						entityManager.refresh(solicitud);
						entityManager.refresh(solicitudOtra);
						if(exitoUno == true && exitoDos == true){
							this.mensajeGlogal = "La solicitud "+ solicitud.getId().getNumSolicitud() +" fue aprobada por "+ modificarTexto(usuarioLogueado.getNombre())+".";
							/*se agrega la observaciones final de una aprobacion final */
							LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
							Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
							if(correlativo != null){
								id.setCorrelativo(correlativo);
								id.setFecha(new Date());
								id.setHora(new Date());
								id.setNumSolicitud(solicitud.getId().getNumSolicitud());
								id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
								id.setObservacion(this.observacionesFinales);
								id.setUsuario(usuarioSegur.getAlias());
								LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
								obser.setId(id);
								scoringService.persistSolicitudObservaciones(obser);
								insertarLogs(solicitud, 5);
							}
							List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
							if(listaFileUploadedDTOs != null){
								for(FileUploadedDTO archivo :listaFileUploadedDTOs){
								   try {							
										OutputStream ostream = null;
										String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
										nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);
										String url = "archivos"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
										
										
										//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
										ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
										log.debug("url #0",archivo.getUploadItem().getContentType());
										IOUtils.copyStream(ostream, istream);
										ostream.flush();
										ostream.close();
										istream.close();
										//guardar datos en la BD
										ArchivoAdjunto archivoAux = new ArchivoAdjunto();
										archivoAux.setSolicitud(solicitud);
										archivoAux.setUrl(url);
										archivoAux.setUbicacion("");
										archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
										archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
										archivoAux.setUsuario(usuarioLogueado);
										archivoAux.setFechaCreacion(new Date());
										entityManager.persist(archivoAux);
										entityManager.flush();
										
										entityManager.remove(archivo.getArchivo());
										entityManager.flush();
										
										
										
										ConceptoDTO objetoAux = new ConceptoDTO();
										objetoAux.setNombreArchivo(nombreArchivo);
										objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
										listaArchivoGuardadoResp.add(objetoAux);
										objetoAux = null;
										
									} catch (FileNotFoundException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}
									catch (IOException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}catch (Exception e) {
										e.printStackTrace();
									}							
								}		
							}		
							
							List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
							if(listaUsuarioCorreoagregados != null){
								/*setando los varlores del dto para el correo*/
								ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
								if(solicitud.getEstadoEvaluacion() != null && solicitud.getEstadoEvaluacion().equals("B")){
									contenidoEmail.setTituloRespuesta("An√°lisis individual solicitud");
								}else{
									contenidoEmail.setTituloRespuesta("Aprobaci√≥n individual solicitud");
									contenidoEmail.setDesicionEjecutivo("Aprobada");
								}
								contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
								contenidoEmail.setColor("VERDE");
								contenidoEmail.setAccion("Se Aprob√≥ la Solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
								contenidoEmail.setAccionRespuesta("");
								contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
								contenidoEmail.setObservacionRespuesta(this.observacionesFinales);
								contenidoEmail.setObservacionEjecutivo(null);
								contenidoEmail.setOpcionFinal(2);	
								contenidoEmail.setSolicitud(solicitud);
								
								
								StringBuffer rutNombre = new StringBuffer();
								rutNombre.append(cliente.getRut());
								rutNombre.append(" / ");
								rutNombre.append(modificarTexto(cliente.getRazonSocial()));
								contenidoEmail.setRutNombre(rutNombre.toString());
								contenidoEmail.setSoloNombre(cliente.getRazonSocial());
								contenidoEmail.setCanalVenta(cliente.getCanalVenta());
								contenidoEmail.setSucursal(sucursal.getDescripcion());
								
								UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
								if(ususarioEmisor != null){
									contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
								}else{
									contenidoEmail.setEmisor(solicitud.getCodEmisor());
								}
								
								contenidoEmail.setTipoSolicitud("Bloqueo / Desbloqueo.");
								
								if("41".equals(this.opcionBloqueoDesbloqueo)){
									contenidoEmail.setTipoBloqueoDesbloqueo("Bloqueo.");
			
								}else if("42".equals(this.opcionBloqueoDesbloqueo)){
									contenidoEmail.setTipoBloqueoDesbloqueo("Desbloqueo.");
								}
								
								contenidoEmail.setMotivoBloqueoDesbloqueo(this.motivoBloDesbloqueo);
								contenidoEmail.setObservacionesBloqueoDesblorqueo(this.motivoBloDesbloqueo);
								
							    /*datos de condiciones */
								contenidoEmail.setListaArchivos(listaArchivoGuardado);
								contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);							
								contenidoEmail.setListaObservaciones(listaObservaciones);
								
								List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
								if(listaUsuarioCorreoagregados != null){
									for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
										if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !((ucdto.getUsername().trim()).toLowerCase()).equals(solicitud.getCodEmisor().trim().toLowerCase())){
											log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
												if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
													ultimaListaCorreoPrueba.add(usuarioAux);	
													usuarioAux = new Usuariosegur();
												}													
											}
										}
									}
								}
								/*eliminar esto, cuando se establaque la solucion*/
								Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
								if(emisorCorreo != null){
									ultimaListaCorreoPrueba.add(emisorCorreo);
									emisorCorreo = null;
								}
								Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
								if(correoAdministrador != null){
									ultimaListaCorreoPrueba.add(correoAdministrador);
									correoAdministrador = null;
								}
								contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);										
								
								try{
									if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
										emailAlerta.enviarSolicitudRespuestaDm(contenidoEmail);	
									}	
								}catch (Exception e) {
									log.debug("paso por el error #0"+ e.getMessage());
								}
							}
							
							
							insertarLogs(solicitud, 8);
							
							if(this.estadoSolicitudAnalisisAprobacion != null && this.estadoSolicitudAnalisisAprobacion.equals("B")){
								LcredEstado e = scoringService.obtenerEstado("AD");
								insertHitos(solicitud, e, "NADA", 0);
							}else if(this.estadoSolicitudAnalisisAprobacion != null  && this.estadoSolicitudAnalisisAprobacion.equals("SA")){
								insertHitos(solicitud, estado, "NADA", 0);
							}else{
								insertHitos(solicitud, estado, "NADA", 0);
							}							
							entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
							             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
							entityManager.flush();
						}
						
					}else{/*solo envio de correo de la aprobacion del usuario que acaba de aprobar*/
						if(solicitud.getEstadoEvaluacion() != null && solicitud.getEstadoEvaluacion().equals("B")){
							this.mensajeGlogal = "La solicitud "+ solicitud.getId().getNumSolicitud() +" fue analizada por "+ modificarTexto(usuarioLogueado.getNombre())+".";
						}else{
							this.mensajeGlogal = "La solicitud "+ solicitud.getId().getNumSolicitud() +" fue aprobada por "+ modificarTexto(usuarioLogueado.getNombre())+".";
							
						}
						/*se agrega la observaciones final de una aprobacion final */
						LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
						Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							id.setCorrelativo(correlativo);
							id.setFecha(new Date());
							id.setHora(new Date());
							id.setNumSolicitud(solicitud.getId().getNumSolicitud());
							id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							id.setObservacion(this.observacionesFinales);
							id.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(id);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}
						List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
						if(listaFileUploadedDTOs != null){
							for(FileUploadedDTO archivo :listaFileUploadedDTOs){
							   try {							
									OutputStream ostream = null;
									String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
									nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);
									String url = "archivos"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
									
									
									//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
									ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
									log.debug("url #0",archivo.getUploadItem().getContentType());
									IOUtils.copyStream(ostream, istream);
									ostream.flush();
									ostream.close();
									istream.close();
									//guardar datos en la BD
									ArchivoAdjunto archivoAux = new ArchivoAdjunto();
									archivoAux.setSolicitud(solicitud);
									archivoAux.setUrl(url);
									archivoAux.setUbicacion("");
									archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
									archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
									archivoAux.setUsuario(usuarioLogueado);
									archivoAux.setFechaCreacion(new Date());
									entityManager.persist(archivoAux);
									entityManager.flush();
									
									entityManager.remove(archivo.getArchivo());
									entityManager.flush();
									
									
									
									ConceptoDTO objetoAux = new ConceptoDTO();
									objetoAux.setNombreArchivo(nombreArchivo);
									objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
									listaArchivoGuardadoResp.add(objetoAux);
									objetoAux = null;
									
								} catch (FileNotFoundException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}
								catch (IOException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}catch (Exception e) {
									e.printStackTrace();
								}							
							}		
						}	
						List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
						if(listaUsuarioCorreoagregados != null){
							/*setando los varlores del dto para el correo*/
							ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
							if(solicitud.getEstadoEvaluacion() != null && solicitud.getEstadoEvaluacion().equals("B")){
								contenidoEmail.setTituloRespuesta("An√°lisis individual solicitud");
							}else{
								contenidoEmail.setTituloRespuesta("Aprobaci√≥n individual solicitud");
								contenidoEmail.setDesicionEjecutivo("Aprobada");
							}
							contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
							contenidoEmail.setColor("VERDE");
							contenidoEmail.setAccion("Se Aprob√≥ la Solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
							contenidoEmail.setAccionRespuesta("");
							contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
							contenidoEmail.setObservacionRespuesta(this.observacionesFinales);
							contenidoEmail.setObservacionEjecutivo(null);
							contenidoEmail.setOpcionFinal(2);	
							contenidoEmail.setSolicitud(solicitud);
							
							
							StringBuffer rutNombre = new StringBuffer();
							rutNombre.append(cliente.getRut());
							rutNombre.append(" / ");
							rutNombre.append(modificarTexto(cliente.getRazonSocial()));
							contenidoEmail.setRutNombre(rutNombre.toString());
							contenidoEmail.setSoloNombre(cliente.getRazonSocial());
							contenidoEmail.setCanalVenta(cliente.getCanalVenta());
							contenidoEmail.setSucursal(sucursal.getDescripcion());
							UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
							if(ususarioEmisor != null){
								contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
							}else{
								contenidoEmail.setEmisor(solicitud.getCodEmisor());
							}
							
							
							contenidoEmail.setTipoSolicitud("Creacion de DM");
							contenidoEmail.setTipoDM("DM");
							
							
						    /*datos de archivos */
							contenidoEmail.setListaArchivos(listaArchivoGuardado);
							contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
							
							/*datos de los DMS*/
							List<CreacionDmDTO> listaDms = new ArrayList<CreacionDmDTO>(0);
							CreacionDmDTO obejtoDm =  null;
							for(LcredSolicitudDm docto : listaClienteDMs){
								if(docto != null){
								   obejtoDm = new CreacionDmDTO();
								   obejtoDm.setRut(docto.getId().getRut());
								   obejtoDm.setNombre(docto.getId().getNombre());
								   obejtoDm.setOficinaVentas(docto.getId().getOficinaVentas());
								   obejtoDm.setZona(docto.getId().getZona());
								   obejtoDm.setListaPrecio(docto.getId().getListaPrecio());
								   obejtoDm.setSector(docto.getId().getSector());
								   obejtoDm.setVendTelefono(docto.getId().getVendTelefono());
								   obejtoDm.setVendTerreno(docto.getId().getVendTerreno());
								   obejtoDm.setCobrador(docto.getId().getCobrador());
								   obejtoDm.setCondExpedicion(docto.getId().getCondExpedicion());
								   obejtoDm.setCondPago(docto.getId().getCondPago());
								   listaDms.add(obejtoDm);
								}
							}
					
							contenidoEmail.setListaCreacionDM(listaDms);
							
						    /*datos de bloqueo y desbloqueo */
							contenidoEmail.setListaArchivos(listaArchivoGuardado);
							contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);	
							contenidoEmail.setListaObservaciones(listaObservaciones);

							List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
							if(listaUsuarioCorreoagregados != null){
								for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
									if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !((ucdto.getUsername().trim()).toLowerCase()).equals(solicitud.getCodEmisor().trim().toLowerCase())){
										log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
										Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
										if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
											if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
												ultimaListaCorreoPrueba.add(usuarioAux);	
												usuarioAux = new Usuariosegur();
											}													
										}
									}
								}
							}
							/*eliminar esto, cuando se establaque la solucion*/
							Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
							if(emisorCorreo != null){
								ultimaListaCorreoPrueba.add(emisorCorreo);
								emisorCorreo = null;
							}
							Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
							if(correoAdministrador != null){
								ultimaListaCorreoPrueba.add(correoAdministrador);
								correoAdministrador = null;
							}
							contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);		
							
							try{
								if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
									emailAlerta.enviarSolicitudRespuestaDm(contenidoEmail);	
								}	
							}catch (Exception e) {
								log.debug("paso por el error #0"+ e.getMessage());
							}
						}
						
						
						insertarLogs(solicitud, 8);
						insertHitos(solicitud, estado, "NADA", 0);
						entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
						             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
						entityManager.flush();
					}
				}	
			}else if(this.paginaIngreso == 44){
				if(solicitud != null && solicitudOtra != null && usuarioLogueado != null){
					Locale locale = new Locale("es","CL");
					NumberFormat numberFormatter;
					numberFormatter = NumberFormat.getNumberInstance(locale);	
					SolicitudUsuarioDerivada sud =  scoringService.
							getSolicitudUsuarioDerivacionForSolicitudIpPersonal(solicitud.getId().getNumSolicitud(),
									usuarioLogueado.getIdPersonal());
					if(sud != null){
						sud.setConfirmacion(true);
						sud.setEstado(estado);
						sud.setUsernameAutorizacion(usuarioLogueado.getAlias());
						exitoSud = scoringService.mergerSolicitudUsuarioDerivacion(sud);
						log.debug(exitoSud);
					}
					
					List<SolicitudUsuarioDerivada> listaVerificacion = scoringService.getSolicitudUsuarioDerivacionForSolicitudEstado(solicitud.getId().getNumSolicitud(),solicitud.getEstadoEvaluacion());
					if(listaVerificacion != null){
						cantidad = listaVerificacion.size();
						/*verificar cantidad de usuarios obligatorios debe aprobar*/
						for(SolicitudUsuarioDerivada sudAux : listaVerificacion){
							if(sudAux.getConfirmacionObligatoria() == true){
								verificadosObligados++;
							}
						}
						
						
						/*verificar la cantidad de aprobados, rechazados, la cantidad de usuarios*/
						for(SolicitudUsuarioDerivada sudAux2 : listaVerificacion){
							if(sudAux2.getEstado().getCodEstado().equals("AP")){
								aprobado++;
								if(sudAux2.getConfirmacion()){
									if(sudAux2.getConfirmacionObligatoria()){
										cantVeriObligadosAprobado++;
									}
								}
							}else if(sudAux2.getEstado().getCodEstado().equals("RP")){
								rechazado++;
								if(sudAux2.getConfirmacion()){
									if(sudAux2.getConfirmacionObligatoria()){
										cantVeriObligadosRechazado++;
									}
								}								
							}
						}
					}
					
					if(verificadosObligados == (cantVeriObligadosAprobado + cantVeriObligadosRechazado)){
						cambioEstadosolicitud = true;
					}
					if(cambioEstadosolicitud == true  && !solicitud.getEstado().equals("DR")){/*cambio de estado de la solicitud */
						
						solicitud.setEstado("DR");
						solicitud.setAnalizar(true);
						solicitudOtra.setStatusSolicitud("DR");
						
						boolean exitoUno = scoringService.mergerSolicitud(solicitud);
						boolean exitoDos = scoringService.mergerSolicitudOtrasSolicitudes(solicitudOtra);
						entityManager.refresh(solicitud);
						entityManager.refresh(solicitudOtra);
						if(exitoUno == true && exitoDos == true){
							if(solicitud.getEstadoEvaluacion() != null && solicitud.getEstadoEvaluacion().equals("B")){
								this.mensajeGlogal = "La solicitud "+ solicitud.getId().getNumSolicitud() +" fue analizada por "+ modificarTexto(usuarioLogueado.getNombre())+".";
							}else{
								this.mensajeGlogal = "La solicitud "+ solicitud.getId().getNumSolicitud() +" fue aprobada por "+ modificarTexto(usuarioLogueado.getNombre())+".";
								
							}
							/*se agrega la observaciones final de una aprobacion final */
							LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
							Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
							if(correlativo != null){
								id.setCorrelativo(correlativo);
								id.setFecha(new Date());
								id.setHora(new Date());
								id.setNumSolicitud(solicitud.getId().getNumSolicitud());
								id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
								id.setObservacion(this.observacionesFinales);
								id.setUsuario(usuarioSegur.getAlias());
								LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
								obser.setId(id);
								scoringService.persistSolicitudObservaciones(obser);
								insertarLogs(solicitud, 5);
							}
							List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
							if(listaFileUploadedDTOs != null){
								for(FileUploadedDTO archivo :listaFileUploadedDTOs){
								   try {							
										OutputStream ostream = null;
										String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
										nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);
										String url = "archivos"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
										
										
										//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
										ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
										log.debug("url #0",archivo.getUploadItem().getContentType());
										IOUtils.copyStream(ostream, istream);
										ostream.flush();
										ostream.close();
										istream.close();
										//guardar datos en la BD
										ArchivoAdjunto archivoAux = new ArchivoAdjunto();
										archivoAux.setSolicitud(solicitud);
										archivoAux.setUrl(url);
										archivoAux.setUbicacion("");
										archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
										archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
										archivoAux.setUsuario(usuarioLogueado);
										archivoAux.setFechaCreacion(new Date());
										entityManager.persist(archivoAux);
										entityManager.flush();
										
										entityManager.remove(archivo.getArchivo());
										entityManager.flush();
										
										
										
										ConceptoDTO objetoAux = new ConceptoDTO();
										objetoAux.setNombreArchivo(nombreArchivo);
										objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
										listaArchivoGuardadoResp.add(objetoAux);
										objetoAux = null;
										
									} catch (FileNotFoundException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}
									catch (IOException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}catch (Exception e) {
										e.printStackTrace();
									}							
								}		
							}	
							List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
							if(listaUsuarioCorreoagregados != null){
								/*setando los varlores del dto para el correo*/
								ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
								if(solicitud.getEstadoEvaluacion() != null && solicitud.getEstadoEvaluacion().equals("B")){
									contenidoEmail.setTituloRespuesta("An√°lisis individual solicitud");
								}else{
									contenidoEmail.setTituloRespuesta("Aprobaci√≥n individual solicitud");
									contenidoEmail.setDesicionEjecutivo("Aprobada");
								}
								contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
								contenidoEmail.setColor("VERDE");
								contenidoEmail.setAccion("Se Aprob√≥ la Solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
								contenidoEmail.setAccionRespuesta("");
								contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
								contenidoEmail.setObservacionRespuesta(this.observacionesFinales);
								contenidoEmail.setObservacionEjecutivo(null);
								contenidoEmail.setOpcionFinal(2);	
								contenidoEmail.setSolicitud(solicitud);
								
								
								StringBuffer rutNombre = new StringBuffer();
								rutNombre.append(cliente.getRut());
								rutNombre.append(" / ");
								rutNombre.append(modificarTexto(cliente.getRazonSocial()));
								contenidoEmail.setRutNombre(rutNombre.toString());
								contenidoEmail.setSoloNombre(cliente.getRazonSocial());
								contenidoEmail.setCanalVenta(cliente.getCanalVenta());
								contenidoEmail.setSucursal(sucursal.getDescripcion());
								
								UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
								if(ususarioEmisor != null){
									contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
								}else{
									contenidoEmail.setEmisor(solicitud.getCodEmisor());
								}

								/* creacion de lista */
								List<ProrrogaDTO> listaProrrogasAux = new ArrayList<ProrrogaDTO>(0);
								ProrrogaDTO obejtoProrroga =  null;
								for(LcredSolicitudProrroga docto : listaProrrogas){
									if(docto != null){
									   obejtoProrroga = new ProrrogaDTO();
									   obejtoProrroga.setNumeroDocto(docto.getId().getNroCheque());
									   obejtoProrroga.setMontoFormateado(numberFormatter.format(docto.getId().getMonto()));
									   obejtoProrroga.setMotivoProrroga(this.motivoProrroga);
									   obejtoProrroga.setFechaVencicmiento(docto.getId().getVencActual());
									   obejtoProrroga.setFechaSolicitado(docto.getId().getVencNuevo());
									   listaProrrogasAux.add(obejtoProrroga);
									}
								}									
								
								
								Sucursal suc = obtenerObjetoSucursal(solicitud.getCodSucursal());
								if(suc != null){
									contenidoEmail.setSucursal(suc.getDescripcion());
								}else{
									contenidoEmail.setSucursal(solicitud.getCodSucursal());
								}
								
							
								contenidoEmail.setTipoSolicitud("Prorroga de Cheque");
								contenidoEmail.setTipoProrroga("Prorroga.");
								contenidoEmail.setMotivoProrroga(this.motivoProrroga);
								
								
							    /*datos de archivos */
								contenidoEmail.setListaArchivos(listaArchivoGuardado);
								contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
								contenidoEmail.setListaObservaciones(listaObservaciones);
								
								/*datos de prorrogas*/
								contenidoEmail.setListaProrrogas(listaProrrogasAux);

								List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
								if(listaUsuarioCorreoagregados != null){
									for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
										if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !((ucdto.getUsername().trim()).toLowerCase()).equals(solicitud.getCodEmisor().trim().toLowerCase())){
											log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
												if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
													ultimaListaCorreoPrueba.add(usuarioAux);	
													usuarioAux = new Usuariosegur();
												}													
											}
										}
									}
								}
								/*eliminar esto, cuando se establaque la solucion*/
								Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
								if(emisorCorreo != null){
									ultimaListaCorreoPrueba.add(emisorCorreo);
									emisorCorreo = null;
								}
								Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
								if(correoAdministrador != null){
									ultimaListaCorreoPrueba.add(correoAdministrador);
									correoAdministrador = null;
								}
								contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);										
								
								try{
									if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
										emailAlerta.enviarSolicitudRespuestaProrroga(contenidoEmail);	
									}	
								}catch (Exception e) {
									log.debug("paso por el error #0"+ e.getMessage());
								}
							}
							
							
							insertarLogs(solicitud, 8);
							if(this.estadoSolicitudAnalisisAprobacion != null && this.estadoSolicitudAnalisisAprobacion.equals("B")){
								LcredEstado e = scoringService.obtenerEstado("AD");
								insertHitos(solicitud, e, "NADA", 0);
							}else if(this.estadoSolicitudAnalisisAprobacion != null  && this.estadoSolicitudAnalisisAprobacion.equals("SA")){
								insertHitos(solicitud, estado, "NADA", 0);
							}else{
								insertHitos(solicitud, estado, "NADA", 0);
							}
							entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
							             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
							entityManager.flush();
						}
						
					}else{/*solo envio de correo de la aprobacion del usuario que acaba de aprobar*/
						if(solicitud.getEstadoEvaluacion() != null && solicitud.getEstadoEvaluacion().equals("B")){
							this.mensajeGlogal = "La solicitud "+ solicitud.getId().getNumSolicitud() +" fue analizada por "+ modificarTexto(usuarioLogueado.getNombre())+".";
						}else{
							this.mensajeGlogal = "La solicitud "+ solicitud.getId().getNumSolicitud() +" fue aprobada por "+ modificarTexto(usuarioLogueado.getNombre())+".";
						}
						/*se agrega la observaciones final de una aprobacion final */
						LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
						Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							id.setCorrelativo(correlativo);
							id.setFecha(new Date());
							id.setHora(new Date());
							id.setNumSolicitud(solicitud.getId().getNumSolicitud());
							id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							id.setObservacion(this.observacionesFinales);
							id.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(id);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}
						List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
						if(listaFileUploadedDTOs != null){
							for(FileUploadedDTO archivo :listaFileUploadedDTOs){
							   try {							
									OutputStream ostream = null;
									String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
									nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);
									String url = "archivos"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
									
									
									//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
									ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
									log.debug("url #0",archivo.getUploadItem().getContentType());
									IOUtils.copyStream(ostream, istream);
									ostream.flush();
									ostream.close();
									istream.close();
									//guardar datos en la BD
									ArchivoAdjunto archivoAux = new ArchivoAdjunto();
									archivoAux.setSolicitud(solicitud);
									archivoAux.setUrl(url);
									archivoAux.setUbicacion("");
									archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
									archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
									archivoAux.setUsuario(usuarioLogueado);
									archivoAux.setFechaCreacion(new Date());
									entityManager.persist(archivoAux);
									entityManager.flush();
									
									entityManager.remove(archivo.getArchivo());
									entityManager.flush();
									
									
									
									ConceptoDTO objetoAux = new ConceptoDTO();
									objetoAux.setNombreArchivo(nombreArchivo);
									objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
									listaArchivoGuardadoResp.add(objetoAux);
									objetoAux = null;
									
								} catch (FileNotFoundException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}
								catch (IOException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}catch (Exception e) {
									e.printStackTrace();
								}							
							}		
						}	
						List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
						if(listaUsuarioCorreoagregados != null){
							/*setando los varlores del dto para el correo*/
							ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
							if(solicitud.getEstadoEvaluacion() != null && solicitud.getEstadoEvaluacion().equals("B")){
								contenidoEmail.setTituloRespuesta("An√°lisis individual solicitud");
							}else{
								contenidoEmail.setTituloRespuesta("Aprobaci√≥n individual solicitud");
								contenidoEmail.setDesicionEjecutivo("Aprobada");
							}
							contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
							contenidoEmail.setColor("VERDE");
							contenidoEmail.setAccion("Se Aprob√≥ la Solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
							contenidoEmail.setAccionRespuesta("");
							contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
							contenidoEmail.setObservacionRespuesta(this.observacionesFinales);
							contenidoEmail.setObservacionEjecutivo(null);
							contenidoEmail.setOpcionFinal(2);	
							contenidoEmail.setSolicitud(solicitud);
							
							
							StringBuffer rutNombre = new StringBuffer();
							rutNombre.append(cliente.getRut());
							rutNombre.append(" / ");
							rutNombre.append(modificarTexto(cliente.getRazonSocial()));
							contenidoEmail.setRutNombre(rutNombre.toString());
							contenidoEmail.setSoloNombre(cliente.getRazonSocial());
							contenidoEmail.setCanalVenta(cliente.getCanalVenta());
							contenidoEmail.setSucursal(sucursal.getDescripcion());
							contenidoEmail.setEmisor(modificarTexto(usuarioLogueado.getNombre()));

							/* creacion de lista */
							List<ProrrogaDTO> listaProrrogasAux = new ArrayList<ProrrogaDTO>(0);
							ProrrogaDTO obejtoProrroga =  null;
							for(LcredSolicitudProrroga docto : listaProrrogas){
								if(docto != null){
								   obejtoProrroga = new ProrrogaDTO();
								   obejtoProrroga.setNumeroDocto(docto.getId().getNroCheque());
								   obejtoProrroga.setMontoFormateado(numberFormatter.format(docto.getId().getMonto()));
								   obejtoProrroga.setMotivoProrroga(this.motivoProrroga);
								   obejtoProrroga.setFechaVencicmiento(docto.getId().getVencActual());
								   obejtoProrroga.setFechaSolicitado(docto.getId().getVencNuevo());
								   listaProrrogasAux.add(obejtoProrroga);
								}
							}									
							
							
							Sucursal suc = obtenerObjetoSucursal(solicitud.getCodSucursal());
							if(suc != null){
								contenidoEmail.setSucursal(suc.getDescripcion());
							}else{
								contenidoEmail.setSucursal(solicitud.getCodSucursal());
							}
							
							UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
							if(ususarioEmisor != null){
								contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
							}else{
								contenidoEmail.setEmisor(solicitud.getCodEmisor());
							}	
							
							contenidoEmail.setTipoSolicitud("Prorroga de Cheque");
							contenidoEmail.setTipoProrroga("Prorroga.");
							contenidoEmail.setMotivoProrroga(this.motivoProrroga);
							
							
						    /*datos de archivos */
							contenidoEmail.setListaArchivos(listaArchivoGuardado);
							contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
							contenidoEmail.setListaObservaciones(listaObservaciones);
							
							/*datos de prorrogas*/
							contenidoEmail.setListaProrrogas(listaProrrogasAux);

							List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
							if(listaUsuarioCorreoagregados != null){
								for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
									if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !((ucdto.getUsername().trim()).toLowerCase()).equals(solicitud.getCodEmisor().trim().toLowerCase())){
										log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
										Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
										if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
											if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
												ultimaListaCorreoPrueba.add(usuarioAux);	
												usuarioAux = new Usuariosegur();
											}													
										}
									}
								}
							}	
							/*eliminar esto, cuando se establaque la solucion*/
							Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
							if(emisorCorreo != null){
								ultimaListaCorreoPrueba.add(emisorCorreo);
								emisorCorreo = null;
							}
							Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
							if(correoAdministrador != null){
								ultimaListaCorreoPrueba.add(correoAdministrador);
								correoAdministrador = null;
							}
							contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);									
							
							
							try{
								if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
									emailAlerta.enviarSolicitudRespuestaProrroga(contenidoEmail);	
								}	
							}catch (Exception e) {
								log.debug("paso por el error #0"+ e.getMessage());
							}
						}
						
						
						insertarLogs(solicitud, 8);
						insertHitos(solicitud, estado, "NADA", 0);
						entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
						             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
						entityManager.flush();
					}
				}	
			}
		}catch (Exception e) {
			log.error("Error al devolver la solicitud #0", e.getMessage());
		}
		
		return "volverPaginaSolicitud";		
	}
	public void salirAprobarSolicitudDerivada(){
		  log.debug("salir del pop.");	
		  if(this.salirDelMensaje == false){
			  this.salirDelMensaje = true;
		  }
	}	
	public void ingresoRechazoSolicitudDerivada(){
		this.setMotivoRechazo(null);
		this.mensajeGlogal = null;
		this.listaMotivosRechazosAgregados = new ArrayList<LcredMotivoRechazo>(0);
		if(this.listaMotivosRechazos == null){
			this.listaMotivosRechazos = scoringService.getMotivosRechazos();
		}
		
		if(this.observacionesFinales == null){
			this.mensajeGlogal = "Debe ingresar Observaciones finales.";
			return;				
		}else{
			if("".equals(this.observacionesFinales)){
				this.mensajeGlogal = "Debe ingresar Observaciones finales.";
				return;				
				
			}
		}
		
	}
	public void rechazarSolicitudesDerivada(){
		try{
			LcredEstado estado = scoringService.obtenerEstado("RP");
			boolean exitoSud = false;
			int cantidad = 0;
			int aprobado = 0;
			int rechazado= 0;
			int verificadosObligados = 0;
			int cantVeriObligadosAprobado = 0;
			int cantVeriObligadosRechazado = 0;
			boolean cambioEstadosolicitud = false;
			if(this.paginaIngreso == 11 || this.paginaIngreso == 12){
				if(solicitud != null && venta != null && usuarioLogueado != null){
					SolicitudUsuarioDerivada sud =  scoringService.
							getSolicitudUsuarioDerivacionForSolicitudIpPersonal(solicitud.getId().getNumSolicitud(),
									usuarioLogueado.getIdPersonal());
					if(sud != null){
						sud.setConfirmacion(true);
						sud.setEstado(estado);
						sud.setUsernameAutorizacion(usuarioLogueado.getAlias());
						exitoSud = scoringService.mergerSolicitudUsuarioDerivacion(sud);
						log.debug(exitoSud);
					}
					
					List<SolicitudUsuarioDerivada> listaVerificacion = scoringService.getSolicitudUsuarioDerivacionForSolicitudEstado(solicitud.getId().getNumSolicitud(),solicitud.getEstadoEvaluacion());
					if(listaVerificacion != null){
						cantidad = listaVerificacion.size();
						/*verificar cantidad de usuarios obligatorios debe aprobar*/
						for(SolicitudUsuarioDerivada sudAux : listaVerificacion){
							if(sudAux.getConfirmacionObligatoria() == true){
								verificadosObligados++;
							}
						}
						
						
						/*verificar la cantidad de aprobados, rechazados, la cantidad de usuarios*/
						for(SolicitudUsuarioDerivada sudAux2 : listaVerificacion){
							if(sudAux2.getEstado().getCodEstado().equals("AP")){
								aprobado++;
								if(sudAux2.getConfirmacion()){
									if(sudAux2.getConfirmacionObligatoria()){
										cantVeriObligadosAprobado++;
									}
								}
							}else if(sudAux2.getEstado().getCodEstado().equals("RP")){
								rechazado++;
								if(sudAux2.getConfirmacion()){
									if(sudAux2.getConfirmacionObligatoria()){
										cantVeriObligadosRechazado++;
									}
								}								
							}
						}
					}
					
					if(verificadosObligados == (cantVeriObligadosAprobado + cantVeriObligadosRechazado)){
						cambioEstadosolicitud = true;
					}
					if(cambioEstadosolicitud == true  && !solicitud.getEstado().equals("DR")){/*cambio de estado de la solicitud */
						
						solicitud.setEstado("DR");
						solicitud.setAnalizar(true);
						venta.setStatusSolicitud("DR");
						
						boolean exitoUno = scoringService.mergerSolicitud(solicitud);
						boolean exitoDos = scoringService.mergerSolicitudVentaPuntual(venta);
						entityManager.refresh(solicitud);
						entityManager.refresh(venta);
						if(exitoUno == true && exitoDos == true){
							this.mensajeGlogal = "La solicitud "+ solicitud.getId().getNumSolicitud() +" fue rechazada por "+ modificarTexto(usuarioLogueado.getNombre())+".";
							/*se agrega la observaciones final de una aprobacion final */
							LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
							Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
							if(correlativo != null){
								id.setCorrelativo(correlativo);
								id.setFecha(new Date());
								id.setHora(new Date());
								id.setNumSolicitud(solicitud.getId().getNumSolicitud());
								id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
								id.setObservacion(this.observacionesFinales);
								id.setUsuario(usuarioSegur.getAlias());
								LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
								obser.setId(id);
								scoringService.persistSolicitudObservaciones(obser);
								insertarLogs(solicitud, 5);
							}
							List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
							if(listaFileUploadedDTOs != null){
								for(FileUploadedDTO archivo :listaFileUploadedDTOs){
								   try {							
										OutputStream ostream = null;
										String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
										nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);
										String url = "archivos"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
										
										
										//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
										ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
										log.debug("url #0",archivo.getUploadItem().getContentType());
										IOUtils.copyStream(ostream, istream);
										ostream.flush();
										ostream.close();
										istream.close();
										//guardar datos en la BD
										ArchivoAdjunto archivoAux = new ArchivoAdjunto();
										archivoAux.setSolicitud(solicitud);
										archivoAux.setUrl(url);
										archivoAux.setUbicacion("");
										archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
										archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
										archivoAux.setUsuario(usuarioLogueado);
										archivoAux.setFechaCreacion(new Date());
										entityManager.persist(archivoAux);
										entityManager.flush();
										
										entityManager.remove(archivo.getArchivo());
										entityManager.flush();
										
										
										
										ConceptoDTO objetoAux = new ConceptoDTO();
										objetoAux.setNombreArchivo(nombreArchivo);
										objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
										listaArchivoGuardadoResp.add(objetoAux);
										objetoAux = null;
										
									} catch (FileNotFoundException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}
									catch (IOException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}catch (Exception e) {
										e.printStackTrace();
									}							
								}		
							}							
							
							List<ConceptoDTO> lista = scoringService.getConceptoMonto(solicitud.getId().getNumSolicitud());
							List<ConceptoDTO> listaProducto = scoringService.getProductos(solicitud.getId().getNumSolicitud());
							List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
							if(listaUsuarioCorreoagregados != null){
								Locale locale = new Locale("es","CL");
								/*setando los varlores del dto para el correo*/
								ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
								contenidoEmail.setTituloRespuesta("Rechazo individual solicitud ");
								contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
								contenidoEmail.setColor("ROJO");
								contenidoEmail.setAccion("Se Rechazo la Solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
								contenidoEmail.setAccionRespuesta("");
								contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
								contenidoEmail.setObservacionRespuesta(this.observacionesFinales);
								contenidoEmail.setObservacionEjecutivo(null);
								contenidoEmail.setOpcionFinal(2);	
								contenidoEmail.setSolicitud(solicitud);
								NumberFormat numberFormatter;
								StringBuffer rutNombre = new StringBuffer();
								rutNombre.append(cliente.getRut());
								rutNombre.append(" / ");
								rutNombre.append(modificarTexto(cliente.getRazonSocial()));
								contenidoEmail.setRutNombre(rutNombre.toString());
								contenidoEmail.setSoloNombre(cliente.getRazonSocial());
								contenidoEmail.setCanalVenta(cliente.getCanalVenta());
								contenidoEmail.setSucursal(sucursal.getDescripcion());
								
								UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
								if(ususarioEmisor != null){
									contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
								}else{
									contenidoEmail.setEmisor(solicitud.getCodEmisor());
								}
								
								contenidoEmail.setTipoSolicitud("Venta Puntual");
								contenidoEmail.setTipoVentas(modificarTexto(tipoSolicitudAux.getDesTipoSolicitud()));
								
								numberFormatter = NumberFormat.getNumberInstance(locale);
								log.debug(numberFormatter.format(venta.getMontoInicial()));
								
								contenidoEmail.setMontoMasIva(numberFormatter.format(venta.getMontoInicial()));
								contenidoEmail.setMontoPie(numberFormatter.format(venta.getMontoPieInicial()));
								contenidoEmail.setMargenNegocio(String.valueOf(numberFormatter.format(this.margenGlogal)));
								contenidoEmail.setFormaPago(this.formaPago);
								contenidoEmail.setMotivoCompra(this.motivoCompra);
								contenidoEmail.setMontoMasIvaAprobado(numberFormatter.format(this.montoNuevo));
								contenidoEmail.setMontoPieAprobado(numberFormatter.format(this.pieNuevo));	
								

								if("VIG".equals(cliente.getVigenciaSeguro().trim())){
									contenidoEmail.setLineaSeguro(numberFormatter.format(cliente.getMontoSeguro()));
								}else{
									contenidoEmail.setLineaSeguro(numberFormatter.format(0));
								}								
								contenidoEmail.setCoberturaSeguro(numberFormatter.format(expoRiesgoKh.getMontoAsegurado()));
								contenidoEmail.setPeakCredito(numberFormatter.format(expoRiesgoKh.getPeakCredito()));
								contenidoEmail.setRisgoKupfer(numberFormatter.format(expoRiesgoKh.getMontoRiesgoKupfer()));
								contenidoEmail.setListaProductos(listaProducto);
								contenidoEmail.setListaConceptoMontos(lista);
								contenidoEmail.setListaArchivos(listaArchivoGuardado);
								contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
								contenidoEmail.setListaObservaciones(listaObservaciones);
								
								List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
								if(listaUsuarioCorreoagregados != null){
									for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
										if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !((ucdto.getUsername().trim()).toLowerCase()).equals(solicitud.getCodEmisor().trim().toLowerCase())){
											log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
												if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
													ultimaListaCorreoPrueba.add(usuarioAux);	
													usuarioAux = new Usuariosegur();
												}													
											}
										}
									}
								}	
								/*eliminar esto, cuando se establaque la solucion*/
								Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
								if(emisorCorreo != null){
									if(!ultimaListaCorreoPrueba.contains(emisorCorreo)){
										ultimaListaCorreoPrueba.add(emisorCorreo);
									}
									emisorCorreo = null;
								}
								Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
								if(correoAdministrador != null){
									ultimaListaCorreoPrueba.add(correoAdministrador);
									correoAdministrador = null;
								}								
								contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);										
								
								try{
									if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
										emailAlerta.enviarRespuestaSolicitudVenta(contenidoEmail);	
									}	
								}catch (Exception e) {
									log.debug("paso por el error #0"+ e.getMessage());
								}
							}
							
							insertarLogs(solicitud, 11);
							insertHitos(solicitud, estado, "NADA", 0);
							entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
							             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
							entityManager.flush();
						}
						
					}else{/*solo envio de correo de la aprobacion del usuario que acaba de aprobar*/

						this.mensajeGlogal = "La solicitud "+ solicitud.getId().getNumSolicitud() +" fue rechazada por "+ modificarTexto(usuarioLogueado.getNombre())+".";
						/*se agrega la observaciones final de una aprobacion final */
						LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
						Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							id.setCorrelativo(correlativo);
							id.setFecha(new Date());
							id.setHora(new Date());
							id.setNumSolicitud(solicitud.getId().getNumSolicitud());
							id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							id.setObservacion(this.observacionesFinales);
							id.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(id);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}
						List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
						if(listaFileUploadedDTOs != null){
							for(FileUploadedDTO archivo :listaFileUploadedDTOs){
							   try {							
									OutputStream ostream = null;
									String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
									nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);
									String url = "archivos"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
									
									
									//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
									ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
									log.debug("url #0",archivo.getUploadItem().getContentType());
									IOUtils.copyStream(ostream, istream);
									ostream.flush();
									ostream.close();
									istream.close();
									//guardar datos en la BD
									ArchivoAdjunto archivoAux = new ArchivoAdjunto();
									archivoAux.setSolicitud(solicitud);
									archivoAux.setUrl(url);
									archivoAux.setUbicacion("");
									archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
									archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
									archivoAux.setUsuario(usuarioLogueado);
									archivoAux.setFechaCreacion(new Date());
									entityManager.persist(archivoAux);
									entityManager.flush();
									
									entityManager.remove(archivo.getArchivo());
									entityManager.flush();
									
									
									
									ConceptoDTO objetoAux = new ConceptoDTO();
									objetoAux.setNombreArchivo(nombreArchivo);
									objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
									listaArchivoGuardadoResp.add(objetoAux);
									objetoAux = null;
									
								} catch (FileNotFoundException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}
								catch (IOException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}catch (Exception e) {
									e.printStackTrace();
								}							
							}		
						}							
						List<ConceptoDTO> lista = scoringService.getConceptoMonto(solicitud.getId().getNumSolicitud());
						List<ConceptoDTO> listaProducto = scoringService.getProductos(solicitud.getId().getNumSolicitud());
						List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
						if(listaUsuarioCorreoagregados != null){
							Locale locale = new Locale("es","CL");
							/*setando los varlores del dto para el correo*/
							ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
							contenidoEmail.setTituloRespuesta("Rechazo individual solicitud ");
							contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
							contenidoEmail.setColor("ROJO");
							contenidoEmail.setAccion("Se Rechazo la Solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
							contenidoEmail.setAccionRespuesta("");
							contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
							contenidoEmail.setObservacionRespuesta(this.observacionesFinales);
							contenidoEmail.setObservacionEjecutivo(null);
							contenidoEmail.setOpcionFinal(2);	
							contenidoEmail.setSolicitud(solicitud);
							NumberFormat numberFormatter;
							StringBuffer rutNombre = new StringBuffer();
							rutNombre.append(cliente.getRut());
							rutNombre.append(" / ");
							rutNombre.append(modificarTexto(cliente.getRazonSocial()));
							contenidoEmail.setRutNombre(rutNombre.toString());
							contenidoEmail.setSoloNombre(cliente.getRazonSocial());
							contenidoEmail.setCanalVenta(cliente.getCanalVenta());
							contenidoEmail.setSucursal(sucursal.getDescripcion());
							
							UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
							if(ususarioEmisor != null){
								contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
							}else{
								contenidoEmail.setEmisor(solicitud.getCodEmisor());
							}
							
							contenidoEmail.setTipoSolicitud("Venta Puntual");
							contenidoEmail.setTipoVentas(modificarTexto(tipoSolicitudAux.getDesTipoSolicitud()));
							
							numberFormatter = NumberFormat.getNumberInstance(locale);
							log.debug(numberFormatter.format(venta.getMontoInicial()));
							
							contenidoEmail.setMontoMasIva(numberFormatter.format(venta.getMontoInicial()));
							contenidoEmail.setMontoPie(numberFormatter.format(venta.getMontoPieInicial()));
							contenidoEmail.setMargenNegocio(String.valueOf(numberFormatter.format(this.margenGlogal)));
							contenidoEmail.setFormaPago(this.formaPago);
							contenidoEmail.setMotivoCompra(this.motivoCompra);
							contenidoEmail.setMontoMasIvaAprobado(numberFormatter.format(this.montoNuevo));
							contenidoEmail.setMontoPieAprobado(numberFormatter.format(this.pieNuevo));	
							

							if("VIG".equals(cliente.getVigenciaSeguro().trim())){
								contenidoEmail.setLineaSeguro(numberFormatter.format(cliente.getMontoSeguro()));
							}else{
								contenidoEmail.setLineaSeguro(numberFormatter.format(0));
							}								
							contenidoEmail.setCoberturaSeguro(numberFormatter.format(expoRiesgoKh.getMontoAsegurado()));
							contenidoEmail.setPeakCredito(numberFormatter.format(expoRiesgoKh.getPeakCredito()));
							contenidoEmail.setRisgoKupfer(numberFormatter.format(expoRiesgoKh.getMontoRiesgoKupfer()));
							contenidoEmail.setListaProductos(listaProducto);
							contenidoEmail.setListaConceptoMontos(lista);
							contenidoEmail.setListaArchivos(listaArchivoGuardado);
							contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
							contenidoEmail.setListaObservaciones(listaObservaciones);
							
							List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
							if(listaUsuarioCorreoagregados != null){
								for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
									if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !((ucdto.getUsername().trim()).toLowerCase()).equals(solicitud.getCodEmisor().trim().toLowerCase())){
										log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
										Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
										if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
											if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
												ultimaListaCorreoPrueba.add(usuarioAux);	
												usuarioAux = new Usuariosegur();
											}													
										}
									}
								}
							}
							/*eliminar esto, cuando se establaque la solucion*/
							Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
							if(emisorCorreo != null){
								if(!ultimaListaCorreoPrueba.contains(emisorCorreo)){
									ultimaListaCorreoPrueba.add(emisorCorreo);
								}
								emisorCorreo = null;
							}
							Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
							if(correoAdministrador != null){
								ultimaListaCorreoPrueba.add(correoAdministrador);
								correoAdministrador = null;
							}							
							contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);		
							
							try{
								if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
									emailAlerta.enviarRespuestaSolicitudVenta(contenidoEmail);	
								}	
							}catch (Exception e) {
								log.debug("paso por el error #0"+ e.getMessage());
							}
						}
						
						insertarLogs(solicitud, 11);
						insertHitos(solicitud, estado, "NADA", 0);
						entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
						             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
						entityManager.flush();
					}
				}	
			}else if(this.paginaIngreso == 21 || this.paginaIngreso == 22 || this.paginaIngreso == 23){
				if(solicitud != null && credito != null && usuarioLogueado != null){
					SolicitudUsuarioDerivada sud =  scoringService.
							getSolicitudUsuarioDerivacionForSolicitudIpPersonal(solicitud.getId().getNumSolicitud(),
									usuarioLogueado.getIdPersonal());
					if(sud != null){
						sud.setConfirmacion(true);
						sud.setEstado(estado);
						sud.setUsernameAutorizacion(usuarioLogueado.getAlias());
						exitoSud = scoringService.mergerSolicitudUsuarioDerivacion(sud);
						log.debug(exitoSud);
					}
					
					List<SolicitudUsuarioDerivada> listaVerificacion = scoringService.getSolicitudUsuarioDerivacionForSolicitudEstado(solicitud.getId().getNumSolicitud(),solicitud.getEstadoEvaluacion());
					if(listaVerificacion != null){
						cantidad = listaVerificacion.size();
						/*verificar cantidad de usuarios obligatorios debe aprobar*/
						for(SolicitudUsuarioDerivada sudAux : listaVerificacion){
							if(sudAux.getConfirmacionObligatoria() == true){
								verificadosObligados++;
							}
						}
						
						
						/*verificar la cantidad de aprobados, rechazados, la cantidad de usuarios*/
						for(SolicitudUsuarioDerivada sudAux2 : listaVerificacion){
							if(sudAux2.getEstado().getCodEstado().equals("AP")){
								aprobado++;
								if(sudAux2.getConfirmacion()){
									if(sudAux2.getConfirmacionObligatoria()){
										cantVeriObligadosAprobado++;
									}
								}
							}else if(sudAux2.getEstado().getCodEstado().equals("RP")){
								rechazado++;
								if(sudAux2.getConfirmacion()){
									if(sudAux2.getConfirmacionObligatoria()){
										cantVeriObligadosRechazado++;
									}
								}								
							}
						}
					}
					
					if(verificadosObligados == (cantVeriObligadosAprobado + cantVeriObligadosRechazado)){
						cambioEstadosolicitud = true;
					}
					if(cambioEstadosolicitud == true  && !solicitud.getEstado().equals("DR")){/*cambio de estado de la solicitud */
						
						solicitud.setEstado("DR");
						solicitud.setAnalizar(true);
						credito.setStatusSolicitud("DR");
						
						boolean exitoUno = scoringService.mergerSolicitud(solicitud);
						boolean exitoDos = scoringService.mergerSolicitudLineaCredito(credito);
						entityManager.refresh(solicitud);
						entityManager.refresh(credito);
						if(exitoUno == true && exitoDos == true){
							
							this.mensajeGlogal = "La solicitud "+ solicitud.getId().getNumSolicitud() +" fue rechazada por "+ modificarTexto(usuarioLogueado.getNombre())+".";
							/*se agrega la observaciones final de una aprobacion final */
							LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
							Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
							if(correlativo != null){
								id.setCorrelativo(correlativo);
								id.setFecha(new Date());
								id.setHora(new Date());
								id.setNumSolicitud(solicitud.getId().getNumSolicitud());
								id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
								id.setObservacion(this.observacionesFinales);
								id.setUsuario(usuarioSegur.getAlias());
								LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
								obser.setId(id);
								scoringService.persistSolicitudObservaciones(obser);
								insertarLogs(solicitud, 5);
							}							
							List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
							if(listaFileUploadedDTOs != null){
								for(FileUploadedDTO archivo :listaFileUploadedDTOs){
								   try {							
										OutputStream ostream = null;
										String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
										nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);
										String url = "archivos"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
										
										
										//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
										ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
										log.debug("url #0",archivo.getUploadItem().getContentType());
										IOUtils.copyStream(ostream, istream);
										ostream.flush();
										ostream.close();
										istream.close();
										//guardar datos en la BD
										ArchivoAdjunto archivoAux = new ArchivoAdjunto();
										archivoAux.setSolicitud(solicitud);
										archivoAux.setUrl(url);
										archivoAux.setUbicacion("");
										archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
										archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
										archivoAux.setUsuario(usuarioLogueado);
										archivoAux.setFechaCreacion(new Date());
										entityManager.persist(archivoAux);
										entityManager.flush();
										
										entityManager.remove(archivo.getArchivo());
										entityManager.flush();
										
										
										
										ConceptoDTO objetoAux = new ConceptoDTO();
										objetoAux.setNombreArchivo(nombreArchivo);
										objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
										listaArchivoGuardadoResp.add(objetoAux);
										objetoAux = null;
										
									} catch (FileNotFoundException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}
									catch (IOException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}catch (Exception e) {
										e.printStackTrace();
									}							
								}		
							}							
							
							
							
							Locale locale = new Locale("es","CL");
							NumberFormat numberFormatter;
							numberFormatter = NumberFormat.getNumberInstance(locale);							

							/* sacar los datos concecptos involucrados*/
							List<SolicitudConceptosNegocioLC> listaConceptoInvolucarado = scoringService
									.getListarSolicitudConceptosNegocioLC(solicitud.getId().getNumSolicitud());	
							
							/*crear lista de concepto de involucrados*/
							List<ConceptoDTO> conceptosInvolucrado = new ArrayList<ConceptoDTO>(0);
							if(listaConceptoInvolucarado != null){
								for(SolicitudConceptosNegocioLC scn : listaConceptoInvolucarado){
									ConceptoDTO ci = new ConceptoDTO();
									ci.setDescripcion(scn.getConceptosNegocio().getDescripcion());
									ci.setMontoFormateado(numberFormatter.format(scn.getMonto()));
									conceptosInvolucrado.add(ci);
									ci=null;
								}
							}
							
							List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
							
							if(listaUsuarioCorreoagregados != null){
								/*setando los varlores del dto para el correo*/
								ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
								contenidoEmail.setTituloRespuesta("Rechazo individual solicitud ");
								contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
								contenidoEmail.setColor("ROJO");
								contenidoEmail.setAccion("Se Rechazo la Solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
								contenidoEmail.setAccionRespuesta("");
								contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
								contenidoEmail.setObservacionRespuesta(this.observacionesFinales);
								contenidoEmail.setObservacionEjecutivo(null);
								contenidoEmail.setOpcionFinal(2);	
								contenidoEmail.setSolicitud(solicitud);
								
								
								StringBuffer rutNombre = new StringBuffer();
								rutNombre.append(cliente.getRut());
								rutNombre.append(" / ");
								rutNombre.append(modificarTexto(cliente.getRazonSocial()));
								contenidoEmail.setRutNombre(rutNombre.toString());
								contenidoEmail.setSoloNombre(cliente.getRazonSocial());
								contenidoEmail.setCanalVenta(cliente.getCanalVenta());
								contenidoEmail.setSucursal(sucursal.getDescripcion());
								UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
								if(ususarioEmisor != null){
									contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
								}else{
									contenidoEmail.setEmisor(solicitud.getCodEmisor());
								}
								
								Sucursal suc = obtenerObjetoSucursal(solicitud.getCodSucursal());
								if(suc != null){
									contenidoEmail.setSucursal(suc.getDescripcion());
								}else{
									contenidoEmail.setSucursal(solicitud.getCodSucursal());
								}

								contenidoEmail.setTipoSolicitud("Linea de Cr√©dito.");
								contenidoEmail.setTipoLineaCredito(tipoSolicitudAux.getDesTipoSolicitud());

								if("VIG".equals(solicitud.getVigSeguro().trim())){
									contenidoEmail.setLineaSeguroActual(numberFormatter.format(expoRiesgoKh.getMontoAsegurado()));
								}else{
									contenidoEmail.setLineaSeguroActual(numberFormatter.format(0));
								}
								
								if(this.modificarCredito){
									log.debug(numberFormatter.format(this.montoLineaCreditoNuevo));
									contenidoEmail.setMontoSolicitado(numberFormatter.format(this.montoLineaCreditoNuevo));
									contenidoEmail.setCondicionRiesgo(this.clsRiesgoNuevo);
									contenidoEmail.setCondicionPago(this.cPagoNuevo);
									
								}else{
									contenidoEmail.setMontoSolicitado(numberFormatter.format(this.montoCredito));
									contenidoEmail.setCondicionRiesgo(this.clsRiesgo);
									contenidoEmail.setCondicionPago(this.cPago);
								}
								
								contenidoEmail.setProyecto(credito.getDpDescripcionProyecto());
								contenidoEmail.setMontoProyecto(credito.getDpMonto());
								contenidoEmail.setPlazoEjecucion(modificarTexto(credito.getDpPlazoEjecucion()));
								contenidoEmail.setPotencialCompra(credito.getDpPotencialCompra());
								
								
								List<String> listaSocios = new ArrayList<String>(0);
								if(credito.getDpSocios() != null){
									String[] array = credito.getDpSocios().split(",");
									if(array != null){
										for(String s : array){
											listaSocios.add(s);
										}
									}
								}
								
							    /*datos de lineas credito solCredito */
								contenidoEmail.setListaSocios(listaSocios);
								contenidoEmail.setListaConceptoMontos(conceptosInvolucrado);
								contenidoEmail.setListaArchivos(listaArchivoGuardado);
								contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
								contenidoEmail.setListaObservaciones(listaObservaciones);
								
								List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
								if(listaUsuarioCorreoagregados != null){
									for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
										if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !((ucdto.getUsername().trim()).toLowerCase()).equals(solicitud.getCodEmisor().trim().toLowerCase()) ){
											log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
												if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
													ultimaListaCorreoPrueba.add(usuarioAux);	
													usuarioAux = new Usuariosegur();
												}													
											}
										}
									}
								}
								/*eliminar esto, cuando se establaque la solucion*/
								Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
								if(emisorCorreo != null){
									if(!ultimaListaCorreoPrueba.contains(emisorCorreo)){
										ultimaListaCorreoPrueba.add(emisorCorreo);
									}
									emisorCorreo = null;
								}
								Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
								if(correoAdministrador != null){
									ultimaListaCorreoPrueba.add(correoAdministrador);
									correoAdministrador = null;
								}								
								contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);										
								
								
								try{
									if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
										emailAlerta.enviarRespuestaSolicitudVenta(contenidoEmail);	
									}	
								}catch (Exception e) {
									log.debug("paso por el error #0"+ e.getMessage());
								}
							}
							
							
							insertarLogs(solicitud, 8);
							insertHitos(solicitud, estado, "NADA", 0);
							entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
							             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
							entityManager.flush();
						}
						
					}else{/*solo envio de correo de la aprobacion del usuario que acaba de aprobar*/
						
						this.mensajeGlogal = "La solicitud "+ solicitud.getId().getNumSolicitud() +" fue rechazada por "+ modificarTexto(usuarioLogueado.getNombre())+".";
						/*se agrega la observaciones final de una aprobacion final */
						LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
						Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							id.setCorrelativo(correlativo);
							id.setFecha(new Date());
							id.setHora(new Date());
							id.setNumSolicitud(solicitud.getId().getNumSolicitud());
							id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							id.setObservacion(this.observacionesFinales);
							id.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(id);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}
						List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
						if(listaFileUploadedDTOs != null){
							for(FileUploadedDTO archivo :listaFileUploadedDTOs){
							   try {							
									OutputStream ostream = null;
									String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
									nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);
									String url = "archivos"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
									
									
									//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
									ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
									log.debug("url #0",archivo.getUploadItem().getContentType());
									IOUtils.copyStream(ostream, istream);
									ostream.flush();
									ostream.close();
									istream.close();
									//guardar datos en la BD
									ArchivoAdjunto archivoAux = new ArchivoAdjunto();
									archivoAux.setSolicitud(solicitud);
									archivoAux.setUrl(url);
									archivoAux.setUbicacion("");
									archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
									archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
									archivoAux.setUsuario(usuarioLogueado);
									archivoAux.setFechaCreacion(new Date());
									entityManager.persist(archivoAux);
									entityManager.flush();
									
									entityManager.remove(archivo.getArchivo());
									entityManager.flush();
									
									
									
									ConceptoDTO objetoAux = new ConceptoDTO();
									objetoAux.setNombreArchivo(nombreArchivo);
									objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
									listaArchivoGuardadoResp.add(objetoAux);
									objetoAux = null;
									
								} catch (FileNotFoundException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}
								catch (IOException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}catch (Exception e) {
									e.printStackTrace();
								}							
							}		
						}							
						
						Locale locale = new Locale("es","CL");
						NumberFormat numberFormatter;
						numberFormatter = NumberFormat.getNumberInstance(locale);							
						
						/* sacar los datos concecptos involucrados*/
						List<SolicitudConceptosNegocioLC> listaConceptoInvolucarado = scoringService
								.getListarSolicitudConceptosNegocioLC(solicitud.getId().getNumSolicitud());	
						
						/*crear lista de concepto de involucrados*/
						List<ConceptoDTO> conceptosInvolucrado = new ArrayList<ConceptoDTO>(0);
						if(listaConceptoInvolucarado != null){
							for(SolicitudConceptosNegocioLC scn : listaConceptoInvolucarado){
								ConceptoDTO ci = new ConceptoDTO();
								ci.setDescripcion(scn.getConceptosNegocio().getDescripcion());
								ci.setMontoFormateado(numberFormatter.format(scn.getMonto()));
								conceptosInvolucrado.add(ci);
								ci=null;
							}
						}
						
						List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
						
						if(listaUsuarioCorreoagregados != null){
							/*setando los varlores del dto para el correo*/
							ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
							contenidoEmail.setTituloRespuesta("Rechazo individual solicitud ");
							contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
							contenidoEmail.setColor("ROJO");
							contenidoEmail.setAccion("Se Rechazo la Solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
							contenidoEmail.setAccionRespuesta("");
							contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
							contenidoEmail.setObservacionRespuesta(this.observacionesFinales);
							contenidoEmail.setObservacionEjecutivo(null);
							contenidoEmail.setOpcionFinal(2);	
							contenidoEmail.setSolicitud(solicitud);
							
							
							StringBuffer rutNombre = new StringBuffer();
							rutNombre.append(cliente.getRut());
							rutNombre.append(" / ");
							rutNombre.append(modificarTexto(cliente.getRazonSocial()));
							contenidoEmail.setRutNombre(rutNombre.toString());
							contenidoEmail.setSoloNombre(cliente.getRazonSocial());
							contenidoEmail.setCanalVenta(cliente.getCanalVenta());
							contenidoEmail.setSucursal(sucursal.getDescripcion());
							contenidoEmail.setEmisor(modificarTexto(usuarioLogueado.getNombre()));

							
							Sucursal suc = obtenerObjetoSucursal(solicitud.getCodSucursal());
							if(suc != null){
								contenidoEmail.setSucursal(suc.getDescripcion());
							}else{
								contenidoEmail.setSucursal(solicitud.getCodSucursal());
							}
							
							UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
							if(ususarioEmisor != null){
								contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
							}else{
								contenidoEmail.setEmisor(modificarTexto(solicitud.getCodEmisor()));
							}
							contenidoEmail.setTipoSolicitud("Linea de Cr√©dito.");
							contenidoEmail.setTipoLineaCredito(tipoSolicitudAux.getDesTipoSolicitud());

							if("VIG".equals(solicitud.getVigSeguro().trim())){
								contenidoEmail.setLineaSeguroActual(numberFormatter.format(expoRiesgoKh.getMontoAsegurado()));
							}else{
								contenidoEmail.setLineaSeguroActual(numberFormatter.format(0));
							}
							
							if(this.modificarCredito){
								log.debug(numberFormatter.format(this.montoLineaCreditoNuevo));
								contenidoEmail.setMontoSolicitado(numberFormatter.format(this.montoLineaCreditoNuevo));
								contenidoEmail.setCondicionRiesgo(this.clsRiesgoNuevo);
								contenidoEmail.setCondicionPago(this.cPagoNuevo);
								
							}else{
								contenidoEmail.setMontoSolicitado(numberFormatter.format(this.montoCredito));
								contenidoEmail.setCondicionRiesgo(this.clsRiesgo);
								contenidoEmail.setCondicionPago(this.cPago);
							}
							
							contenidoEmail.setProyecto(credito.getDpDescripcionProyecto());
							contenidoEmail.setMontoProyecto(credito.getDpMonto());
							contenidoEmail.setPlazoEjecucion(modificarTexto(credito.getDpPlazoEjecucion()));
							contenidoEmail.setPotencialCompra(credito.getDpPotencialCompra());
							
							
							List<String> listaSocios = new ArrayList<String>(0);
							if(credito.getDpSocios() != null){
								String[] array = credito.getDpSocios().split(",");
								if(array != null){
									for(String s : array){
										listaSocios.add(s);
									}
								}
							}
							
						    /*datos de lineas credito solCredito */
							contenidoEmail.setListaSocios(listaSocios);
							contenidoEmail.setListaConceptoMontos(conceptosInvolucrado);
							contenidoEmail.setListaArchivos(listaArchivoGuardado);
							contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
							contenidoEmail.setListaObservaciones(listaObservaciones);
							
							List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
							if(listaUsuarioCorreoagregados != null){
								for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
									if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !((ucdto.getUsername().trim()).toLowerCase()).equals(solicitud.getCodEmisor().trim().toLowerCase())){
										log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
										Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
										if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
											if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
												ultimaListaCorreoPrueba.add(usuarioAux);	
												usuarioAux = new Usuariosegur();
											}													
										}
									}
								}
							}
							/*eliminar esto, cuando se establaque la solucion*/
							Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
							if(emisorCorreo != null){
								if(!ultimaListaCorreoPrueba.contains(emisorCorreo)){
									ultimaListaCorreoPrueba.add(emisorCorreo);
								}
								emisorCorreo = null;
							}
							Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
							if(correoAdministrador != null){
								ultimaListaCorreoPrueba.add(correoAdministrador);
								correoAdministrador = null;
							}							
							contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);		
							
							try{
								if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
									emailAlerta.enviarRespuestaSolicitudVenta(contenidoEmail);	
								}	
							}catch (Exception e) {
								log.debug("paso por el error #0"+ e.getMessage());
							}
						}
						
						
						insertarLogs(solicitud, 8);
						insertHitos(solicitud, estado, "NADA", 0);
						entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
						             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
						entityManager.flush();
					}
				}	
			}else if (this.paginaIngreso == 31){
				if(solicitud != null && condicion != null && usuarioLogueado != null){
					SolicitudUsuarioDerivada sud =  scoringService.
							getSolicitudUsuarioDerivacionForSolicitudIpPersonal(solicitud.getId().getNumSolicitud(),
									usuarioLogueado.getIdPersonal());
					if(sud != null){
						sud.setConfirmacion(true);
						sud.setEstado(estado);
						sud.setUsernameAutorizacion(usuarioLogueado.getAlias());
						exitoSud = scoringService.mergerSolicitudUsuarioDerivacion(sud);
						log.debug(exitoSud);
					}
					
					List<SolicitudUsuarioDerivada> listaVerificacion = scoringService.getSolicitudUsuarioDerivacionForSolicitudEstado(solicitud.getId().getNumSolicitud(),solicitud.getEstadoEvaluacion());
					if(listaVerificacion != null){
						cantidad = listaVerificacion.size();
						/*verificar cantidad de usuarios obligatorios debe aprobar*/
						for(SolicitudUsuarioDerivada sudAux : listaVerificacion){
							if(sudAux.getConfirmacionObligatoria() == true){
								verificadosObligados++;
							}
						}
						
						
						/*verificar la cantidad de aprobados, rechazados, la cantidad de usuarios*/
						for(SolicitudUsuarioDerivada sudAux2 : listaVerificacion){
							if(sudAux2.getEstado().getCodEstado().equals("AP")){
								aprobado++;
								if(sudAux2.getConfirmacion()){
									if(sudAux2.getConfirmacionObligatoria()){
										cantVeriObligadosAprobado++;
									}
								}
							}else if(sudAux2.getEstado().getCodEstado().equals("RP")){
								rechazado++;
								if(sudAux2.getConfirmacion()){
									if(sudAux2.getConfirmacionObligatoria()){
										cantVeriObligadosRechazado++;
									}
								}								
							}
						}
					}
					
					if(verificadosObligados == (cantVeriObligadosAprobado + cantVeriObligadosRechazado)){
						cambioEstadosolicitud = true;
					}
					if(cambioEstadosolicitud == true  && !solicitud.getEstado().equals("DR")){/*cambio de estado de la solicitud */
						
						solicitud.setEstado("DR");
						solicitud.setAnalizar(true);
						condicion.setStatusSolicitud("DR");
						
						boolean exitoUno = scoringService.mergerSolicitud(solicitud);
						boolean exitoDos = scoringService.mergerSolicitudCondiciones(condicion);
						entityManager.refresh(solicitud);
						entityManager.refresh(condicion);
						if(exitoUno == true && exitoDos == true){
							this.mensajeGlogal = "La solicitud "+ solicitud.getId().getNumSolicitud() +" fue rechazada por "+ modificarTexto(usuarioLogueado.getNombre())+".";
							/*se agrega la observaciones final de una aprobacion final */
							LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
							Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
							if(correlativo != null){
								id.setCorrelativo(correlativo);
								id.setFecha(new Date());
								id.setHora(new Date());
								id.setNumSolicitud(solicitud.getId().getNumSolicitud());
								id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
								id.setObservacion(this.observacionesFinales);
								id.setUsuario(usuarioSegur.getAlias());
								LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
								obser.setId(id);
								scoringService.persistSolicitudObservaciones(obser);
								insertarLogs(solicitud, 5);
							}
							List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
							if(listaFileUploadedDTOs != null){
								for(FileUploadedDTO archivo :listaFileUploadedDTOs){
								   try {							
										OutputStream ostream = null;
										String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
										nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);
										String url = "archivos"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
										
										
										//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
										ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
										log.debug("url #0",archivo.getUploadItem().getContentType());
										IOUtils.copyStream(ostream, istream);
										ostream.flush();
										ostream.close();
										istream.close();
										//guardar datos en la BD
										ArchivoAdjunto archivoAux = new ArchivoAdjunto();
										archivoAux.setSolicitud(solicitud);
										archivoAux.setUrl(url);
										archivoAux.setUbicacion("");
										archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
										archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
										archivoAux.setUsuario(usuarioLogueado);
										archivoAux.setFechaCreacion(new Date());
										entityManager.persist(archivoAux);
										entityManager.flush();
										
										entityManager.remove(archivo.getArchivo());
										entityManager.flush();
										
										
										
										ConceptoDTO objetoAux = new ConceptoDTO();
										objetoAux.setNombreArchivo(nombreArchivo);
										objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
										listaArchivoGuardadoResp.add(objetoAux);
										objetoAux = null;
										
									} catch (FileNotFoundException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}
									catch (IOException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}catch (Exception e) {
										e.printStackTrace();
									}							
								}		
							}							
							List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
							if(listaUsuarioCorreoagregados != null){
								/*setando los varlores del dto para el correo*/
								ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
								contenidoEmail.setTituloRespuesta("Rechazo individual solicitud ");
								contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
								contenidoEmail.setColor("ROJO");
								contenidoEmail.setAccion("Se Rechazo la Solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
								contenidoEmail.setAccionRespuesta("");
								contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
								contenidoEmail.setObservacionRespuesta(this.observacionesFinales);
								contenidoEmail.setObservacionEjecutivo(null);
								contenidoEmail.setOpcionFinal(2);	
								contenidoEmail.setSolicitud(solicitud);
								
								
								StringBuffer rutNombre = new StringBuffer();
								rutNombre.append(cliente.getRut());
								rutNombre.append(" / ");
								rutNombre.append(modificarTexto(cliente.getRazonSocial()));
								contenidoEmail.setRutNombre(rutNombre.toString());
								contenidoEmail.setSoloNombre(cliente.getRazonSocial());
								contenidoEmail.setCanalVenta(cliente.getCanalVenta());
								contenidoEmail.setSucursal(sucursal.getDescripcion());
								
								UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
								if(ususarioEmisor != null){
									contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
								}else{
									contenidoEmail.setEmisor(solicitud.getCodEmisor());
								}

								contenidoEmail.setTipoSolicitud("Cambio de Condiciones.");
								
								if(this.modificarCondicion){
									if(this.condicionRiesgoNew == true && this.condicionPagoNew == false){
										contenidoEmail.setTipoLineaCredito("Condiciones de Riesgo.");	
										contenidoEmail.setCondicionRiesgo(cliente.getClasificacionRiesgo());
										contenidoEmail.setCondicionPago("");
										contenidoEmail.setCondicionRiesgoNuevo(this.clsRiesgoNuevo);								
										contenidoEmail.setCondicionPagoNuevo("");
									
									}else if(this.condicionRiesgoNew == false && this.condicionPagoNew == true){
										contenidoEmail.setTipoLineaCredito("Condiciones de Pago.");
										contenidoEmail.setCondicionRiesgo("");
										contenidoEmail.setCondicionPago(cliente.getCondicionPago());
										contenidoEmail.setCondicionRiesgoNuevo("");								
										contenidoEmail.setCondicionPagoNuevo(this.cPagoNuevo);									
									
									}else if(this.condicionRiesgoNew == true && this.condicionPagoNew == true){
										contenidoEmail.setTipoLineaCredito("Condiciones "+ this.tipoSolicitudAux.getDesTipoSolicitud());
										contenidoEmail.setCondicionRiesgo(cliente.getClasificacionRiesgo());
										contenidoEmail.setCondicionPago(cliente.getCondicionPago());
										contenidoEmail.setCondicionRiesgoNuevo(this.clsRiesgoNuevo);								
										contenidoEmail.setCondicionPagoNuevo(this.cPagoNuevo);
									}								
								}else{
									
									if(this.condicionRiesgo == true && this.condicionPago == false){
										contenidoEmail.setTipoLineaCredito("Condiciones de Riesgo.");	
										contenidoEmail.setCondicionRiesgo(cliente.getClasificacionRiesgo());
										contenidoEmail.setCondicionPago("");
										contenidoEmail.setCondicionRiesgoNuevo(this.clsRiesgo);								
										contenidoEmail.setCondicionPagoNuevo("");
									
									}else if(this.condicionRiesgo == false && this.condicionPago == true){
										contenidoEmail.setTipoLineaCredito("Condiciones de Pago.");
										contenidoEmail.setCondicionRiesgo("");
										contenidoEmail.setCondicionPago(cliente.getCondicionPago());
										contenidoEmail.setCondicionRiesgoNuevo("");								
										contenidoEmail.setCondicionPagoNuevo(this.cPago);									
									
									}else if(this.condicionRiesgo == true && this.condicionPago == true){
										contenidoEmail.setTipoLineaCredito("Condiciones "+ this.tipoSolicitudAux.getDesTipoSolicitud());
										contenidoEmail.setCondicionRiesgo(cliente.getClasificacionRiesgo());
										contenidoEmail.setCondicionPago(cliente.getCondicionPago());
										contenidoEmail.setCondicionRiesgoNuevo(this.clsRiesgo);								
										contenidoEmail.setCondicionPagoNuevo(this.cPago);
									}								
								}
								contenidoEmail.setMotivoCambio(condicion.getMotivoCambio());
							    /*datos de condiciones */
								contenidoEmail.setListaArchivos(listaArchivoGuardado);
								contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);	
								contenidoEmail.setListaObservaciones(listaObservaciones);
								
								List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
								if(listaUsuarioCorreoagregados != null){
									for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
										if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !((ucdto.getUsername().trim()).toLowerCase()).equals(solicitud.getCodEmisor().trim().toLowerCase()) ){
											log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
												if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
													ultimaListaCorreoPrueba.add(usuarioAux);	
													usuarioAux = new Usuariosegur();
												}													
											}
										}
									}
								}
								/*eliminar esto, cuando se establaque la solucion*/
								Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
								if(emisorCorreo != null){
									ultimaListaCorreoPrueba.add(emisorCorreo);
									emisorCorreo = null;
								}
								Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
								if(correoAdministrador != null){
									ultimaListaCorreoPrueba.add(correoAdministrador);
									correoAdministrador = null;
								}								
								contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);										
								
								try{
									if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
										emailAlerta.enviarRespuestaSolicitudCondiciones(contenidoEmail);	
									}	
								}catch (Exception e) {
									log.debug("paso por el error #0"+ e.getMessage());
								}
							}
							
							
							insertarLogs(solicitud, 8);
							insertHitos(solicitud, estado, "NADA", 0);
							entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
							             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
							entityManager.flush();
						}
						
					}else{/*solo envio de correo de la aprobacion del usuario que acaba de aprobar*/
						this.mensajeGlogal = "La solicitud "+ solicitud.getId().getNumSolicitud() +" fue rechazada por "+ modificarTexto(usuarioLogueado.getNombre())+".";
						/*se agrega la observaciones final de una aprobacion final */
						LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
						Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							id.setCorrelativo(correlativo);
							id.setFecha(new Date());
							id.setHora(new Date());
							id.setNumSolicitud(solicitud.getId().getNumSolicitud());
							id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							id.setObservacion(this.observacionesFinales);
							id.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(id);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}
						List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
						if(listaFileUploadedDTOs != null){
							for(FileUploadedDTO archivo :listaFileUploadedDTOs){
							   try {							
									OutputStream ostream = null;
									String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
									nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);
									String url = "archivos"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
									
									
									//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
									ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
									log.debug("url #0",archivo.getUploadItem().getContentType());
									IOUtils.copyStream(ostream, istream);
									ostream.flush();
									ostream.close();
									istream.close();
									//guardar datos en la BD
									ArchivoAdjunto archivoAux = new ArchivoAdjunto();
									archivoAux.setSolicitud(solicitud);
									archivoAux.setUrl(url);
									archivoAux.setUbicacion("");
									archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
									archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
									archivoAux.setUsuario(usuarioLogueado);
									archivoAux.setFechaCreacion(new Date());
									entityManager.persist(archivoAux);
									entityManager.flush();
									
									entityManager.remove(archivo.getArchivo());
									entityManager.flush();
									
									
									
									ConceptoDTO objetoAux = new ConceptoDTO();
									objetoAux.setNombreArchivo(nombreArchivo);
									objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
									listaArchivoGuardadoResp.add(objetoAux);
									objetoAux = null;
									
								} catch (FileNotFoundException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}
								catch (IOException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}catch (Exception e) {
									e.printStackTrace();
								}							
							}		
						}							
						List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
						if(listaUsuarioCorreoagregados != null){
							/*setando los varlores del dto para el correo*/
							ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
							contenidoEmail.setTituloRespuesta("Rechazo individual solicitud ");
							contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
							contenidoEmail.setColor("ROJO");
							contenidoEmail.setAccion("Se Rechazo la Solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
							contenidoEmail.setAccionRespuesta("");
							contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
							contenidoEmail.setObservacionRespuesta(this.observacionesFinales);
							contenidoEmail.setObservacionEjecutivo(null);
							contenidoEmail.setOpcionFinal(2);	
							contenidoEmail.setSolicitud(solicitud);
							
							
							StringBuffer rutNombre = new StringBuffer();
							rutNombre.append(cliente.getRut());
							rutNombre.append(" / ");
							rutNombre.append(modificarTexto(cliente.getRazonSocial()));
							contenidoEmail.setRutNombre(rutNombre.toString());
							contenidoEmail.setSoloNombre(cliente.getRazonSocial());
							contenidoEmail.setCanalVenta(cliente.getCanalVenta());
							contenidoEmail.setSucursal(sucursal.getDescripcion());
							
							UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
							if(ususarioEmisor != null){
								contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
							}else{
								contenidoEmail.setEmisor(solicitud.getCodEmisor());
							}

							contenidoEmail.setTipoSolicitud("Cambio de Condiciones.");
							
							if(this.modificarCondicion){
								if(this.condicionRiesgoNew == true && this.condicionPagoNew == false){
									contenidoEmail.setTipoLineaCredito("Condiciones de Riesgo.");	
									contenidoEmail.setCondicionRiesgo(cliente.getClasificacionRiesgo());
									contenidoEmail.setCondicionPago("");
									contenidoEmail.setCondicionRiesgoNuevo(this.clsRiesgoNuevo);								
									contenidoEmail.setCondicionPagoNuevo("");
								
								}else if(this.condicionRiesgoNew == false && this.condicionPagoNew == true){
									contenidoEmail.setTipoLineaCredito("Condiciones de Pago.");
									contenidoEmail.setCondicionRiesgo("");
									contenidoEmail.setCondicionPago(cliente.getCondicionPago());
									contenidoEmail.setCondicionRiesgoNuevo("");								
									contenidoEmail.setCondicionPagoNuevo(this.cPagoNuevo);									
								
								}else if(this.condicionRiesgoNew == true && this.condicionPagoNew == true){
									contenidoEmail.setTipoLineaCredito("Condiciones "+ this.tipoSolicitudAux.getDesTipoSolicitud());
									contenidoEmail.setCondicionRiesgo(cliente.getClasificacionRiesgo());
									contenidoEmail.setCondicionPago(cliente.getCondicionPago());
									contenidoEmail.setCondicionRiesgoNuevo(this.clsRiesgoNuevo);								
									contenidoEmail.setCondicionPagoNuevo(this.cPagoNuevo);
								}								
							}else{
								
								if(this.condicionRiesgo == true && this.condicionPago == false){
									contenidoEmail.setTipoLineaCredito("Condiciones de Riesgo.");	
									contenidoEmail.setCondicionRiesgo(cliente.getClasificacionRiesgo());
									contenidoEmail.setCondicionPago("");
									contenidoEmail.setCondicionRiesgoNuevo(this.clsRiesgo);								
									contenidoEmail.setCondicionPagoNuevo("");
								
								}else if(this.condicionRiesgo == false && this.condicionPago == true){
									contenidoEmail.setTipoLineaCredito("Condiciones de Pago.");
									contenidoEmail.setCondicionRiesgo("");
									contenidoEmail.setCondicionPago(cliente.getCondicionPago());
									contenidoEmail.setCondicionRiesgoNuevo("");								
									contenidoEmail.setCondicionPagoNuevo(this.cPago);									
								
								}else if(this.condicionRiesgo == true && this.condicionPago == true){
									contenidoEmail.setTipoLineaCredito("Condiciones "+ this.tipoSolicitudAux.getDesTipoSolicitud());
									contenidoEmail.setCondicionRiesgo(cliente.getClasificacionRiesgo());
									contenidoEmail.setCondicionPago(cliente.getCondicionPago());
									contenidoEmail.setCondicionRiesgoNuevo(this.clsRiesgo);								
									contenidoEmail.setCondicionPagoNuevo(this.cPago);
								}								
							}
							contenidoEmail.setMotivoCambio(condicion.getMotivoCambio());
						    /*datos de condiciones */
							contenidoEmail.setListaArchivos(listaArchivoGuardado);
							contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);	
							contenidoEmail.setListaObservaciones(listaObservaciones);
							
						
							List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
							if(listaUsuarioCorreoagregados != null){
								for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
									if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !((ucdto.getUsername().trim()).toLowerCase()).equals(solicitud.getCodEmisor().trim().toLowerCase()) ){
										log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
										Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
										if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
											if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
												ultimaListaCorreoPrueba.add(usuarioAux);	
												usuarioAux = new Usuariosegur();
											}													
										}
									}
								}
							}
							/*eliminar esto, cuando se establaque la solucion*/
							Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
							if(emisorCorreo != null){
								if(!ultimaListaCorreoPrueba.contains(emisorCorreo)){
									ultimaListaCorreoPrueba.add(emisorCorreo);
								}
								emisorCorreo = null;
							}
							Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
							if(correoAdministrador != null){
								ultimaListaCorreoPrueba.add(correoAdministrador);
								correoAdministrador = null;
							}
							contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);									
							
							try{
								if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
									emailAlerta.enviarRespuestaSolicitudCondiciones(contenidoEmail);	
								}	
							}catch (Exception e) {
								log.debug("paso por el error #0"+ e.getMessage());
							}
						}
						
						
						insertarLogs(solicitud, 8);
						insertHitos(solicitud, estado, "NADA", 0);
						entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
						             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
						entityManager.flush();
					}
				}	
			}else if(this.paginaIngreso == 41){
				if(solicitud != null && solicitudOtra != null && usuarioLogueado != null){
					SolicitudUsuarioDerivada sud =  scoringService.
							getSolicitudUsuarioDerivacionForSolicitudIpPersonal(solicitud.getId().getNumSolicitud(),
									usuarioLogueado.getIdPersonal());
					if(sud != null){
						sud.setConfirmacion(true);
						sud.setEstado(estado);
						sud.setUsernameAutorizacion(usuarioLogueado.getAlias());
						exitoSud = scoringService.mergerSolicitudUsuarioDerivacion(sud);
						log.debug(exitoSud);
					}
					
					List<SolicitudUsuarioDerivada> listaVerificacion = scoringService.getSolicitudUsuarioDerivacionForSolicitudEstado(solicitud.getId().getNumSolicitud(),solicitud.getEstadoEvaluacion());
					if(listaVerificacion != null){
						cantidad = listaVerificacion.size();
						/*verificar cantidad de usuarios obligatorios debe aprobar*/
						for(SolicitudUsuarioDerivada sudAux : listaVerificacion){
							if(sudAux.getConfirmacionObligatoria() == true){
								verificadosObligados++;
							}
						}
						
						
						/*verificar la cantidad de aprobados, rechazados, la cantidad de usuarios*/
						for(SolicitudUsuarioDerivada sudAux2 : listaVerificacion){
							if(sudAux2.getEstado().getCodEstado().equals("AP")){
								aprobado++;
								if(sudAux2.getConfirmacion()){
									if(sudAux2.getConfirmacionObligatoria()){
										cantVeriObligadosAprobado++;
									}
								}
							}else if(sudAux2.getEstado().getCodEstado().equals("RP")){
								rechazado++;
								if(sudAux2.getConfirmacion()){
									if(sudAux2.getConfirmacionObligatoria()){
										cantVeriObligadosRechazado++;
									}
								}								
							}
						}
					}
					
					if(verificadosObligados == (cantVeriObligadosAprobado + cantVeriObligadosRechazado)){
						cambioEstadosolicitud = true;
					}
					if(cambioEstadosolicitud == true  && !solicitud.getEstado().equals("DR")){/*cambio de estado de la solicitud */
						
						solicitud.setEstado("DR");
						solicitud.setAnalizar(true);
						solicitudOtra.setStatusSolicitud("DR");
						
						boolean exitoUno = scoringService.mergerSolicitud(solicitud);
						boolean exitoDos = scoringService.mergerSolicitudOtrasSolicitudes(solicitudOtra);
						entityManager.refresh(solicitud);
						entityManager.refresh(solicitudOtra);
						if(exitoUno == true && exitoDos == true){
							this.mensajeGlogal = "La solicitud "+ solicitud.getId().getNumSolicitud() +" fue rechazada por "+ modificarTexto(usuarioLogueado.getNombre())+".";
							List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
							if(listaFileUploadedDTOs != null){
								for(FileUploadedDTO archivo :listaFileUploadedDTOs){
								   try {							
										OutputStream ostream = null;
										String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
										nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);
										String url = "archivos"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
										
										
										//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
										ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
										log.debug("url #0",archivo.getUploadItem().getContentType());
										IOUtils.copyStream(ostream, istream);
										ostream.flush();
										ostream.close();
										istream.close();
										//guardar datos en la BD
										ArchivoAdjunto archivoAux = new ArchivoAdjunto();
										archivoAux.setSolicitud(solicitud);
										archivoAux.setUrl(url);
										archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
										archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
										archivoAux.setUsuario(usuarioLogueado);
										archivoAux.setFechaCreacion(new Date());
										entityManager.persist(archivoAux);
										entityManager.flush();
										
										entityManager.remove(archivo.getArchivo());
										entityManager.flush();
										
										
										
										ConceptoDTO objetoAux = new ConceptoDTO();
										objetoAux.setNombreArchivo(nombreArchivo);
										objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
										listaArchivoGuardadoResp.add(objetoAux);
										objetoAux = null;
										
									} catch (FileNotFoundException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}
									catch (IOException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}catch (Exception e) {
										e.printStackTrace();
									}							
								}		
							}							
							List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
							if(listaUsuarioCorreoagregados != null){
								/*setando los varlores del dto para el correo*/
								ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
								contenidoEmail.setTituloRespuesta("Rechazo individual solicitud ");
								contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
								contenidoEmail.setColor("ROJO");
								contenidoEmail.setAccion("Se Rechazo la Solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
								contenidoEmail.setAccionRespuesta("");
								contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
								contenidoEmail.setObservacionRespuesta(this.observacionesFinales);
								contenidoEmail.setObservacionEjecutivo(null);
								contenidoEmail.setOpcionFinal(2);	
								contenidoEmail.setSolicitud(solicitud);
								
								
								StringBuffer rutNombre = new StringBuffer();
								rutNombre.append(cliente.getRut());
								rutNombre.append(" / ");
								rutNombre.append(modificarTexto(cliente.getRazonSocial()));
								contenidoEmail.setRutNombre(rutNombre.toString());
								contenidoEmail.setSoloNombre(cliente.getRazonSocial());
								contenidoEmail.setCanalVenta(cliente.getCanalVenta());
								contenidoEmail.setSucursal(sucursal.getDescripcion());
								
								UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
								if(ususarioEmisor != null){
									contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
								}else{
									contenidoEmail.setEmisor(solicitud.getCodEmisor());
								}

								contenidoEmail.setTipoSolicitud("Bloqueo / Desbloqueo.");
								
								if("41".equals(this.opcionBloqueoDesbloqueo)){
									contenidoEmail.setTipoBloqueoDesbloqueo("Bloqueo.");
			
								}else if("42".equals(this.opcionBloqueoDesbloqueo)){
									contenidoEmail.setTipoBloqueoDesbloqueo("Desbloqueo.");
								}
								
								contenidoEmail.setMotivoBloqueoDesbloqueo(this.motivoBloDesbloqueo);
								contenidoEmail.setObservacionesBloqueoDesblorqueo(this.motivoBloDesbloqueo);
								
							    /*datos de condiciones */
								contenidoEmail.setListaArchivos(listaArchivoGuardado);
								contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);	
								contenidoEmail.setListaObservaciones(listaObservaciones);

								
								List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
								if(listaUsuarioCorreoagregados != null){
									for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
										if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !((ucdto.getUsername().trim()).toLowerCase()).equals(solicitud.getCodEmisor().trim().toLowerCase())){
											log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
												if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
													ultimaListaCorreoPrueba.add(usuarioAux);	
													usuarioAux = new Usuariosegur();
												}													
											}
										}
									}
								}	
								/*eliminar esto, cuando se establaque la solucion*/
								Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
								if(emisorCorreo != null){
									if(!ultimaListaCorreoPrueba.contains(emisorCorreo)){
										ultimaListaCorreoPrueba.add(emisorCorreo);
									}
									emisorCorreo = null;
								}
								Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
								if(correoAdministrador != null){
									ultimaListaCorreoPrueba.add(correoAdministrador);
									correoAdministrador = null;
								}								
								contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);										
								try{
									if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
										emailAlerta.enviarRespuestaSolicitudBloqueoDesbloqueo(contenidoEmail);	
									}	
								}catch (Exception e) {
									log.debug("paso por el error #0"+ e.getMessage());
								}
							}
							
							
							insertarLogs(solicitud, 8);
							insertHitos(solicitud, estado, "NADA", 0);
							entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
							             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
							entityManager.flush();
						}
						
					}else{/*solo envio de correo de la aprobacion del usuario que acaba de aprobar*/
						this.mensajeGlogal = "La solicitud "+ solicitud.getId().getNumSolicitud() +" fue rechazada por "+ modificarTexto(usuarioLogueado.getNombre())+".";
						/*se agrega la observaciones final de una aprobacion final */
						LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
						Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							id.setCorrelativo(correlativo);
							id.setFecha(new Date());
							id.setHora(new Date());
							id.setNumSolicitud(solicitud.getId().getNumSolicitud());
							id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							id.setObservacion(this.observacionesFinales);
							id.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(id);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}
						List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
						if(listaFileUploadedDTOs != null){
							for(FileUploadedDTO archivo :listaFileUploadedDTOs){
							   try {							
									OutputStream ostream = null;
									String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
									nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);
									String url = "archivos"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
									
									
									//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
									ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
									log.debug("url #0",archivo.getUploadItem().getContentType());
									IOUtils.copyStream(ostream, istream);
									ostream.flush();
									ostream.close();
									istream.close();
									//guardar datos en la BD
									ArchivoAdjunto archivoAux = new ArchivoAdjunto();
									archivoAux.setSolicitud(solicitud);
									archivoAux.setUrl(url);
									archivoAux.setUbicacion("");
									archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
									archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
									archivoAux.setUsuario(usuarioLogueado);
									archivoAux.setFechaCreacion(new Date());
									entityManager.persist(archivoAux);
									entityManager.flush();
									
									entityManager.remove(archivo.getArchivo());
									entityManager.flush();
									
									
									
									ConceptoDTO objetoAux = new ConceptoDTO();
									objetoAux.setNombreArchivo(nombreArchivo);
									objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
									listaArchivoGuardadoResp.add(objetoAux);
									objetoAux = null;
									
								} catch (FileNotFoundException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}
								catch (IOException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}catch (Exception e) {
									e.printStackTrace();
								}							
							}		
						}							
						List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
						if(listaUsuarioCorreoagregados != null){
							/*setando los varlores del dto para el correo*/
							ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
							contenidoEmail.setTituloRespuesta("Rechazo individual solicitud ");
							contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
							contenidoEmail.setColor("ROJO");
							contenidoEmail.setAccion("Se Rechazo la Solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
							contenidoEmail.setAccionRespuesta("");
							contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
							contenidoEmail.setObservacionRespuesta(this.observacionesFinales);
							contenidoEmail.setObservacionEjecutivo(null);
							contenidoEmail.setOpcionFinal(2);	
							contenidoEmail.setSolicitud(solicitud);
							
							
							StringBuffer rutNombre = new StringBuffer();
							rutNombre.append(cliente.getRut());
							rutNombre.append(" / ");
							rutNombre.append(modificarTexto(cliente.getRazonSocial()));
							contenidoEmail.setRutNombre(rutNombre.toString());
							contenidoEmail.setSoloNombre(cliente.getRazonSocial());
							contenidoEmail.setCanalVenta(cliente.getCanalVenta());
							contenidoEmail.setSucursal(sucursal.getDescripcion());
							
							UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
							if(ususarioEmisor != null){
								contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
							}else{
								contenidoEmail.setEmisor(solicitud.getCodEmisor());
							}

							contenidoEmail.setTipoSolicitud("Bloqueo / Desbloqueo.");
							
							if("41".equals(this.opcionBloqueoDesbloqueo)){
								contenidoEmail.setTipoBloqueoDesbloqueo("Bloqueo.");
		
							}else if("42".equals(this.opcionBloqueoDesbloqueo)){
								contenidoEmail.setTipoBloqueoDesbloqueo("Desbloqueo.");
							}
							
							contenidoEmail.setMotivoBloqueoDesbloqueo(this.motivoBloDesbloqueo);
							contenidoEmail.setObservacionesBloqueoDesblorqueo(this.motivoBloDesbloqueo);
							
						    /*datos de lista de archivos de ingreso y resp√∫esta */
							contenidoEmail.setListaArchivos(listaArchivoGuardado);
							contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);	
							contenidoEmail.setListaObservaciones(listaObservaciones);

							List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
							if(listaUsuarioCorreoagregados != null){
								for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
									if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !((ucdto.getUsername().trim()).toLowerCase()).equals(solicitud.getCodEmisor().trim().toLowerCase())){
										log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
										Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
										if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
											if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
												ultimaListaCorreoPrueba.add(usuarioAux);	
												usuarioAux = new Usuariosegur();
											}													
										}
									}
								}
							}	
							/*eliminar esto, cuando se establaque la solucion*/
							Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
							if(emisorCorreo != null){
								if(!ultimaListaCorreoPrueba.contains(emisorCorreo)){
									ultimaListaCorreoPrueba.add(emisorCorreo);
								}
								emisorCorreo = null;
							}
							Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
							if(correoAdministrador != null){
								ultimaListaCorreoPrueba.add(correoAdministrador);
								correoAdministrador = null;
							}							
							contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);									
							try{
								if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
									emailAlerta.enviarRespuestaSolicitudBloqueoDesbloqueo(contenidoEmail);	
								}	
							}catch (Exception e) {
								log.debug("paso por el error #0"+ e.getMessage());
							}
						}
						
						
						insertarLogs(solicitud, 8);
						insertHitos(solicitud, estado, "NADA", 0);
						entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
						             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
						entityManager.flush();
					}
				}	
			}else if(this.paginaIngreso == 43){
				if(solicitud != null && solicitudOtra != null && usuarioLogueado != null){
					SolicitudUsuarioDerivada sud =  scoringService.
							getSolicitudUsuarioDerivacionForSolicitudIpPersonal(solicitud.getId().getNumSolicitud(),
									usuarioLogueado.getIdPersonal());
					if(sud != null){
						sud.setConfirmacion(true);
						sud.setEstado(estado);
						sud.setUsernameAutorizacion(usuarioLogueado.getAlias());
						exitoSud = scoringService.mergerSolicitudUsuarioDerivacion(sud);
						log.debug(exitoSud);
					}
					
					List<SolicitudUsuarioDerivada> listaVerificacion = scoringService.getSolicitudUsuarioDerivacionForSolicitudEstado(solicitud.getId().getNumSolicitud(),solicitud.getEstadoEvaluacion());
					if(listaVerificacion != null){
						cantidad = listaVerificacion.size();
						/*verificar cantidad de usuarios obligatorios debe aprobar*/
						for(SolicitudUsuarioDerivada sudAux : listaVerificacion){
							if(sudAux.getConfirmacionObligatoria() == true){
								verificadosObligados++;
							}
						}
						
						
						/*verificar la cantidad de aprobados, rechazados, la cantidad de usuarios*/
						for(SolicitudUsuarioDerivada sudAux2 : listaVerificacion){
							if(sudAux2.getEstado().getCodEstado().equals("AP")){
								aprobado++;
								if(sudAux2.getConfirmacion()){
									if(sudAux2.getConfirmacionObligatoria()){
										cantVeriObligadosAprobado++;
									}
								}
							}else if(sudAux2.getEstado().getCodEstado().equals("RP")){
								rechazado++;
								if(sudAux2.getConfirmacion()){
									if(sudAux2.getConfirmacionObligatoria()){
										cantVeriObligadosRechazado++;
									}
								}								
							}
						}
					}
					
					if(verificadosObligados == (cantVeriObligadosAprobado + cantVeriObligadosRechazado)){
						cambioEstadosolicitud = true;
					}
					if(cambioEstadosolicitud == true  && !solicitud.getEstado().equals("DR")){/*cambio de estado de la solicitud */
						
						solicitud.setEstado("DR");
						solicitud.setAnalizar(true);
						solicitudOtra.setStatusSolicitud("DR");
						
						boolean exitoUno = scoringService.mergerSolicitud(solicitud);
						boolean exitoDos = scoringService.mergerSolicitudOtrasSolicitudes(solicitudOtra);
						entityManager.refresh(solicitud);
						entityManager.refresh(solicitudOtra);
						if(exitoUno == true && exitoDos == true){
							this.mensajeGlogal = "La solicitud "+ solicitud.getId().getNumSolicitud() +" fue rechazada por "+ modificarTexto(usuarioLogueado.getNombre())+".";
							/*se agrega la observaciones final de una aprobacion final */
							LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
							Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
							if(correlativo != null){
								id.setCorrelativo(correlativo);
								id.setFecha(new Date());
								id.setHora(new Date());
								id.setNumSolicitud(solicitud.getId().getNumSolicitud());
								id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
								id.setObservacion(this.observacionesFinales);
								id.setUsuario(usuarioSegur.getAlias());
								LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
								obser.setId(id);
								scoringService.persistSolicitudObservaciones(obser);
								insertarLogs(solicitud, 5);
							}
							List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
							if(listaFileUploadedDTOs != null){
								for(FileUploadedDTO archivo :listaFileUploadedDTOs){
								   try {							
										OutputStream ostream = null;
										String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
										nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);
										String url = "archivos"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
										
										
										//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
										ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
										log.debug("url #0",archivo.getUploadItem().getContentType());
										IOUtils.copyStream(ostream, istream);
										ostream.flush();
										ostream.close();
										istream.close();
										//guardar datos en la BD
										ArchivoAdjunto archivoAux = new ArchivoAdjunto();
										archivoAux.setSolicitud(solicitud);
										archivoAux.setUrl(url);
										archivoAux.setUbicacion("");
										archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
										archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
										archivoAux.setUsuario(usuarioLogueado);
										archivoAux.setFechaCreacion(new Date());
										entityManager.persist(archivoAux);
										entityManager.flush();
										
										entityManager.remove(archivo.getArchivo());
										entityManager.flush();
										
										
										
										ConceptoDTO objetoAux = new ConceptoDTO();
										objetoAux.setNombreArchivo(nombreArchivo);
										objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
										listaArchivoGuardadoResp.add(objetoAux);
										objetoAux = null;
										
									} catch (FileNotFoundException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}
									catch (IOException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}catch (Exception e) {
										e.printStackTrace();
									}							
								}		
							}							
							
							List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
							
							if(listaUsuarioCorreoagregados != null){
								/*setando los varlores del dto para el correo*/
								ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
								contenidoEmail.setTituloRespuesta("Rechazo individual solicitud ");
								contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
								contenidoEmail.setColor("ROJO");
								contenidoEmail.setAccion("Se Rechazo la Solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
								contenidoEmail.setAccionRespuesta("");
								contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
								contenidoEmail.setObservacionRespuesta(this.observacionesFinales);
								contenidoEmail.setObservacionEjecutivo(null);
								contenidoEmail.setOpcionFinal(2);	
								contenidoEmail.setSolicitud(solicitud);
								
								
								StringBuffer rutNombre = new StringBuffer();
								rutNombre.append(cliente.getRut());
								rutNombre.append(" / ");
								rutNombre.append(modificarTexto(cliente.getRazonSocial()));
								contenidoEmail.setRutNombre(rutNombre.toString());
								contenidoEmail.setSoloNombre(cliente.getRazonSocial());
								contenidoEmail.setCanalVenta(cliente.getCanalVenta());
								contenidoEmail.setSucursal(sucursal.getDescripcion());
								
								UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
								if(ususarioEmisor != null){
									contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
								}else{
									contenidoEmail.setEmisor(solicitud.getCodEmisor());
								}

								contenidoEmail.setTipoSolicitud("Bloqueo / Desbloqueo.");
								
								if("41".equals(this.opcionBloqueoDesbloqueo)){
									contenidoEmail.setTipoBloqueoDesbloqueo("Bloqueo.");
			
								}else if("42".equals(this.opcionBloqueoDesbloqueo)){
									contenidoEmail.setTipoBloqueoDesbloqueo("Desbloqueo.");
								}
								
								contenidoEmail.setMotivoBloqueoDesbloqueo(this.motivoBloDesbloqueo);
								contenidoEmail.setObservacionesBloqueoDesblorqueo(this.motivoBloDesbloqueo);
								
							    /*datos de condiciones */
								contenidoEmail.setListaArchivos(listaArchivoGuardado);
								contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);	
								contenidoEmail.setListaObservaciones(listaObservaciones);

								
								List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
								if(listaUsuarioCorreoagregados != null){
									for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
										if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !((ucdto.getUsername().trim()).toLowerCase()).equals(solicitud.getCodEmisor().trim().toLowerCase())){
											log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
												if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
													ultimaListaCorreoPrueba.add(usuarioAux);	
													usuarioAux = new Usuariosegur();
												}													
											}
										}
									}
								}
								/*eliminar esto, cuando se establaque la solucion*/
								Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
								if(emisorCorreo != null){
									if(!ultimaListaCorreoPrueba.contains(emisorCorreo)){
										ultimaListaCorreoPrueba.add(emisorCorreo);
									}
									emisorCorreo = null;
								}
								Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
								if(correoAdministrador != null){
									ultimaListaCorreoPrueba.add(correoAdministrador);
									correoAdministrador = null;
								}								
								contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);										
								try{
									if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
										emailAlerta.enviarSolicitudRespuestaDm(contenidoEmail);	
									}	
								}catch (Exception e) {
									log.debug("paso por el error #0"+ e.getMessage());
								}
							}
							
							
							insertarLogs(solicitud, 8);
							insertHitos(solicitud, estado, "NADA", 0);
							entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
							             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
							entityManager.flush();
						}
						
					}else{/*solo envio de correo de la aprobacion del usuario que acaba de aprobar*/
						this.mensajeGlogal = "La solicitud "+ solicitud.getId().getNumSolicitud() +" fue rechazada por "+ modificarTexto(usuarioLogueado.getNombre())+".";
						/*se agrega la observaciones final de una aprobacion final */
						LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
						Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							id.setCorrelativo(correlativo);
							id.setFecha(new Date());
							id.setHora(new Date());
							id.setNumSolicitud(solicitud.getId().getNumSolicitud());
							id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							id.setObservacion(this.observacionesFinales);
							id.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(id);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}
						List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
						if(listaFileUploadedDTOs != null){
							for(FileUploadedDTO archivo :listaFileUploadedDTOs){
							   try {							
									OutputStream ostream = null;
									String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
									nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);
									String url = "archivos"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
									
									
									//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
									ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
									log.debug("url #0",archivo.getUploadItem().getContentType());
									IOUtils.copyStream(ostream, istream);
									ostream.flush();
									ostream.close();
									istream.close();
									//guardar datos en la BD
									ArchivoAdjunto archivoAux = new ArchivoAdjunto();
									archivoAux.setSolicitud(solicitud);
									archivoAux.setUrl(url);
									archivoAux.setUbicacion("");
									archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
									archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
									archivoAux.setUsuario(usuarioLogueado);
									archivoAux.setFechaCreacion(new Date());
									entityManager.persist(archivoAux);
									entityManager.flush();
									
									entityManager.remove(archivo.getArchivo());
									entityManager.flush();
									
									
									
									ConceptoDTO objetoAux = new ConceptoDTO();
									objetoAux.setNombreArchivo(nombreArchivo);
									objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
									listaArchivoGuardadoResp.add(objetoAux);
									objetoAux = null;
									
								} catch (FileNotFoundException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}
								catch (IOException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}catch (Exception e) {
									e.printStackTrace();
								}							
							}		
						}	
						
						List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
						if(listaUsuarioCorreoagregados != null){
							/*setando los varlores del dto para el correo*/
							ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
							contenidoEmail.setTituloRespuesta("Rechazo individual solicitud ");
							contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
							contenidoEmail.setColor("ROJO");
							contenidoEmail.setAccion("Se Rechazo la Solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
							contenidoEmail.setAccionRespuesta("");
							contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
							contenidoEmail.setObservacionRespuesta(this.observacionesFinales);
							contenidoEmail.setObservacionEjecutivo(null);
							contenidoEmail.setOpcionFinal(2);	
							contenidoEmail.setSolicitud(solicitud);
							
							
							StringBuffer rutNombre = new StringBuffer();
							rutNombre.append(cliente.getRut());
							rutNombre.append(" / ");
							rutNombre.append(modificarTexto(cliente.getRazonSocial()));
							contenidoEmail.setRutNombre(rutNombre.toString());
							contenidoEmail.setSoloNombre(cliente.getRazonSocial());
							contenidoEmail.setCanalVenta(cliente.getCanalVenta());
							contenidoEmail.setSucursal(sucursal.getDescripcion());
							
							UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
							if(ususarioEmisor != null){
								contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
							}else{
								contenidoEmail.setEmisor(solicitud.getCodEmisor());
							}

							contenidoEmail.setTipoSolicitud("Creacion de DM");
							contenidoEmail.setTipoDM("DM");
							

							
							/*datos de los DMS*/
							List<CreacionDmDTO> listaDms = new ArrayList<CreacionDmDTO>(0);
							CreacionDmDTO obejtoDm =  null;
							for(LcredSolicitudDm docto : listaClienteDMs){
								if(docto != null){
								   obejtoDm = new CreacionDmDTO();
								   obejtoDm.setRut(docto.getId().getRut());
								   obejtoDm.setNombre(docto.getId().getNombre());
								   obejtoDm.setOficinaVentas(docto.getId().getOficinaVentas());
								   obejtoDm.setZona(docto.getId().getZona());
								   obejtoDm.setListaPrecio(docto.getId().getListaPrecio());
								   obejtoDm.setSector(docto.getId().getSector());
								   obejtoDm.setVendTelefono(docto.getId().getVendTelefono());
								   obejtoDm.setVendTerreno(docto.getId().getVendTerreno());
								   obejtoDm.setCobrador(docto.getId().getCobrador());
								   obejtoDm.setCondExpedicion(docto.getId().getCondExpedicion());
								   obejtoDm.setCondPago(docto.getId().getCondPago());
								   listaDms.add(obejtoDm);
								}
							}
					
							contenidoEmail.setListaCreacionDM(listaDms);
							
						    /*datos de archivos */
							contenidoEmail.setListaArchivos(listaArchivoGuardado);
							contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
							contenidoEmail.setListaObservaciones(listaObservaciones);
							
							List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
							if(listaUsuarioCorreoagregados != null){
								for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
									if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !((ucdto.getUsername().trim()).toLowerCase()).equals(solicitud.getCodEmisor().trim().toLowerCase())){
										log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
										Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
										if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
											if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
												ultimaListaCorreoPrueba.add(usuarioAux);	
												usuarioAux = new Usuariosegur();
											}													
										}
									}
								}
							}
							/*eliminar esto, cuando se establaque la solucion*/
							Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
							if(emisorCorreo != null){
								if(!ultimaListaCorreoPrueba.contains(emisorCorreo)){
									ultimaListaCorreoPrueba.add(emisorCorreo);
								}
								emisorCorreo = null;
							}
							Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
							if(correoAdministrador != null){
								ultimaListaCorreoPrueba.add(correoAdministrador);
								correoAdministrador = null;
							}							
							contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);									
							
							try{
								if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
									emailAlerta.enviarSolicitudRespuestaDm(contenidoEmail);	
								}	
							}catch (Exception e) {
								log.debug("paso por el error #0"+ e.getMessage());
							}
						}
						
						
						insertarLogs(solicitud, 8);
						insertHitos(solicitud, estado, "NADA", 0);
						entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
						             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
						entityManager.flush();
					}
				}	
			}else if(this.paginaIngreso == 44){
				if(solicitud != null && solicitudOtra != null && usuarioLogueado != null){
					Locale locale = new Locale("es","CL");
					NumberFormat numberFormatter;
					numberFormatter = NumberFormat.getNumberInstance(locale);	
					SolicitudUsuarioDerivada sud =  scoringService.
							getSolicitudUsuarioDerivacionForSolicitudIpPersonal(solicitud.getId().getNumSolicitud(),
									usuarioLogueado.getIdPersonal());
					if(sud != null){
						sud.setConfirmacion(true);
						sud.setEstado(estado);
						sud.setUsernameAutorizacion(usuarioLogueado.getAlias());
						exitoSud = scoringService.mergerSolicitudUsuarioDerivacion(sud);
						log.debug(exitoSud);
					}
					
					List<SolicitudUsuarioDerivada> listaVerificacion = scoringService.getSolicitudUsuarioDerivacionForSolicitudEstado(solicitud.getId().getNumSolicitud(),solicitud.getEstadoEvaluacion());
					if(listaVerificacion != null){
						cantidad = listaVerificacion.size();
						/*verificar cantidad de usuarios obligatorios debe aprobar*/
						for(SolicitudUsuarioDerivada sudAux : listaVerificacion){
							if(sudAux.getConfirmacionObligatoria() == true){
								verificadosObligados++;
							}
						}
						
						
						/*verificar la cantidad de aprobados, rechazados, la cantidad de usuarios*/
						for(SolicitudUsuarioDerivada sudAux2 : listaVerificacion){
							if(sudAux2.getEstado().getCodEstado().equals("AP")){
								aprobado++;
								if(sudAux2.getConfirmacion()){
									if(sudAux2.getConfirmacionObligatoria()){
										cantVeriObligadosAprobado++;
									}
								}
							}else if(sudAux2.getEstado().getCodEstado().equals("RP")){
								rechazado++;
								if(sudAux2.getConfirmacion()){
									if(sudAux2.getConfirmacionObligatoria()){
										cantVeriObligadosRechazado++;
									}
								}								
							}
						}
					}
					
					if(verificadosObligados == (cantVeriObligadosAprobado + cantVeriObligadosRechazado)){
						cambioEstadosolicitud = true;
					}
					if(cambioEstadosolicitud == true  && !solicitud.getEstado().equals("DR")){/*cambio de estado de la solicitud */
						
						solicitud.setEstado("DR");
						solicitud.setAnalizar(true);
						solicitudOtra.setStatusSolicitud("DR");
						
						boolean exitoUno = scoringService.mergerSolicitud(solicitud);
						boolean exitoDos = scoringService.mergerSolicitudOtrasSolicitudes(solicitudOtra);
						entityManager.refresh(solicitud);
						entityManager.refresh(solicitudOtra);
						if(exitoUno == true && exitoDos == true){
							this.mensajeGlogal = "La solicitud "+ solicitud.getId().getNumSolicitud() +" fue rechazada por "+ modificarTexto(usuarioLogueado.getNombre())+".";
							/*se agrega la observaciones final de una aprobacion final */
							LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
							Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
							if(correlativo != null){
								id.setCorrelativo(correlativo);
								id.setFecha(new Date());
								id.setHora(new Date());
								id.setNumSolicitud(solicitud.getId().getNumSolicitud());
								id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
								id.setObservacion(this.observacionesFinales);
								id.setUsuario(usuarioSegur.getAlias());
								LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
								obser.setId(id);
								scoringService.persistSolicitudObservaciones(obser);
								insertarLogs(solicitud, 5);
							}
							List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
							if(listaFileUploadedDTOs != null){
								for(FileUploadedDTO archivo :listaFileUploadedDTOs){
								   try {							
										OutputStream ostream = null;
										String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
										nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);
										String url = "archivos"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
										InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
										
										
										//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
										ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
										log.debug("url #0",archivo.getUploadItem().getContentType());
										IOUtils.copyStream(ostream, istream);
										ostream.flush();
										ostream.close();
										istream.close();
										//guardar datos en la BD
										ArchivoAdjunto archivoAux = new ArchivoAdjunto();
										archivoAux.setSolicitud(solicitud);
										archivoAux.setUrl(url);
										archivoAux.setUbicacion("");
										archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
										archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
										archivoAux.setUsuario(usuarioLogueado);
										archivoAux.setFechaCreacion(new Date());
										entityManager.persist(archivoAux);
										entityManager.flush();
										
										entityManager.remove(archivo.getArchivo());
										entityManager.flush();
										
										
										
										ConceptoDTO objetoAux = new ConceptoDTO();
										objetoAux.setNombreArchivo(nombreArchivo);
										objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
										listaArchivoGuardadoResp.add(objetoAux);
										objetoAux = null;
										
									} catch (FileNotFoundException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}
									catch (IOException e) {
										log.error("error al guardar archivo #0", e.toString());
										FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
									}catch (Exception e) {
										e.printStackTrace();
									}							
								}		
							}							
							
							List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());
							if(listaUsuarioCorreoagregados != null){
								/*setando los varlores del dto para el correo*/
								ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
								contenidoEmail.setTituloRespuesta("Rechazo individual solicitud ");
								contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
								contenidoEmail.setColor("ROJO");
								contenidoEmail.setAccion("Se Rechazo la Solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
								contenidoEmail.setAccionRespuesta("");
								contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
								contenidoEmail.setObservacionRespuesta(this.observacionesFinales);
								contenidoEmail.setObservacionEjecutivo(null);
								contenidoEmail.setOpcionFinal(2);	
								contenidoEmail.setSolicitud(solicitud);
								
								
								StringBuffer rutNombre = new StringBuffer();
								rutNombre.append(cliente.getRut());
								rutNombre.append(" / ");
								rutNombre.append(modificarTexto(cliente.getRazonSocial()));
								contenidoEmail.setRutNombre(rutNombre.toString());
								contenidoEmail.setSoloNombre(cliente.getRazonSocial());
								contenidoEmail.setCanalVenta(cliente.getCanalVenta());
								contenidoEmail.setSucursal(sucursal.getDescripcion());
								
								UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
								if(ususarioEmisor != null){
									contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
								}else{
									contenidoEmail.setEmisor(solicitud.getCodEmisor());
								}

								/* creacion de lista */
								List<ProrrogaDTO> listaProrrogasAux = new ArrayList<ProrrogaDTO>(0);
								ProrrogaDTO obejtoProrroga =  null;
								for(LcredSolicitudProrroga docto : listaProrrogas){
									if(docto != null){
									   obejtoProrroga = new ProrrogaDTO();
									   obejtoProrroga.setNumeroDocto(docto.getId().getNroCheque());
									   obejtoProrroga.setMontoFormateado(numberFormatter.format(docto.getId().getMonto()));
									   obejtoProrroga.setMotivoProrroga(this.motivoProrroga);
									   obejtoProrroga.setFechaVencicmiento(docto.getId().getVencActual());
									   obejtoProrroga.setFechaSolicitado(docto.getId().getVencNuevo());
									   listaProrrogasAux.add(obejtoProrroga);
									}
								}									
								
								
								Sucursal suc = obtenerObjetoSucursal(solicitud.getCodSucursal());
								if(suc != null){
									contenidoEmail.setSucursal(suc.getDescripcion());
								}else{
									contenidoEmail.setSucursal(solicitud.getCodSucursal());
								}
								
								contenidoEmail.setTipoSolicitud("Prorroga de Cheque");
								contenidoEmail.setTipoProrroga("Prorroga.");
								contenidoEmail.setMotivoProrroga(this.motivoProrroga);
								
								
							    /*datos de archivos */
								contenidoEmail.setListaArchivos(listaArchivoGuardado);
								contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
								
								/*datos de prorrogas*/
								contenidoEmail.setListaProrrogas(listaProrrogasAux);
								contenidoEmail.setListaObservaciones(listaObservaciones);

								List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
								if(listaUsuarioCorreoagregados != null){
									for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
										if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !((ucdto.getUsername().trim()).toLowerCase()).equals(solicitud.getCodEmisor().trim().toLowerCase())){
											log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
											if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
												if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
													ultimaListaCorreoPrueba.add(usuarioAux);	
													usuarioAux = new Usuariosegur();
												}													
											}
										}
									}
								}
								/*eliminar esto, cuando se establaque la solucion*/
								Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
								if(emisorCorreo != null){
									if(!ultimaListaCorreoPrueba.contains(emisorCorreo)){
										ultimaListaCorreoPrueba.add(emisorCorreo);
									}
									emisorCorreo = null;
								}
								Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
								if(correoAdministrador != null){
									ultimaListaCorreoPrueba.add(correoAdministrador);
									correoAdministrador = null;
								}
								contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);		
								try{
									if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
										emailAlerta.enviarSolicitudRespuestaProrroga(contenidoEmail);	
									}	
								}catch (Exception e) {
									log.debug("paso por el error #0"+ e.getMessage());
								}
							}
							
							insertarLogs(solicitud, 8);
							insertHitos(solicitud, estado, "NADA", 0);
							entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
							             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
							entityManager.flush();
						}
						
					}else{/*solo envio de correo de la aprobacion del usuario que acaba de aprobar*/
						this.mensajeGlogal = "La solicitud "+ solicitud.getId().getNumSolicitud() +" fue rechazada por "+ modificarTexto(usuarioLogueado.getNombre())+".";
						/*se agrega la observaciones final de una aprobacion final */
						LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
						Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitud.getId().getNumSolicitud());
						if(correlativo != null){
							id.setCorrelativo(correlativo);
							id.setFecha(new Date());
							id.setHora(new Date());
							id.setNumSolicitud(solicitud.getId().getNumSolicitud());
							id.setTipoSol(tipoSolicitudAux.getCodTipoSolicitud());
							id.setObservacion(this.observacionesFinales);
							id.setUsuario(usuarioSegur.getAlias());
							LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
							obser.setId(id);
							scoringService.persistSolicitudObservaciones(obser);
							insertarLogs(solicitud, 5);
						}
						List<ConceptoDTO> listaArchivoGuardadoResp = new ArrayList<ConceptoDTO>(0); 
						if(listaFileUploadedDTOs != null){
							for(FileUploadedDTO archivo :listaFileUploadedDTOs){
							   try {							
									OutputStream ostream = null;
									String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
									nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);
									String url = "archivos"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									String nombreArchivo = solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
									InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
									
									
									//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
									ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
									log.debug("url #0",archivo.getUploadItem().getContentType());
									IOUtils.copyStream(ostream, istream);
									ostream.flush();
									ostream.close();
									istream.close();
									//guardar datos en la BD
									ArchivoAdjunto archivoAux = new ArchivoAdjunto();
									archivoAux.setSolicitud(solicitud);
									archivoAux.setUrl(url);
									archivoAux.setUbicacion("");
									archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
									archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
									archivoAux.setUsuario(usuarioLogueado);
									archivoAux.setFechaCreacion(new Date());
									entityManager.persist(archivoAux);
									entityManager.flush();
									
									entityManager.remove(archivo.getArchivo());
									entityManager.flush();
									
									
									
									ConceptoDTO objetoAux = new ConceptoDTO();
									objetoAux.setNombreArchivo(nombreArchivo);
									objetoAux.setRutaCompleta(globalParameters.getAttachedFilesWebPath()+""+url);
									listaArchivoGuardadoResp.add(objetoAux);
									objetoAux = null;
									
								} catch (FileNotFoundException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}
								catch (IOException e) {
									log.error("error al guardar archivo #0", e.toString());
									FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
								}catch (Exception e) {
									e.printStackTrace();
								}							
							}		
						}	
						
						List<ConceptoDTO> listaObservaciones =  obntenerObservacionesEnConcepto(solicitud.getId().getNumSolicitud());

						if(listaUsuarioCorreoagregados != null){
							/*setando los varlores del dto para el correo*/
							ContenidoEmailSolicitudDTO contenidoEmail = new ContenidoEmailSolicitudDTO();
							contenidoEmail.setTituloRespuesta("Rechazo individual solicitud ");
							contenidoEmail.setCorreoEmisor(usuarioLogueado.getAlias());
							contenidoEmail.setColor("ROJO");
							contenidoEmail.setAccion("Se Rechazo la Solicitud N¬∞ "+ solicitud.getId().getNumSolicitud());
							contenidoEmail.setAccionRespuesta("");
							contenidoEmail.setUsuarioAprobador(modificarTexto(lcredUsuarioNivelEnc.getId().getNombreUsuario()));
							contenidoEmail.setObservacionRespuesta(this.observacionesFinales);
							contenidoEmail.setObservacionEjecutivo(null);
							contenidoEmail.setOpcionFinal(2);	
							contenidoEmail.setSolicitud(solicitud);
							
							
							StringBuffer rutNombre = new StringBuffer();
							rutNombre.append(cliente.getRut());
							rutNombre.append(" / ");
							rutNombre.append(modificarTexto(cliente.getRazonSocial()));
							contenidoEmail.setRutNombre(rutNombre.toString());
							contenidoEmail.setSoloNombre(cliente.getRazonSocial());
							contenidoEmail.setCanalVenta(cliente.getCanalVenta());
							contenidoEmail.setSucursal(sucursal.getDescripcion());
							
							UsuarioSegurDTO ususarioEmisor = scoringService.sacarDatosSessionUsuario(solicitud.getCodEmisor());
							if(ususarioEmisor != null){
								contenidoEmail.setEmisor(modificarTexto(ususarioEmisor.getNombre()));
							}else{
								contenidoEmail.setEmisor(solicitud.getCodEmisor());
							}

							/* creacion de lista */
							List<ProrrogaDTO> listaProrrogasAux = new ArrayList<ProrrogaDTO>(0);
							ProrrogaDTO obejtoProrroga =  null;
							for(LcredSolicitudProrroga docto : listaProrrogas){
								if(docto != null){
								   obejtoProrroga = new ProrrogaDTO();
								   obejtoProrroga.setNumeroDocto(docto.getId().getNroCheque());
								   obejtoProrroga.setMontoFormateado(numberFormatter.format(docto.getId().getMonto()));
								   obejtoProrroga.setMotivoProrroga(this.motivoProrroga);
								   obejtoProrroga.setFechaVencicmiento(docto.getId().getVencActual());
								   obejtoProrroga.setFechaSolicitado(docto.getId().getVencNuevo());
								   listaProrrogasAux.add(obejtoProrroga);
								}
							}									
							
							
							Sucursal suc = obtenerObjetoSucursal(solicitud.getCodSucursal());
							if(suc != null){
								contenidoEmail.setSucursal(suc.getDescripcion());
							}else{
								contenidoEmail.setSucursal(solicitud.getCodSucursal());
							}
							
							contenidoEmail.setTipoSolicitud("Prorroga de Cheque");
							contenidoEmail.setTipoProrroga("Prorroga.");
							contenidoEmail.setMotivoProrroga(this.motivoProrroga);
							
							
						    /*datos de archivos */
							contenidoEmail.setListaArchivos(listaArchivoGuardado);
							contenidoEmail.setListaArchivosRespuesta(listaArchivoGuardadoResp);
							contenidoEmail.setListaObservaciones(listaObservaciones);
							
							/*datos de prorrogas*/
							contenidoEmail.setListaProrrogas(listaProrrogasAux);
							
							List<Usuariosegur> ultimaListaCorreoPrueba = new ArrayList<Usuariosegur>(0);
							if(listaUsuarioCorreoagregados != null){
								for(SolicitudUsuarioCorreo ucdto : listaUsuarioCorreoagregados){
									if(ucdto != null && ucdto.getUsername() != null && ucdto.getCorreo() != null && !((ucdto.getUsername().trim()).toLowerCase()).equals(solicitud.getCodEmisor().trim().toLowerCase())){
										log.debug("ucdto.getAlias().trim() : #0, ucdto.getCorreoElectronico().trim() #1", ucdto.getUsername().trim(), ucdto.getCorreo().trim());
										Usuariosegur  usuarioAux =  scoringService.getUsuarioUsuarioSegurForUsername(ucdto.getUsername().trim(), ucdto.getCorreo().trim());
										if(usuarioAux != null && (usuarioAux.getEliminado() != null && usuarioAux.getEliminado().booleanValue() == false)){
											if(!ultimaListaCorreoPrueba.contains(usuarioAux)){
												ultimaListaCorreoPrueba.add(usuarioAux);	
												usuarioAux = new Usuariosegur();
											}													
										}
									}
								}
							}
							/*eliminar esto, cuando se establaque la solucion*/
							Usuariosegur emisorCorreo = scoringService.getUsuarioUsuarioSegurForUsername(usuarioLogueado.getAlias().trim(), usuarioLogueado.getCorreo().trim());
							if(emisorCorreo != null){
								if(!ultimaListaCorreoPrueba.contains(emisorCorreo)){
									ultimaListaCorreoPrueba.add(emisorCorreo);
								}
								emisorCorreo = null;
							}
							Usuariosegur correoAdministrador =scoringService.getUsuarioUsuarioSegurForUsername("ADMINISTRADOR", "sck@kupfer.cl");
							if(correoAdministrador != null){
								ultimaListaCorreoPrueba.add(correoAdministrador);
								correoAdministrador = null;
							}							
							contenidoEmail.setListaNuevosCorreos(ultimaListaCorreoPrueba);									
							
							try{
								if(emailAlerta != null && (wvarEnviaCorreo == true || !usuarioCargoAux.getAdministrador())){
									emailAlerta.enviarSolicitudRespuestaProrroga(contenidoEmail);	
								}	
							}catch (Exception e) {
								log.debug("paso por el error #0"+ e.getMessage());
							}
						}
						
						
						insertarLogs(solicitud, 8);
						insertHitos(solicitud, estado, "NADA", 0);
						entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol")
						             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
						entityManager.flush();
					}
				}	
			}
		}catch (Exception e) {
			log.error("Error, al rechazar la solicitud #0", e.getMessage());
		}
		
	}
	public void analizarSolicitudDerivada(){
		try{
			if(this.paginaIngreso == 11 || this.paginaIngreso == 12){	
				if(solicitud != null && venta != null){
					log.debug("solicitud #0 tipo de solicitud #1", solicitud.getId().getNumSolicitud(), tipoSolicitudAux.getCodTipoSolicitud());
					if(solicitud != null){
						if(solicitud.getEstado().equals("N")){
							this.mensajeGlogal = "La solicitud esta en analisis analista.";
							return;
						}else{
							this.mensajeGlogal = null;
						}
					}					
					
					if(this.modalAnalista.equals("B")){
						solicitud.setEstado("N");
						venta.setStatusSolicitud("N");
						venta.setFechaAnalisis(new Date());
						venta.setHoraAnalisis(new Date());
						venta.setUsuarioAnalisis(usuarioLogueado.getAlias());

						insertarLogs(solicitud, 9);
						LcredEstado estado = ObtenerEstadoSolictud("N");
						insertHitos(solicitud, estado, "NADA", 0);
						entityManager.createQuery("update LcredSolicitud set analizar=1 where id.numSolicitud=:sol")
						             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
						entityManager.flush();	
					}
					botonera = new BotonesDTO();
					if("Mixto".equals(solicitud.getCanal().trim())){
						validarBotonera(TipoCuentasKupferType.MX, solicitud);
					}else if("Kupfer Express".equals(solicitud.getCanal().trim())){
						validarBotonera(TipoCuentasKupferType.KX, solicitud);
					}else if("Grandes Cuentas".equals(solicitud.getCanal().trim())){
						validarBotonera(TipoCuentasKupferType.GC, solicitud);
					}
					evaludarDespuesAnalisis(solicitud);
					this.mensajeGlogal = null;
				}
			}else if(this.paginaIngreso == 21 || this.paginaIngreso == 22 || this.paginaIngreso == 23 ){	
				if(solicitud != null && credito != null){
					log.debug("solicitud #0 tipo de solicitud #1", solicitud.getId().getNumSolicitud(), tipoSolicitudAux.getCodTipoSolicitud());
					if(solicitud != null){
						if(solicitud.getEstado().equals("N")){
							this.mensajeGlogal = "La solicitud esta en analisis analista.";
							return;
						}else{
							this.mensajeGlogal = null;
						}
					}					
					
					if(this.modalAnalista.equals("B")){
						solicitud.setEstado("N");
						credito.setStatusSolicitud("N");
						credito.setFechaAnalisis(new Date());
						credito.setHoraAnalisis(new Date());
						credito.setUsuarioAnalisis(usuarioLogueado.getAlias());

						insertarLogs(solicitud, 9);
						LcredEstado estado = ObtenerEstadoSolictud("N");
						insertHitos(solicitud, estado, "NADA", 0);
						entityManager.createQuery("update LcredSolicitud set analizar=1 where id.numSolicitud=:sol")
						             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
						entityManager.flush();	
					}
					botonera = new BotonesDTO();
					if("Mixto".equals(solicitud.getCanal().trim())){
						validarBotonera(TipoCuentasKupferType.MX, solicitud);
					}else if("Kupfer Express".equals(solicitud.getCanal().trim())){
						validarBotonera(TipoCuentasKupferType.KX, solicitud);
					}else if("Grandes Cuentas".equals(solicitud.getCanal().trim())){
						validarBotonera(TipoCuentasKupferType.GC, solicitud);
					}
					this.mensajeGlogal = null;
				}
			}else if(this.paginaIngreso == 31 ){	
				if(solicitud != null && condicion != null){
					log.debug("solicitud #0 tipo de solicitud #1", solicitud.getId().getNumSolicitud(), tipoSolicitudAux.getCodTipoSolicitud());
					if(solicitud != null){
						if(solicitud.getEstado().equals("N")){
							this.mensajeGlogal = "La solicitud esta en analisis analista.";
							return;
						}else{
							this.mensajeGlogal = null;
						}
					}					
					if(this.modalAnalista.equals("B")){
						solicitud.setEstado("N");
						condicion.setStatusSolicitud("N");
						condicion.setFechaAnalisis(new Date());
						condicion.setHoraAnalisis(new Date());
						condicion.setUsuarioAnalisis(usuarioLogueado.getAlias());
	
						insertarLogs(solicitud, 9);
						LcredEstado estado = ObtenerEstadoSolictud("N");
						insertHitos(solicitud, estado, "NADA", 0);
						entityManager.createQuery("update LcredSolicitud set analizar=1 where id.numSolicitud=:sol")
						             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
						entityManager.flush();	
					}
					botonera = new BotonesDTO();
					
					if("Mixto".equals(solicitud.getCanal().trim())){
						validarBotonera(TipoCuentasKupferType.MX, solicitud);
					}else if("Kupfer Express".equals(solicitud.getCanal().trim())){
						validarBotonera(TipoCuentasKupferType.KX, solicitud);
					}else if("Grandes Cuentas".equals(solicitud.getCanal().trim())){
						validarBotonera(TipoCuentasKupferType.GC, solicitud);
					}
					evaludarDespuesAnalisis(solicitud);
					this.mensajeGlogal = null;
				}
			}else if (this.paginaIngreso == 41 || this.paginaIngreso == 43 || this.paginaIngreso == 44){	
				if(solicitud != null && solicitudOtra != null){
					log.debug("solicitud #0 tipo de solicitud #1", solicitud.getId().getNumSolicitud(), tipoSolicitudAux.getCodTipoSolicitud());
					if(solicitud != null){
						if(solicitud.getEstado().equals("N")){
							this.mensajeGlogal = "La solicitud esta en analisis analista.";
							return;
						}else{
							this.mensajeGlogal = null;
						}
					}					
					
					if(this.modalAnalista.equals("B")){
						solicitud.setEstado("N");
						solicitudOtra.setStatusSolicitud("N");
						solicitudOtra.setFechaAnalisis(new Date());
						solicitudOtra.setHoraAnalisis(new Date());
						solicitudOtra.setUsuarioAnalisis(usuarioLogueado.getAlias());
	
						insertarLogs(solicitud, 9);
						LcredEstado estado = ObtenerEstadoSolictud("N");
						insertHitos(solicitud, estado, "NADA", 0);
						entityManager.createQuery("update LcredSolicitud set analizar=1 where id.numSolicitud=:sol")
						             .setParameter("sol", solicitud.getId().getNumSolicitud()).executeUpdate();
						entityManager.flush();	
					}
					botonera = new BotonesDTO();
					
					if("Mixto".equals(solicitud.getCanal().trim())){
						validarBotonera(TipoCuentasKupferType.MX, solicitud);
					}else if("Kupfer Express".equals(solicitud.getCanal().trim())){
						validarBotonera(TipoCuentasKupferType.KX, solicitud);
					}else if("Grandes Cuentas".equals(solicitud.getCanal().trim())){
						validarBotonera(TipoCuentasKupferType.GC, solicitud);
					}
					
					evaludarDespuesAnalisis(solicitud);
					this.mensajeGlogal = null;
				}
			}

		}catch (Exception e) {
			log.error("Error, al cambiar el estado de la solicitud", e.getMessage());
		}
	}
	public void salirAnalisisSolicitudDerivada(){
		  log.debug("salir del pop.");	
		  if(this.salirDelMensaje == false){
			  this.salirDelMensaje = true;
		  }
	}
	public void validarBotoneraDerivadaOld(LcredSolicitud sol){
		try{
			if(sol != null){
				if(sol.getEstado().equals("B")){
					botonera.setAnalisis(true);
					botonera.setSalir(true);
					botonera.setHitos(true);
					botonera.setLogs(true);
					botonera.setObservaiones(true);
					botonera.setMuestraBotonAnalisisToCierraAnalisis(1); // boton analisis
				}else if(sol.getEstado().equals("SA")){
					botonera.setAprobar(true);
					botonera.setRechazar(true);
					botonera.setSalir(true);
					botonera.setObservaiones(true);
					botonera.setAdjuntar(true);
					botonera.setHitos(true);
					botonera.setLogs(true);
					botonera.setMuestraBotonAnalisisToCierraAnalisis(1); // boton analisis
				}else if(sol.getEstado().equals("N")){
					botonera.setAdjuntar(true);
					botonera.setCerrarAnalisis(true);
					botonera.setMuestraBotonAnalisisToCierraAnalisis(2); // boton cierra analisis
					botonera.setSalir(true);
					botonera.setObservaiones(true);	
					botonera.setHitos(true);
					botonera.setLogs(true);
				}else if(sol.getEstado().equals("DR")){
					SolicitudUsuarioDerivada suc = scoringService.
							getSolicitudUsuarioDerivacionForSolicitudIpPersonal(sol.getId().getNumSolicitud(),
									usuarioLogueado.getIdPersonal(), 
									sol.getEstadoEvaluacion());
					if(suc != null){
						if(suc.getEstado().getCodEstado().equals("AP")){
							botonera.setSalir(true);
							botonera.setObservaiones(true);	
							botonera.setHitos(true);
							botonera.setLogs(true);							
						}else{
							botonera.setAprobar(true);
							botonera.setRechazar(true);
							botonera.setAdjuntar(true);
							botonera.setSalir(true);
							botonera.setObservaiones(true);	
							botonera.setHitos(true);
							botonera.setLogs(true);							
						}
					}else{
						botonera.setSalir(true);
						botonera.setHitos(true);
						botonera.setLogs(true);
						botonera.setObservaiones(true);						
					}
				}
			}
		}catch (Exception e) {
			log.error("Error, al setear al botenera", e.getMessage());
		}
	}
	public void insertarLogsDerivada(LcredSolicitud sol, int opcion){
		/*ingreso de logs*/
		try{
			if(opcion == 1){/*solo esta revisando la solicitud*/
				String codigo = "Z";
				Estados estadoLogs = scoringService.obtenerEstados(codigo.charAt(0));
				StringBuffer cadena = new StringBuffer();
				boolean exito = false;
				if(estadoLogs != null){
					cadena.append("Revisando la solicitud. ");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), String.valueOf(estadoLogs.getCodEstado()), estadoLogs.getDesEstado(), cadena.toString());
				}else{
					cadena.append("Revisando la solicitud. ");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), "", "", cadena.toString());
				}
						
				log.debug("verificacion si inserto registro logs #0", exito);
			}else if(opcion == 2){/*aca se esta daando aprobaciones */
				String codigo = "A";
				Estados estadoLogs = scoringService.obtenerEstados(codigo.charAt(0));
				StringBuffer cadena = new StringBuffer();
				boolean exito = false;
				if(estadoLogs != null){
					cadena.append("Se da aprobaci√≥n la solicitud.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), String.valueOf(estadoLogs.getCodEstado()), estadoLogs.getDesEstado(), cadena.toString());
				}else{
					cadena.append("Se da aprobaci√≥n la solicitud.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), "", "", cadena.toString());
				}
						
				log.debug("verificacion si inserto registro logs #0", exito);
				
				
			}else if(opcion == 3){/*aca se cambia elestado salir sin modifica */
				String codigo = "X";
				Estados estadoLogs = scoringService.obtenerEstados(codigo.charAt(0));
				StringBuffer cadena = new StringBuffer();
				boolean exito = false;
				if(estadoLogs != null){
					cadena.append("Salir de la solicitud sin modificar.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), String.valueOf(estadoLogs.getCodEstado()), estadoLogs.getDesEstado(), cadena.toString());
				}else{
					cadena.append("Se da aprobaci√≥n la solicitud.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), "", "", cadena.toString());
				}
						
				log.debug("verificacion si inserto registro logs #0", exito);				
				
			}else if(opcion == 4){/*aca se cambia elestado salir con modifica */
				String codigo = "Y";
				Estados estadoLogs = scoringService.obtenerEstados(codigo.charAt(0));
				StringBuffer cadena = new StringBuffer();
				boolean exito = false;
				if(estadoLogs != null){
					cadena.append("Salir de la solicitud sin modificar.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), String.valueOf(estadoLogs.getCodEstado()), estadoLogs.getDesEstado(), cadena.toString());
				}else{
					cadena.append("Se da aprobaci√≥n la solicitud.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), "", "", cadena.toString());
				}
						
				log.debug("verificacion si inserto registro logs #0", exito);				
				
			}else if(opcion == 5){
				String codigo = "O";
				Estados estadoLogs = scoringService.obtenerEstados(codigo.charAt(0));
				StringBuffer cadena = new StringBuffer();
				boolean exito = false;
				if(estadoLogs != null){
					cadena.append("Ingresa de observaciones de  la solicitud.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), String.valueOf(estadoLogs.getCodEstado()), estadoLogs.getDesEstado(), cadena.toString());
				}else{
					cadena.append("Ingresa de observaciones de  la solicitud.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), "", "", cadena.toString());
				}
						
				log.debug("verificacion si inserto registro logs #0", exito);					
			}else if(opcion == 6){
				String codigo = "D";
				Estados estadoLogs = scoringService.obtenerEstados(codigo.charAt(0));
				StringBuffer cadena = new StringBuffer();
				boolean exito = false;
				if(estadoLogs != null){
					cadena.append("Devoluci√≥n de la solicitud.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), String.valueOf(estadoLogs.getCodEstado()), estadoLogs.getDesEstado(), cadena.toString());
				}else{
					cadena.append("Devoluci√≥n de la solicitud.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), "", "", cadena.toString());
				}
						
				log.debug("verificacion si inserto registro logs #0", exito);					
			}else if(opcion == 7){
				String codigo = "N";
				Estados estadoLogs = scoringService.obtenerEstados(codigo.charAt(0));
				StringBuffer cadena = new StringBuffer();
				boolean exito = false;
				if(estadoLogs != null){
					cadena.append("Anular de la solicitud.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), String.valueOf(estadoLogs.getCodEstado()), estadoLogs.getDesEstado(), cadena.toString());
				}else{
					cadena.append("Anular de la solicitud.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), "", "", cadena.toString());
				}
						
				log.debug("verificacion si inserto registro logs #0", exito);					
			}else if(opcion == 8){
				String codigo = "A";
				Estados estadoLogs = scoringService.obtenerEstados(codigo.charAt(0));
				StringBuffer cadena = new StringBuffer();
				boolean exito = false;
				if(estadoLogs != null){
					cadena.append("Aprobar de la solicitud.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), String.valueOf(estadoLogs.getCodEstado()), estadoLogs.getDesEstado(), cadena.toString());
				}else{
					cadena.append("Aprobar de la solicitud.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), "", "", cadena.toString());
				}
						
				log.debug("verificacion si inserto registro logs #0", exito);					
			}else if(opcion == 9){
				String codigo = "K";
				Estados estadoLogs = scoringService.obtenerEstados(codigo.charAt(0));
				StringBuffer cadena = new StringBuffer();
				boolean exito = false;
				if(estadoLogs != null){
					cadena.append("Analisis Ejecutivo de la solicitud.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), String.valueOf(estadoLogs.getCodEstado()), estadoLogs.getDesEstado(), cadena.toString());
				}else{
					cadena.append("Analisis Ejecutivo de la solicitud.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), "", "", cadena.toString());
				}
						
				log.debug("verificacion si inserto registro logs #0", exito);					
			}else if(opcion == 10){
				String codigo = "Q";
				Estados estadoLogs = scoringService.obtenerEstados(codigo.charAt(0));
				StringBuffer cadena = new StringBuffer();
				boolean exito = false;
				if(estadoLogs != null){
					cadena.append("Analisis Analista de la solicitud.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), String.valueOf(estadoLogs.getCodEstado()), estadoLogs.getDesEstado(), cadena.toString());
				}else{
					cadena.append("Analisis Analista de la solicitud.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), "", "", cadena.toString());
				}
						
				log.debug("verificacion si inserto registro logs #0", exito);					
			}else if(opcion == 11){ /*rechazo*/
				String codigo = "R";
				Estados estadoLogs = scoringService.obtenerEstados(codigo.charAt(0));
				StringBuffer cadena = new StringBuffer();
				boolean exito = false;
				if(estadoLogs != null){
					cadena.append("Rechazada de la solicitud.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), String.valueOf(estadoLogs.getCodEstado()), estadoLogs.getDesEstado(), cadena.toString());
				}else{
					cadena.append("Rechazada de la solicitud.");
					exito = scoringService.persistSolicitudLogs(sol.getId().getNumSolicitud(), usuarioSegur.getAlias(), new Date(), "", "", cadena.toString());
				}
						
				log.debug("verificacion si inserto registro logs #0", exito);					
			}
			
			
			
			
			
		}catch (Exception e) {
			log.error("Error, al insertar el logs de la solicitud #0", e.getMessage());
		}
	}

	public void aprobarToRechazarPorAdministrador(Long idSolicitud,List<SolicitudUsuarioDerivada> listaDerivados){
		boolean exitoSud = false;
		boolean mensaje = true;
		int verificadosObligados = 0;
		int cantVeriObligadosAprobado = 0;
		int cantVeriObligadosRechazado = 0;
		boolean cambioEstadosolicitud = false;	
		LcredSolicitud solicitudAdmin = null;
		int codigoTipoSolicitud = 0;
		log.debug("el numero de la solicitud es : #0", idSolicitud);
		log.debug("cometarios de autizado #0", this.observacionesAutirzador);
		if(this.observacionesAutirzador == null){
			
		}else{
			if("".equals(this.observacionesAutirzador)){
				
			}
		}
		
		if(idSolicitud != null){
			/* se saca la solicitud para actualizar si marca todos*/
			try{
				solicitudAdmin = (LcredSolicitud)entityManager.
						createQuery("select s from LcredSolicitud s where s.id.numSolicitud=:numSolicitud")
						.setParameter("numSolicitud", idSolicitud).getSingleResult();
				
				 if((solicitudAdmin.getTipTiposol().trim()).equals(TipoSolicitudType.V1N.getNombre()) || 
						 (solicitudAdmin.getTipTiposol().trim()).equals(TipoSolicitudType.V1C.getNombre())){
					 if((solicitudAdmin.getTipTiposol().trim()).equals(TipoSolicitudType.V1N.getNombre())){
						 codigoTipoSolicitud = 11;
					 }else if((solicitudAdmin.getTipTiposol().trim()).equals(TipoSolicitudType.V1C.getNombre())){
						 codigoTipoSolicitud = 12;
					 }
					 
				 }else if((solicitudAdmin.getTipTiposol().trim()).equals(TipoSolicitudType.LC1.getNombre()) || 
				              (solicitudAdmin.getTipTiposol().trim()).equals(TipoSolicitudType.LC2.getNombre()) ||
						      (solicitudAdmin.getTipTiposol().trim()).equals(TipoSolicitudType.LC3.getNombre())){
					 if((solicitudAdmin.getTipTiposol().trim()).equals(TipoSolicitudType.LC1.getNombre())){
						 codigoTipoSolicitud = 21; 
					 }else if ((solicitudAdmin.getTipTiposol().trim()).equals(TipoSolicitudType.LC2.getNombre())){
						 codigoTipoSolicitud = 22; 
					 }else if((solicitudAdmin.getTipTiposol().trim()).equals(TipoSolicitudType.LC3.getNombre())){
						 codigoTipoSolicitud = 23;
					 }
				 }else if((solicitudAdmin.getTipTiposol().trim()).equals(TipoSolicitudType.CR1.getNombre()) || 
				    		   (solicitudAdmin.getTipTiposol().trim()).equals(TipoSolicitudType.CR2.getNombre()) ||
						       (solicitudAdmin.getTipTiposol().trim()).equals(TipoSolicitudType.CRP3.getNombre()) ||  
						       (solicitudAdmin.getTipTiposol().trim()).equals(TipoSolicitudType.CRP4.getNombre())){
					 codigoTipoSolicitud = 31;
					 
				 }else if((solicitudAdmin.getTipTiposol().trim()).equals(TipoSolicitudType.OS1.getNombre()) || 
					    	   (solicitudAdmin.getTipTiposol().trim()).equals(TipoSolicitudType.OS2.getNombre()) || 
							   (solicitudAdmin.getTipTiposol().trim()).equals(TipoSolicitudType.OS.getNombre())){/***************** Bloqueo y Desbloqueo ***********************/
					 codigoTipoSolicitud = 41;
								 
		        }else if((solicitudAdmin.getTipTiposol().trim()).equals(TipoSolicitudType.OS3.getNombre())){/***************** Creacion DM ***********************/
		        	 codigoTipoSolicitud = 43; 
			    }else if((solicitudAdmin.getTipTiposol().trim()).equals(TipoSolicitudType.OS4.getNombre())){/********************* Prorroga ********************/
			    	 codigoTipoSolicitud = 44;
			    }			
				
				
			}catch (NoResultException e) {
				solicitudAdmin = null;
				mensaje = false;
			}
			
			
			if(listaDerivados != null && solicitudAdmin != null){
				try{
					log.debug("revisar la lista de se setiaron los seleccionado");
					for(SolicitudUsuarioDerivada sud: listaDerivados){
						if(sud.getConfirmacion() == null){
							log.debug("muestra #0", sud.getApruebaRechazo());
							if(sud.getApruebaRechazo() != null && !"".equals(sud.getApruebaRechazo())){
								
								/*se debe tomar la la instancia del objeto de derivado*/
								LcredEstado estadoAux = null;
								if("Aprobar".equals(sud.getApruebaRechazo())){
									estadoAux = scoringService.obtenerEstado("AP");
								}else if("Rechazar".equals(sud.getApruebaRechazo())){
									estadoAux = scoringService.obtenerEstado("RP");
								}
								
								if(estadoAux != null){
									if(sud != null){
										/*actualiza la derivacion del usuario*/
										sud.setConfirmacion(true);
										sud.setEstado(estadoAux);
										sud.setUsernameAutorizacion(usuarioLogueado.getAlias());
										exitoSud = scoringService.mergerSolicitudUsuarioDerivacion(sud);
										log.debug(exitoSud);
										if(exitoSud){
											/*insertar un hito desde la actualizacion de administrador*/
											Usuariosegur usuarioHito = sud.getUsuario();
											if(usuarioHito != null){
												insertHitosRespuestaAdministrador(solicitudAdmin, estadoAux, "NADA", 0, usuarioHito);
												
												LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
												Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitudAdmin.getId().getNumSolicitud());
												if(correlativo != null){
													id.setCorrelativo(correlativo);
													id.setFecha(new Date());
													id.setHora(new Date());
													id.setNumSolicitud(solicitudAdmin.getId().getNumSolicitud());
													id.setTipoSol(String.valueOf(codigoTipoSolicitud));
													id.setObservacion(this.observacionesAutirzador);
													id.setUsuario(usuarioLogueado.getAlias());
													LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
													obser.setId(id);
													scoringService.persistSolicitudObservaciones(obser);
													insertarLogs(solicitudAdmin, 5);
												}											
											}
										}
									}
								}
							}
						
						}
					}
				
				}catch (Exception e) {
					log.error("error, al actualizar las asiganciones seleccionadas #0", e.getMessage());
					mensaje = false;
				}
				
				
				
				/*verificar si los cambio a todos cambiar el estado de la solicitud*/
				List<SolicitudUsuarioDerivada> listaVerificacion = scoringService.getSolicitudUsuarioDerivacionForSolicitudEstado(solicitudAdmin.getId().getNumSolicitud(),solicitudAdmin.getEstadoEvaluacion());
				if(listaVerificacion != null){
					/*verificar cantidad de usuarios obligatorios debe aprobar*/
					for(SolicitudUsuarioDerivada sudAux : listaVerificacion){
						if(sudAux.getConfirmacionObligatoria() == true){
							verificadosObligados++;
						}
					}
					/*verificar la cantidad de aprobados, rechazados, la cantidad de usuarios*/
					for(SolicitudUsuarioDerivada sudAux2 : listaVerificacion){
						if(sudAux2.getEstado().getCodEstado().equals("AP")){
							if(sudAux2.getConfirmacion()){
								if(sudAux2.getConfirmacionObligatoria()){
									cantVeriObligadosAprobado++;
								}
							}
						}else if(sudAux2.getEstado().getCodEstado().equals("RP")){
							if(sudAux2.getConfirmacion()){
								if(sudAux2.getConfirmacionObligatoria()){
									cantVeriObligadosRechazado++;
								}
							}								
						}
					}
				}
				
				if(verificadosObligados == (cantVeriObligadosAprobado + cantVeriObligadosRechazado)){
					cambioEstadosolicitud = true;
				}			
				
				if(cambioEstadosolicitud){
					  if((solicitudAdmin.getTipTiposol().trim()).equals(TipoSolicitudType.V1N.getNombre()) || 
						 (solicitudAdmin.getTipTiposol().trim()).equals(TipoSolicitudType.V1C.getNombre())){
							try{ 
								 venta = (LcredSolicitudVtapuntual)entityManager
										 .createQuery("Select vp from LcredSolicitudVtapuntual vp where vp.numSolicitud=:solAux")
										 .setParameter("solAux", solicitudAdmin.getId().getNumSolicitud()).getSingleResult();
								 if(venta != null){
									    solicitudAdmin.setEstado("DR");
									    solicitudAdmin.setAnalizar(true);
										venta.setStatusSolicitud("DR");
										boolean exitoUno = scoringService.mergerSolicitud(solicitudAdmin);
										boolean exitoDos = scoringService.mergerSolicitudVentaPuntual(venta);
										entityManager.refresh(solicitudAdmin);
										entityManager.refresh(venta);	
										log.debug("se actualiza solicitud #0", exitoUno);
										log.debug("se actualiza venta #0",exitoDos);
								 }
							}catch (Exception e) {
								log.debug("no existe datos de venta puntual");
								mensaje = false;
							}
		
				      }else if((solicitudAdmin.getTipTiposol().trim()).equals(TipoSolicitudType.LC1.getNombre()) || 
				              (solicitudAdmin.getTipTiposol().trim()).equals(TipoSolicitudType.LC2.getNombre()) ||
						      (solicitudAdmin.getTipTiposol().trim()).equals(TipoSolicitudType.LC3.getNombre())){
							    try{ 
									 credito = (LcredSolicitudLcredito)entityManager
											 .createQuery("Select lc from LcredSolicitudLcredito lc where lc.numSolicitud=:solAux")
											 .setParameter("solAux", solicitudAdmin.getId().getNumSolicitud()).getSingleResult();
									 if(credito != null){
										 	solicitudAdmin.setEstado("DR");
										 	solicitudAdmin.setAnalizar(true);
											credito.setStatusSolicitud("DR");
											boolean exitoUno = scoringService.mergerSolicitud(solicitudAdmin);
											boolean exitoDos = scoringService.mergerSolicitudLineaCredito(credito);
											entityManager.refresh(solicitudAdmin);
											entityManager.refresh(credito);		
											log.debug("se actualiza solicitud #0", exitoUno);
											log.debug("se actualiza credito #0",exitoDos);									
											
									 }
								 }catch (Exception e) {
									log.debug("no existe datos de linea credito.");
									mensaje = false;
								 }
				      }else if((solicitudAdmin.getTipTiposol().trim()).equals(TipoSolicitudType.CR1.getNombre()) || 
				    		   (solicitudAdmin.getTipTiposol().trim()).equals(TipoSolicitudType.CR2.getNombre()) ||
						       (solicitudAdmin.getTipTiposol().trim()).equals(TipoSolicitudType.CRP3.getNombre()) ||  
						       (solicitudAdmin.getTipTiposol().trim()).equals(TipoSolicitudType.CRP4.getNombre())){
				    	
							  try{ 
								  condicion = (LcredSolicitudCondiciones)entityManager
										 .createQuery("Select sc from LcredSolicitudCondiciones sc where sc.numSolicitud=:solAux")
										 .setParameter("solAux", solicitudAdmin.getId().getNumSolicitud()).getSingleResult();
								  if(condicion != null){
									  	solicitudAdmin.setEstado("DR");
									  	solicitudAdmin.setAnalizar(true);
										condicion.setStatusSolicitud("DR");
										boolean exitoUno = scoringService.mergerSolicitud(solicitudAdmin);
										boolean exitoDos = scoringService.mergerSolicitudCondiciones(condicion);
										entityManager.refresh(solicitudAdmin);
										entityManager.refresh(condicion);	
										log.debug("se actualiza solicitud #0", exitoUno);
										log.debug("se actualiza condicion #0",exitoDos);									
								  }
							  }catch (Exception e) {
								log.debug("no existe datos de condiciones.");
							  }		
								
									 
					  }else if((solicitudAdmin.getTipTiposol().trim()).equals(TipoSolicitudType.OS1.getNombre()) || 
					    	   (solicitudAdmin.getTipTiposol().trim()).equals(TipoSolicitudType.OS2.getNombre()) || 
							   (solicitudAdmin.getTipTiposol().trim()).equals(TipoSolicitudType.OS.getNombre())){/***************** Bloqueo y Desbloqueo ***********************/
		
				    	   try{
						 		solicitudOtra = scoringService.getSolicitudOtrasId(solicitudAdmin.getId().getNumSolicitud());
						 		if(solicitudOtra != null){
						 			solicitudAdmin.setEstado("DR");
						 			solicitudAdmin.setAnalizar(true);
									solicitudOtra.setStatusSolicitud("DR");
									boolean exitoUno = scoringService.mergerSolicitud(solicitudAdmin);
									boolean exitoDos = scoringService.mergerSolicitudOtrasSolicitudes(solicitudOtra);
									entityManager.refresh(solicitudAdmin);
									entityManager.refresh(solicitudOtra);	
									log.debug("se actualiza solicitud #0", exitoUno);
									log.debug("se actualiza bloque o desbloqueo #0",exitoDos);									
						 		}
								 
							}catch (Exception e) {
								log.debug("no existe datos de la tablas de otras solicitudes.");
								mensaje = false;
							}
								 
				      }else if((solicitudAdmin.getTipTiposol().trim()).equals(TipoSolicitudType.OS3.getNombre())){/***************** Creacion DM ***********************/
						 	try{
						 		solicitudOtra = scoringService.getSolicitudOtrasId(solicitudAdmin.getId().getNumSolicitud());
						 		if(solicitudOtra != null){
						 			solicitudAdmin.setEstado("DR");
						 			solicitudAdmin.setAnalizar(true);
									solicitudOtra.setStatusSolicitud("DR");
									boolean exitoUno = scoringService.mergerSolicitud(solicitudAdmin);
									boolean exitoDos = scoringService.mergerSolicitudOtrasSolicitudes(solicitudOtra);
									entityManager.refresh(solicitudAdmin);
									entityManager.refresh(solicitudOtra);	
									log.debug("se actualiza solicitud #0", exitoUno);
									log.debug("se actualiza creacion de DM #0",exitoDos);									
						 		}				 		
								 
							}catch (Exception e) {
								log.debug("no existe datos de la tablas de otras solicitudes.");
								mensaje = false;
							}					 
					  }else if((solicitudAdmin.getTipTiposol().trim()).equals(TipoSolicitudType.OS4.getNombre())){/********************* Prorroga ********************/
						 	try{
						 		solicitudOtra = scoringService.getSolicitudOtrasId(solicitudAdmin.getId().getNumSolicitud());
						 		if(solicitudOtra != null){
						 			solicitudAdmin.setEstado("DR");
						 			solicitudAdmin.setAnalizar(true);
									solicitudOtra.setStatusSolicitud("DR");
									boolean exitoUno = scoringService.mergerSolicitud(solicitudAdmin);
									boolean exitoDos = scoringService.mergerSolicitudOtrasSolicitudes(solicitudOtra);
									entityManager.refresh(solicitudAdmin);
									entityManager.refresh(solicitudOtra);	
									log.debug("se actualiza solicitud #0", exitoUno);
									log.debug("se actualiza prorrogas #0",exitoDos);									
						 		}					 		
						 		
							}catch (Exception e) {
								log.debug("no existe datos de la tablas de otras solicitudes.");
								mensaje = false;
							}				
					  }			
				}
				
				
				if(this.solicitudLogHitos != null){
					sacarLogHitosPagina();
				}
				
				if(mensaje){
					this.mensajeGlogal = "Se realizaron las actualizaciones de las asignaciones de la solicitud.";
					this.observacionesAutirzador = null;
				}else{
					this.mensajeGlogal = "Se produjo un problema en la actualizaci√≥n en alguna asignaci√≥n";
				}
			}
		}	
	}
	
	public void insertHitosRespuestaAdministrador(LcredSolicitud solAux, LcredEstado estadoAux, String accion ,int cantidad, Usuariosegur usuarioAux){
		try{
			SolicitudHitos hitos = new SolicitudHitos();
			if("NADA".equals(accion)){
				hitos.setEmisor("");
				hitos.setUsuarioActual(usuarioAux.getAlias());
				hitos.setFechaHora(new Date());
				hitos.setCodigoEstado(estadoAux.getCodEstado());
				hitos.setDescripcionEstado(estadoAux.getDesEstado());
				hitos.setIdSolicitud(solAux.getId().getNumSolicitud());
				hitos.setUsuarioActual(usuarioAux.getAlias());
				hitos.setAccionAdministrador(estadoAux.getDesEstado() +" por el Administrador.");
			}
			try{
				long numero = scoringService.obtenerNumeroHitoToLog(1);
				hitos.setSystemId(numero);
				boolean exito = scoringService.persistSolicitudHitos(hitos);
				log.debug("verificacion si inserto registro hitos #0", exito);
				
			}catch (Exception e) {
				log.error("Error, al insertar el hitos de la solicitud #0", e.getMessage());
			}				
			
		}catch (Exception e) {
			log.error("Error, al insertar los hitos de respuesta.", e.getMessage());
		}
		
	}
	
	
	
	private List<UploadItem> uploadFileRespuesta = new ArrayList<UploadItem>();
	public List<UploadItem> getUploadFileRespuesta() { return this.uploadFileRespuesta; }
	public void setUploadFileRespuesta(List<UploadItem> uploadFile) { this.uploadFileRespuesta = uploadFile; }
	public void guardarArchivoRespuesta() {
		List<FileUploadedDTO> listaFileUploadedDTOsNew  = new ArrayList<FileUploadedDTO>(0);
		if(uploadFileRespuesta.size() > 0){
			if(uploadFileRespuesta == null || uploadFileRespuesta.isEmpty()) {
				FacesMessages.instance().add(Severity.ERROR, "El archivo no ha sido cargado" );
				return;
			}
			if(uploadFileRespuesta.get(0) == null) {
				FacesMessages.instance().add(Severity.ERROR, "El archivo no ha sido cargado" );
				return;
			}
			
			

			FileUploadedDTO file = null;
			for(UploadItem archivo :uploadFileRespuesta){
				file = new FileUploadedDTO();
				file.setTipo(this.tipoSolicitudAux);				
				file.setUploadItem(archivo);
				file.setNombreArchivo(archivo.getFileName());
				try{
					if(archivo != null){
						try{
							FileInputStream fin = new FileInputStream(archivo.getFile());
							byte fileContent[] = new byte[(int)archivo.getFileSize()];
							fin.read(fileContent);
							Attachment archivoAbjunto = new Attachment();
							archivoAbjunto.setContentType(archivo.getContentType());
							archivoAbjunto.setData(fileContent);
							archivoAbjunto.setName(archivo.getFileName());
							archivoAbjunto.setSize(archivo.getFileSize());
							file.setArchivo(archivoAbjunto);
							file.setEliminar(true);
						} catch (Exception e) {
							FacesMessages.instance().add(Severity.WARN,"A ocurrido un error al momento de cargar el archivo para la solicitud.");
						}
					}
				}catch (Exception e) {
					log.error("Error, al gurdar los archivo temporalmente #0", e.getMessage());
				}
				listaFileUploadedDTOsNew.add(file);
				file = null;
			}
			
			/*ingresar los archvios adjuntos despuies de la solcitud aprobada*/
			if(this.paginaIngreso == 11 || this.paginaIngreso == 12){
				if(listaFileUploadedDTOsNew != null && listaFileUploadedDTOsNew.size() != 0){
					for(FileUploadedDTO archivo :listaFileUploadedDTOsNew){
					   try {							
							OutputStream ostream = null;
							String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
							nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);
							
							String url = "archivosRespuesta"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
							InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
							
							//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
							ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
							log.debug("url #0",archivo.getUploadItem().getContentType());
							IOUtils.copyStream(ostream, istream);
							ostream.flush();
							ostream.close();
							istream.close();
							//guardar datos en la BD
							ArchivoAdjunto archivoAux = new ArchivoAdjunto();
							archivoAux.setSolicitud(solicitud);
							archivoAux.setUrl(url);
							archivoAux.setUbicacion("");
							archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
							archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
							archivoAux.setUsuario(usuarioLogueado);	
							archivoAux.setFechaCreacion(new Date());
							entityManager.persist(archivoAux);
							entityManager.flush();
							
						} catch (FileNotFoundException e) {
							log.error("error al guardar archivo #0", e.toString());
							FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
						}
						catch (IOException e) {
							log.error("error al guardar archivo #0", e.toString());
							FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
						}catch (Exception e) {
							e.printStackTrace();
						}							
					}	
				}

			}else if(this.paginaIngreso == 21 || this.paginaIngreso == 22 || this.paginaIngreso == 23 ){
				if(listaFileUploadedDTOsNew != null && listaFileUploadedDTOsNew.size() != 0){
					for(FileUploadedDTO archivo :listaFileUploadedDTOsNew){
					   try {							
							OutputStream ostream = null;
							String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
							nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);

							String url = "archivosRespuestaLC"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
							InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
							
							
							//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
							ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
							log.debug("url #0",archivo.getUploadItem().getContentType());
							IOUtils.copyStream(ostream, istream);
							ostream.flush();
							ostream.close();
							istream.close();
							//guardar datos en la BD
							ArchivoAdjunto archivoAux = new ArchivoAdjunto();
							archivoAux.setSolicitud(solicitud);
							archivoAux.setUrl(url);
							archivoAux.setUbicacion("");
							archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
							archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
							archivoAux.setUsuario(usuarioLogueado);		
							archivoAux.setFechaCreacion(new Date());
							entityManager.persist(archivoAux);
							entityManager.flush();
							
						} catch (FileNotFoundException e) {
							log.error("error al guardar archivo #0", e.toString());
							FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
						}
						catch (IOException e) {
							log.error("error al guardar archivo #0", e.toString());
							FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
						}catch (Exception e) {
							e.printStackTrace();
						}							
					}		
				}

			}else if(this.paginaIngreso == 31){
				if(listaFileUploadedDTOsNew != null && listaFileUploadedDTOsNew.size() != 0){
					for(FileUploadedDTO archivo :listaFileUploadedDTOsNew){
					   try {							
							OutputStream ostream = null;
							String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
							nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);

							String url = "archivosRespuestaCC"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
							InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
							
							
							//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
							ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
							log.debug("url #0",archivo.getUploadItem().getContentType());
							IOUtils.copyStream(ostream, istream);
							ostream.flush();
							ostream.close();
							istream.close();
							//guardar datos en la BD
							ArchivoAdjunto archivoAux = new ArchivoAdjunto();
							archivoAux.setSolicitud(solicitud);
							archivoAux.setUrl(url);
							archivoAux.setUbicacion("");
							archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
							archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
							archivoAux.setUsuario(usuarioLogueado);	
							archivoAux.setFechaCreacion(new Date());
							entityManager.persist(archivoAux);
							entityManager.flush();
							
						} catch (FileNotFoundException e) {
							log.error("error al guardar archivo #0", e.toString());
							FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
						}
						catch (IOException e) {
							log.error("error al guardar archivo #0", e.toString());
							FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
						}catch (Exception e) {
							e.printStackTrace();
						}							
					}		
				}	

			}else if(this.paginaIngreso == 41){/* bloqueo y desbloqueo*/
				if(listaFileUploadedDTOsNew != null && listaFileUploadedDTOsNew.size() != 0){
					for(FileUploadedDTO archivo :listaFileUploadedDTOsNew){
					   try {							
							OutputStream ostream = null;
							String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
							nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);

							String url = "archivosRespuestaOS"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
							InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
							
							
							//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
							ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
							log.debug("url #0",archivo.getUploadItem().getContentType());
							IOUtils.copyStream(ostream, istream);
							ostream.flush();
							ostream.close();
							istream.close();
							//guardar datos en la BD
							ArchivoAdjunto archivoAux = new ArchivoAdjunto();
							archivoAux.setSolicitud(solicitud);
							archivoAux.setUrl(url);
							archivoAux.setUbicacion("");
							archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
							archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
							archivoAux.setUsuario(usuarioLogueado);	
							archivoAux.setFechaCreacion(new Date());
							entityManager.persist(archivoAux);
							entityManager.flush();
							
						} catch (FileNotFoundException e) {
							log.error("error al guardar archivo #0", e.toString());
							FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
						}
						catch (IOException e) {
							log.error("error al guardar archivo #0", e.toString());
							FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
						}catch (Exception e) {
							e.printStackTrace();
						}							
					}		
				}	

			}else if (this.paginaIngreso == 43){/* creacion de dm*/
				if(listaFileUploadedDTOsNew != null && listaFileUploadedDTOsNew.size() != 0){
					for(FileUploadedDTO archivo :listaFileUploadedDTOsNew){
					   try {							
							OutputStream ostream = null;
							String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
							nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);
							String url = "archivosRespuestaOS"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
							InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
							
							
							//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
							ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
							log.debug("url #0",archivo.getUploadItem().getContentType());
							IOUtils.copyStream(ostream, istream);
							ostream.flush();
							ostream.close();
							istream.close();
							//guardar datos en la BD
							ArchivoAdjunto archivoAux = new ArchivoAdjunto();
							archivoAux.setSolicitud(solicitud);
							archivoAux.setUrl(url);
							archivoAux.setUbicacion("");
							archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
							archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
							archivoAux.setUsuario(usuarioLogueado);	
							archivoAux.setFechaCreacion(new Date());
							entityManager.persist(archivoAux);
							entityManager.flush();
							
						} catch (FileNotFoundException e) {
							log.error("error al guardar archivo #0", e.toString());
							FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
						}
						catch (IOException e) {
							log.error("error al guardar archivo #0", e.toString());
							FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
						}catch (Exception e) {
							e.printStackTrace();
						}							
					}		
				}	


			}else if(this.paginaIngreso == 44){/* prorroga de cheques*/

				if(listaFileUploadedDTOsNew != null && listaFileUploadedDTOsNew.size() != 0){
					for(FileUploadedDTO archivo :listaFileUploadedDTOsNew){
					   try {							
							OutputStream ostream = null;
							String nombreArchivoAux = archivo.getNombreArchivo().replace(" ", "_");
							nombreArchivoAux = sacarCaracteresInvalidoParaWeb(nombreArchivoAux);
							String url = "archivosRespuestaOS"+"/"+ solicitud.getId().getNumSolicitud()+"_"+tipoSolicitudAux.getCodTipoSolicitud()+"_"+nombreArchivoAux;
							InputStream istream = new FileInputStream(archivo.getUploadItem().getFile());
							
							
							//la direccion donde se rescata el archivo esta dado por el path del global parameter + la url formada arriba
							ostream = new FileOutputStream(globalParameters.getAttachedFilesAbsolutePath()+url);
							log.debug("url #0",archivo.getUploadItem().getContentType());
							IOUtils.copyStream(ostream, istream);
							ostream.flush();
							ostream.close();
							istream.close();
							//guardar datos en la BD
							ArchivoAdjunto archivoAux = new ArchivoAdjunto();
							archivoAux.setSolicitud(solicitud);
							archivoAux.setUrl(url);
							archivoAux.setUbicacion("");
							archivoAux.setNombreAdjunto(archivo.getNombreArchivo());
							archivoAux.setTipo(ArchivoAdjuntoType.RESPUESTA);
							archivoAux.setUsuario(usuarioLogueado);	
							archivoAux.setFechaCreacion(new Date());
							entityManager.persist(archivoAux);
							entityManager.flush();
							
						} catch (FileNotFoundException e) {
							log.error("error al guardar archivo #0", e.toString());
							FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
						}
						catch (IOException e) {
							log.error("error al guardar archivo #0", e.toString());
							FacesMessages.instance().add(Severity.ERROR,"Error al guardar el archivo "+ archivo.getNombreArchivo());
						}catch (Exception e) {
							e.printStackTrace();
						}							
					}		
				}	
			}
			
			uploadFileRespuesta.clear();
			if(solicitud != null){
				evaludar(solicitud);
			}
			
			
		}
	}
	
	public void activarComoAdministrador(){
		log.debug("inicio metodo de activarComoAdministrador()");
		try{
			if(this.usuarioCargoAux != null){
			    this.usuarioCargoAux.setAdministrador(true);
				this.botonera = new BotonesDTO();
				if("Mixto".equals(solicitud.getCanal().trim())){
					validarBotonera(TipoCuentasKupferType.MX, solicitud);
				}else if("Kupfer Express".equals(solicitud.getCanal().trim())){
					validarBotonera(TipoCuentasKupferType.KX, solicitud);
				}else if("Grandes Cuentas".equals(solicitud.getCanal().trim())){
					validarBotonera(TipoCuentasKupferType.GC, solicitud);
				}
				
			}
			
			log.debug("usuarioCargoLogeado #0  y el usuarioCargoAux #1", usuarioCargoLogueado.getAdministrador(), usuarioCargoAux.getAdministrador());
			
			
		}catch (Exception e) {
			log.error("Error,  al cambiar el usuario normal a administrador", e.getMessage());
		}
		log.debug("final metodo de activarComoAdministrador()");
	}
	public void desactivarComoAdministrador(){
		log.debug("inicio metodo de desactivarComoAdministrador()");
		try{
			if(this.usuarioCargoAux != null){
				this.usuarioCargoAux.setAdministrador(false);
				this.botonera = new BotonesDTO();
				if("Mixto".equals(solicitud.getCanal().trim())){
					validarBotonera(TipoCuentasKupferType.MX, solicitud);
				}else if("Kupfer Express".equals(solicitud.getCanal().trim())){
					validarBotonera(TipoCuentasKupferType.KX, solicitud);
				}else if("Grandes Cuentas".equals(solicitud.getCanal().trim())){
					validarBotonera(TipoCuentasKupferType.GC, solicitud);
				}
			}
			log.debug("usuarioCargoLogeado #0  y el usuarioCargoAux #1", usuarioCargoLogueado.getAdministrador(), usuarioCargoAux.getAdministrador());
		}catch (Exception e) {
			log.error("Error,  al cambiar el usuario normal a administrador", e.getMessage());
		}
		log.debug("final metodo de desactivarComoAdministrador()");
	}	
	
	
	public String sacarCaracteresInvalidoParaWeb(String nombre){
		try{
			nombre = nombre.replaceAll("√°", "a");
			nombre = nombre.replaceAll("√©", "e");
			nombre = nombre.replaceAll("√≠", "i");
			nombre = nombre.replaceAll("√≥", "o");
			nombre = nombre.replaceAll("√∫", "u");
			nombre = nombre.replaceAll("√Å", "A");
			nombre = nombre.replaceAll("√â", "E");
			nombre = nombre.replaceAll("√ç", "I");
			nombre = nombre.replaceAll("√ì", "O");
			nombre = nombre.replaceAll("√ö", "U"); 
			
		}catch (Exception e) {
			log.error("Error, al sacar los caracteres de la palabra. #0", e.getMessage());
		}
		return nombre;
		
	}
	
	public void actualizarElMensajeRechazo(){
		 try{
			 if(this.observacionesFinales != null){
				 log.debug("Primera Parte ");
				 log.debug(this.observacionesFinales);
			 }
			 log.debug("********************** ");
			 if(this.mensajeRechazoSolicitud != null){
				 log.debug("Segunda Parte ");
				 log.debug(this.mensajeRechazoSolicitud);
			 }
			 
			 
		 }catch (Exception e) {
			log.error("Error, ", e.getMessage());
		 }
		
	}
	
	
	/*gets y Sets*/

	public LcredSolicitud getSolicitud() {
		return solicitud;
	}
	public void setSolicitud(LcredSolicitud solicitud) {
		this.solicitud = solicitud;
	}
	public Usuariosegur getUsuarioLogueado() {
		return usuarioLogueado;
	}
	public void setUsuarioLogueado(Usuariosegur usuarioLogueado) {
		this.usuarioLogueado = usuarioLogueado;
	}

	public Date getFechaActual() {
		return fechaActual;
	}
	public void setFechaActual(Date fechaActual) {
		this.fechaActual = fechaActual;
	}
	public LcredUsuarioNivelEnc getLcredUsuarioNivelEnc() {
		return lcredUsuarioNivelEnc;
	}
	public List<Sucursal> getListaSucursales() {
		return listaSucursales;
	}
	public void setListaSucursales(List<Sucursal> listaSucursales) {
		this.listaSucursales = listaSucursales;
	}
	public Sucursal getSucursal() {
		return sucursal;
	}
	public void setSucursal(Sucursal sucursal) {
		this.sucursal = sucursal;
	}
	public ClienteDTO getCliente() {
		return cliente;
	}
	public void setCliente(ClienteDTO cliente) {
		this.cliente = cliente;
	}
	public CompComercialDTO getComportamiento() {
		return comportamiento;
	}
	public void setComportamiento(CompComercialDTO comportamiento) {
		this.comportamiento = comportamiento;
	}
	public ExpoRiesgoKhDTO getExpoRiesgoKh() {
		return expoRiesgoKh;
	}
	public void setExpoRiesgoKh(ExpoRiesgoKhDTO expoRiesgoKh) {
		this.expoRiesgoKh = expoRiesgoKh;
	}
	public LcredEstado getLcredEstado() {
		return lcredEstado;
	}

	public void setLcredEstado(LcredEstado lcredEstado) {
		this.lcredEstado = lcredEstado;
	}

	public String getPagina() {
		return pagina;
	}

	public void setPagina(String pagina) {
		this.pagina = pagina;
	}

	public Long getIdSolicitud() {
		return idSolicitud;
	}


	public void setIdSolicitud(Long idSolicitud) {
		this.idSolicitud = idSolicitud;
	}

	public Long getSolicitudSeleccionada() {
		return solicitudSeleccionada;
	}

	public void setSolicitudSeleccionada(Long solicitudSeleccionada) {
		this.solicitudSeleccionada = solicitudSeleccionada;
	}

	@BypassInterceptors public String getFechaDeauda() {
		return fechaDeauda;
	}

	@BypassInterceptors public void setFechaDeauda(String fechaDeauda) {
		this.fechaDeauda = fechaDeauda;
	}

	@BypassInterceptors public Date getFechaActualCtaCte() {
		return fechaActualCtaCte;
	}

	@BypassInterceptors public void setFechaActualCtaCte(Date fechaActualCtaCte) {
		this.fechaActualCtaCte = fechaActualCtaCte;
	}

	public void setCtaCteList(List<DeudaActual> ctaCteList) {
		this.ctaCteList = ctaCteList;
	}

	public List<String> getListaFechas() {
		return listaFechas;
	}

	public void setListaFechas(List<String> listaFechas) {
		this.listaFechas = listaFechas;
	}
	public int getPaginaIngreso() {
		return paginaIngreso;
	}
	public void setPaginaIngreso(int paginaIngreso) {
		this.paginaIngreso = paginaIngreso;
	}
	public String getTituloIngreso() {
		return tituloIngreso;
	}
	public void setTituloIngreso(String tituloIngreso) {
		this.tituloIngreso = tituloIngreso;
	}
	public Long getMontoVtaPuntual() {
		return montoVtaPuntual;
	}
	public void setMontoVtaPuntual(Long montoVtaPuntual) {
		this.montoVtaPuntual = montoVtaPuntual;
	}
	public Long getPieVentaPuntual() {
		return pieVentaPuntual;
	}
	public void setPieVentaPuntual(Long pieVentaPuntual) {
		this.pieVentaPuntual = pieVentaPuntual;
	}
	public LcredSolicitudLcredito getCredito() {
		return credito;
	}
	public void setCredito(LcredSolicitudLcredito credito) {
		this.credito = credito;
	}
	public LcredSolicitudCondiciones getCondicion() {
		return condicion;
	}
	public void setCondicion(LcredSolicitudCondiciones condicion) {
		this.condicion = condicion;
	}
	public LcredSolicitudBloqueos getBloqueo() {
		return bloqueo;
	}
	public void setBloqueo(LcredSolicitudBloqueos bloqueo) {
		this.bloqueo = bloqueo;
	}
	public List<LcredSolicitudDm> getListaDms() {
		return listaDms;
	}
	public void setListaDms(List<LcredSolicitudDm> listaDms) {
		this.listaDms = listaDms;
	}
	public List<LcredSolicitudProrroga> getListaProrrogas() {
		return listaProrrogas;
	}
	public void setListaProrrogas(List<LcredSolicitudProrroga> listaProrrogas) {
		this.listaProrrogas = listaProrrogas;
	}
	public void setLcredUsuarioNivelEnc(LcredUsuarioNivelEnc lcredUsuarioNivelEnc) {
		this.lcredUsuarioNivelEnc = lcredUsuarioNivelEnc;
	}
	public String getMotivoCompra() {
		return motivoCompra;
	}
	public void setMotivoCompra(String motivoCompra) {
		this.motivoCompra = motivoCompra;
	}
	public String getObservacionesCompra() {
		return observacionesCompra;
	}
	public void setObservacionesCompra(String observacionesCompra) {
		this.observacionesCompra = observacionesCompra;
	}
	public Double getMargenGlogal() {
		return margenGlogal;
	}
	public void setMargenGlogal(Double margenGlogal) {
		this.margenGlogal = margenGlogal;
	}
	public String getProductos() {
		return productos;
	}
	public void setProductos(String productos) {
		this.productos = productos;
	}
	public String getFormaPago() {
		return formaPago;
	}
	public void setFormaPago(String formaPago) {
		this.formaPago = formaPago;
	}
	public List<ConceptoDTO> getListaArchivoGuardado() {
		return listaArchivoGuardado;
	}
	public void setListaArchivoGuardado(List<ConceptoDTO> listaArchivoGuardado) {
		this.listaArchivoGuardado = listaArchivoGuardado;
	}
	public String getObservacionesFinales() {
		return observacionesFinales;
	}
	public void setObservacionesFinales(String observacionesFinales) {
		this.observacionesFinales = observacionesFinales;
	}
	public String getTipoSolicitud() {
		return tipoSolicitud;
	}
	public void setTipoSolicitud(String tipoSolicitud) {
		this.tipoSolicitud = tipoSolicitud;
	}
	public LcredTipoSolicitud getTipoSolicitudAux() {
		return tipoSolicitudAux;
	}
	public void setTipoSolicitudAux(LcredTipoSolicitud tipoSolicitudAux) {
		this.tipoSolicitudAux = tipoSolicitudAux;
	}
	@BypassInterceptors public String getObservacionesModel() {
		return observacionesModel;
	}
	@BypassInterceptors public void setObservacionesModel(String observacionesModel) {
		this.observacionesModel = observacionesModel;
	}
	public List<LcredSolicitudObservaciones> getListaObservaciones() {
		return listaObservaciones;
	}
	public void setListaObservaciones(
			List<LcredSolicitudObservaciones> listaObservaciones) {
		this.listaObservaciones = listaObservaciones;
	}
	public String getMensajeGlogal() {
		return mensajeGlogal;
	}
	public void setMensajeGlogal(String mensajeGlogal) {
		this.mensajeGlogal = mensajeGlogal;
	}
	public String getPaginaVolver() {
		return paginaVolver;
	}
	public void setPaginaVolver(String paginaVolver) {
		this.paginaVolver = paginaVolver;
	}
	public boolean isSalirDelMensaje() {
		return salirDelMensaje;
	}
	public void setSalirDelMensaje(boolean salirDelMensaje) {
		this.salirDelMensaje = salirDelMensaje;
	}
	public List<FileUploadedDTO> getListaFileUploadedDTOs() {
		return listaFileUploadedDTOs;
	}
	public void setListaFileUploadedDTOs(List<FileUploadedDTO> listaFileUploadedDTOs) {
		this.listaFileUploadedDTOs = listaFileUploadedDTOs;
	}
	public String getNormalCuota() {
		return normalCuota;
	}
	public void setNormalCuota(String normalCuota) {
		this.normalCuota = normalCuota;
	}
	public Long getMontoNuevo() {
		return montoNuevo;
	}
	public void setMontoNuevo(Long montoNuevo) {
		this.montoNuevo = montoNuevo;
	}
	public Long getPieNuevo() {
		return pieNuevo;
	}
	public void setPieNuevo(Long pieNuevo) {
		this.pieNuevo = pieNuevo;
	}

	public String getInnNomRiesgo() {
		return innNomRiesgo;
	}

	public void setInnNomRiesgo(String innNomRiesgo) {
		this.innNomRiesgo = innNomRiesgo;
	}
	public Long getMontoLineaCredito() {
		return montoLineaCredito;
	}
	public void setMontoLineaCredito(Long montoLineaCredito) {
		this.montoLineaCredito = montoLineaCredito;
	}
	public String getcPago() {
		return cPago;
	}
	public void setcPago(String cPago) {
		this.cPago = cPago;
	}
	public String getClsRiesgo() {
		return clsRiesgo;
	}
	public void setClsRiesgo(String clsRiesgo) {
		this.clsRiesgo = clsRiesgo;
	}
	public String getcPagoNuevo() {
		return cPagoNuevo;
	}
	public void setcPagoNuevo(String cPagoNuevo) {
		this.cPagoNuevo = cPagoNuevo;
	}
	public String getClsRiesgoNuevo() {
		return clsRiesgoNuevo;
	}
	public void setClsRiesgoNuevo(String clsRiesgoNuevo) {
		this.clsRiesgoNuevo = clsRiesgoNuevo;
	}
	public List<CPagoDTO> getListaCondicionPagos() {
		return listaCondicionPagos;
	}
	public void setListaCondicionPagos(List<CPagoDTO> listaCondicionPagos) {
		this.listaCondicionPagos = listaCondicionPagos;
	}
	public List<ClsRiesgoDTO> getListaClsRiesgos() {
		return listaClsRiesgos;
	}
	public void setListaClsRiesgos(List<ClsRiesgoDTO> listaClsRiesgos) {
		this.listaClsRiesgos = listaClsRiesgos;
	}
	public List<String> getListaStringClsRiesgos() {
		return listaStringClsRiesgos;
	}
	public void setListaStringClsRiesgos(List<String> listaStringClsRiesgos) {
		this.listaStringClsRiesgos = listaStringClsRiesgos;
	}
	public List<String> getListaStringCdnPagos() {
		return listaStringCdnPagos;
	}
	public void setListaStringCdnPagos(List<String> listaStringCdnPagos) {
		this.listaStringCdnPagos = listaStringCdnPagos;
	}
	public List<String> getListaStringClsRiesgosNuevos() {
		return listaStringClsRiesgosNuevos;
	}
	public void setListaStringClsRiesgosNuevos(
			List<String> listaStringClsRiesgosNuevos) {
		this.listaStringClsRiesgosNuevos = listaStringClsRiesgosNuevos;
	}
	public List<String> getListaStringCdnPagosNuevos() {
		return listaStringCdnPagosNuevos;
	}
	public void setListaStringCdnPagosNuevos(List<String> listaStringCdnPagosNuevos) {
		this.listaStringCdnPagosNuevos = listaStringCdnPagosNuevos;
	}
	public String getInnNomRiesgoNueva() {
		return innNomRiesgoNueva;
	}
	public void setInnNomRiesgoNueva(String innNomRiesgoNueva) {
		this.innNomRiesgoNueva = innNomRiesgoNueva;
	}
	public Long getMontoLineaCreditoNuevo() {
		return montoLineaCreditoNuevo;
	}
	public void setMontoLineaCreditoNuevo(Long montoLineaCreditoNuevo) {
		this.montoLineaCreditoNuevo = montoLineaCreditoNuevo;
	}

	public String getDescripcionProyecto() {
		return descripcionProyecto;
	}
	public void setDescripcionProyecto(String descripcionProyecto) {
		this.descripcionProyecto = descripcionProyecto;
	}
	public Long getMontoCredito() {
		return montoCredito;
	}
	public void setMontoCredito(Long montoCredito) {
		this.montoCredito = montoCredito;
	}
	public String getPlazoEjecucion() {
		return plazoEjecucion;
	}
	public void setPlazoEjecucion(String plazoEjecucion) {
		this.plazoEjecucion = plazoEjecucion;
	}
	public Long getPotencialCompra() {
		return potencialCompra;
	}
	public void setPotencialCompra(Long potencialCompra) {
		this.potencialCompra = potencialCompra;
	}
	public String getConceptoNegocios() {
		return conceptoNegocios;
	}
	public void setConceptoNegocios(String conceptoNegocios) {
		this.conceptoNegocios = conceptoNegocios;
	}
	public String getRutNombresSocios() {
		return rutNombresSocios;
	}
	public void setRutNombresSocios(String rutNombresSocios) {
		this.rutNombresSocios = rutNombresSocios;
	}
	public String getObservacionesCredito() {
		return observacionesCredito;
	}
	public void setObservacionesCredito(String observacionesCredito) {
		this.observacionesCredito = observacionesCredito;
	}
	public boolean isCondicionRiesgo() {
		return condicionRiesgo;
	}
	public void setCondicionRiesgo(boolean condicionRiesgo) {
		this.condicionRiesgo = condicionRiesgo;
	}
	public boolean isCondicionPago() {
		return condicionPago;
	}
	public void setCondicionPago(boolean condicionPago) {
		this.condicionPago = condicionPago;
	}
	public boolean isComboCRiesgo() {
		return comboCRiesgo;
	}
	public void setComboCRiesgo(boolean comboCRiesgo) {
		this.comboCRiesgo = comboCRiesgo;
	}
	public boolean isComboCPago() {
		return comboCPago;
	}
	public void setComboCPago(boolean comboCPago) {
		this.comboCPago = comboCPago;
	}
	public String getMotivoRiesgoPago() {
		return motivoRiesgoPago;
	}
	public void setMotivoRiesgoPago(String motivoRiesgoPago) {
		this.motivoRiesgoPago = motivoRiesgoPago;
	}
	public boolean isCondicionRiesgoNew() {
		return condicionRiesgoNew;
	}
	public void setCondicionRiesgoNew(boolean condicionRiesgoNew) {
		this.condicionRiesgoNew = condicionRiesgoNew;
	}
	public boolean isCondicionPagoNew() {
		return condicionPagoNew;
	}
	public void setCondicionPagoNew(boolean condicionPagoNew) {
		this.condicionPagoNew = condicionPagoNew;
	}
	public String getOpcionBloqueoDesbloqueo() {
		return opcionBloqueoDesbloqueo;
	}
	public void setOpcionBloqueoDesbloqueo(String opcionBloqueoDesbloqueo) {
		this.opcionBloqueoDesbloqueo = opcionBloqueoDesbloqueo;
	}
	public String getMotivoBloDesbloqueo() {
		return motivoBloDesbloqueo;
	}
	public void setMotivoBloDesbloqueo(String motivoBloDesbloqueo) {
		this.motivoBloDesbloqueo = motivoBloDesbloqueo;
	}
	public String getOpcionBloqueoDesbloqueoNew() {
		return opcionBloqueoDesbloqueoNew;
	}
	public void setOpcionBloqueoDesbloqueoNew(String opcionBloqueoDesbloqueoNew) {
		this.opcionBloqueoDesbloqueoNew = opcionBloqueoDesbloqueoNew;
	}
	@BypassInterceptors public SolicitudUsuarioCorreo getUsuarioCorreo() {
		return usuarioCorreo;
	}
	@BypassInterceptors public void setUsuarioCorreo(SolicitudUsuarioCorreo usuarioCorreo) {
		this.usuarioCorreo = usuarioCorreo;
	}
	public String getMensajeExplicativo() {
		return mensajeExplicativo;
	}
	public void setMensajeExplicativo(String mensajeExplicativo) {
		this.mensajeExplicativo = mensajeExplicativo;
	}
	public List<DestinatarioDTO> getListaDestinatarios() {
		return listaDestinatarios;
	}
	public void setListaDestinatarios(List<DestinatarioDTO> listaDestinatarios) {
		this.listaDestinatarios = listaDestinatarios;
	}
	public List<SolicitudUsuarioCorreo> getListaUsuarioCorreoagregados() {
		return listaUsuarioCorreoagregados;
	}
	public void setListaUsuarioCorreoagregados(
			List<SolicitudUsuarioCorreo> listaUsuarioCorreoagregados) {
		this.listaUsuarioCorreoagregados = listaUsuarioCorreoagregados;
	}
	public List<SolicitudUsuarioCorreo> getListaDescripcionUsuariosCorreos() {
		return listaDescripcionUsuariosCorreos;
	}
	public void setListaDescripcionUsuariosCorreos(
			List<SolicitudUsuarioCorreo> listaDescripcionUsuariosCorreos) {
		this.listaDescripcionUsuariosCorreos = listaDescripcionUsuariosCorreos;
	}
	public List<SolicitudUsuarioCorreo> getListaUsuarioCorreos() {
		return listaUsuarioCorreos;
	}
	public void setListaUsuarioCorreos(List<SolicitudUsuarioCorreo> listaUsuarioCorreos) {
		this.listaUsuarioCorreos = listaUsuarioCorreos;
	}
	public List<LcredSolicitudDm> getListaClienteDMs() {
		return listaClienteDMs;
	}
	public void setListaClienteDMs(List<LcredSolicitudDm> listaClienteDMs) {
		this.listaClienteDMs = listaClienteDMs;
	}
	public String getMotivoProrroga() {
		return motivoProrroga;
	}
	public void setMotivoProrroga(String motivoProrroga) {
		this.motivoProrroga = motivoProrroga;
	}
	public String getAnalisisAprobacion() {
		return analisisAprobacion;
	}
	public void setAnalisisAprobacion(String analisisAprobacion) {
		this.analisisAprobacion = analisisAprobacion;
	}
	@BypassInterceptors public String getMensajeAnalisisAprobacion() {
		return mensajeAnalisisAprobacion;
	}
	@BypassInterceptors public void setMensajeAnalisisAprobacion(String mensajeAnalisisAprobacion) {
		this.mensajeAnalisisAprobacion = mensajeAnalisisAprobacion;
	}
	public List<SolicitudUsuarioCorreo> getListaCorreoAnaDer() {
		return listaCorreoAnaDer;
	}
	public void setListaCorreoAnaDer(List<SolicitudUsuarioCorreo> listaCorreoAnaDer) {
		this.listaCorreoAnaDer = listaCorreoAnaDer;
	}
	public LcredMotivoRechazo getMotivoRechazo() {
		return motivoRechazo;
	}
	public void setMotivoRechazo(LcredMotivoRechazo motivoRechazo) {
		this.motivoRechazo = motivoRechazo;
	}
	public List<LcredMotivoRechazo> getListaMotivosRechazos() {
		return listaMotivosRechazos;
	}
	public void setListaMotivosRechazos(
			List<LcredMotivoRechazo> listaMotivosRechazos) {
		this.listaMotivosRechazos = listaMotivosRechazos;
	}
	public List<LcredMotivoRechazo> getListaMotivosRechazosAgregados() {
		return listaMotivosRechazosAgregados;
	}
	public void setListaMotivosRechazosAgregados(
			List<LcredMotivoRechazo> listaMotivosRechazosAgregados) {
		this.listaMotivosRechazosAgregados = listaMotivosRechazosAgregados;
	}
	public String getMensajeRechazoSolicitud() {
		return mensajeRechazoSolicitud;
	}
	public void setMensajeRechazoSolicitud(String mensajeRechazoSolicitud) {
		this.mensajeRechazoSolicitud = mensajeRechazoSolicitud;
	}
	public boolean isModificarVenta() {
		return modificarVenta;
	}
	public void setModificarVenta(boolean modificarVenta) {
		this.modificarVenta = modificarVenta;
	}
	public String getModalAnalista() {
		return modalAnalista;
	}
	public void setModalAnalista(String modalAnalista) {
		this.modalAnalista = modalAnalista;
	}
	public BotonesDTO getBotonera() {
		return botonera;
	}
	public void setBotonera(BotonesDTO botonera) {
		this.botonera = botonera;
	}
	public UsuarioCargo getUsuarioCargoAux() {
		return usuarioCargoAux;
	}
	public void setUsuarioCargoAux(UsuarioCargo usuarioCargoAux) {
		this.usuarioCargoAux = usuarioCargoAux;
	}
	public boolean isHabilitarBotonAprobadoresInvolucrados() {
		return habilitarBotonAprobadoresInvolucrados;
	}
	public void setHabilitarBotonAprobadoresInvolucrados(
			boolean habilitarBotonAprobadoresInvolucrados) {
		this.habilitarBotonAprobadoresInvolucrados = habilitarBotonAprobadoresInvolucrados;
	}
	public boolean isModificarCredito() {
		return modificarCredito;
	}
	public void setModificarCredito(boolean modificarCredito) {
		this.modificarCredito = modificarCredito;
	}
	public boolean isModificarCondicion() {
		return modificarCondicion;
	}
	public void setModificarCondicion(boolean modificarCondicion) {
		this.modificarCondicion = modificarCondicion;
	}
	public boolean isModificarbloqueoToDesbloqueo() {
		return modificarbloqueoToDesbloqueo;
	}
	public void setModificarbloqueoToDesbloqueo(boolean modificarbloqueoToDesbloqueo) {
		this.modificarbloqueoToDesbloqueo = modificarbloqueoToDesbloqueo;
	}
	public boolean isModificarCreacionDM() {
		return modificarCreacionDM;
	}
	public void setModificarCreacionDM(boolean modificarCreacionDM) {
		this.modificarCreacionDM = modificarCreacionDM;
	}
	public boolean isModificarProrroga() {
		return modificarProrroga;
	}
	public void setModificarProrroga(boolean modificarProrroga) {
		this.modificarProrroga = modificarProrroga;
	}
	public String getTabGrilla() {
		return tabGrilla;
	}
	public void setTabGrilla(String tabGrilla) {
		this.tabGrilla = tabGrilla;
	}
	public List<SolicitudUsuarioCorreo> getListaCorreoSeleccionado() {
		return listaCorreoSeleccionado;
	}
	public void setListaCorreoSeleccionado(
			List<SolicitudUsuarioCorreo> listaCorreoSeleccionado) {
		this.listaCorreoSeleccionado = listaCorreoSeleccionado;
	}
	public Boolean getHabilitaMensajeDerivacion() {
		return habilitaMensajeDerivacion;
	}
	public void setHabilitaMensajeDerivacion(Boolean habilitaMensajeDerivacion) {
		this.habilitaMensajeDerivacion = habilitaMensajeDerivacion;
	}
	public String getAprobarRechazar() {
		return aprobarRechazar;
	}
	public void setAprobarRechazar(String aprobarRechazar) {
		this.aprobarRechazar = aprobarRechazar;
	}
	public String getMensajeAprobacionSolicitud() {
		return mensajeAprobacionSolicitud;
	}
	public void setMensajeAprobacionSolicitud(String mensajeAprobacionSolicitud) {
		this.mensajeAprobacionSolicitud = mensajeAprobacionSolicitud;
	}	
	public Boolean getHabilitaMensajeAprobacion() {
		return habilitaMensajeAprobacion;
	}
	public void setHabilitaMensajeAprobacion(Boolean habilitaMensajeAprobacion) {
		this.habilitaMensajeAprobacion = habilitaMensajeAprobacion;
	}	

	
	
	
	
	
	
	
	/****Variables Pdf*******/
	



	public List<SolicitudUsuarioCorreo> getListaUsuariosEspeciales() {
		return listaUsuariosEspeciales;
	}



	public void setListaUsuariosEspeciales(
			List<SolicitudUsuarioCorreo> listaUsuariosEspeciales) {
		this.listaUsuariosEspeciales = listaUsuariosEspeciales;
	}
	
	

	/*****PDF VENTA PUNTUAL*****/
	Date fechaHoy = new Date();
	public Date getFechaHoy() {
		return fechaHoy;
	}
	
	String obsAprobador = new String("ejemplo variable de observacion aprobador");
	public String getObsAprobador() {
		return obsAprobador;
	}
	
	String rechazos[] = {"var. ej. Rechazo 1", "var. ej. rechazo 2", "var. ej rechazo 3"};

	public String[] getRechazos() {
		return rechazos;
	}
	
	String obsRechazo = new String("ejemplo variable de observacion rechazos");
	public String getObsRechazo() {
		return obsRechazo;
	}
	
	String comentariosAdicionales = new String("Ejemplo comentarios adicionales");
	public String getComentariosAdicionales() {
		return comentariosAdicionales;
	}
	
	String ventaPuntual = new String("X");

	public String getVentaPuntual() {
		return ventaPuntual;
	}
	
	String ventaCuotas = new String("X");

	public String getVentaCuotas() {
		return ventaCuotas;
	}
	
	
	
	
	/***pdf linea credito ***/
	
	

	
	String innominado;
	public String getInnominado() {
		return this.innominado;
	}
	public void setInnominado(String innominado) {
		this.innominado = innominado;
	}	
	
	
	String nominacion;
	public String getNominacion() {
		return this.nominacion;
	}
	
	public void setNominacion(String nominacion) {
		 this.nominacion = nominacion;
	}
	
	
	String riesgoKupfer;
	public String getRiesgoKupfer() {
		return this.riesgoKupfer;
	}
	public void setRiesgoKupfer(String riesgoKupfer) {
		this.riesgoKupfer = riesgoKupfer;
	}
	
	
	String condicionRiesgoAprobada = new String("X");
	public String getCondicionRiesgoAprobada() {
		return condicionRiesgoAprobada;
	}
	
	Long montoProyecto = new Long (999999999);
	public Long getMontoProyecto() {
		return montoProyecto;
	}
	
	String conceptosInvolucrados[] = {"var. ej. Concepto 1", "var. ej. Concepto 2", "var. ej Concepto 3"};
	public String[] getConceptosInvolucrados() {
		return conceptosInvolucrados;
	}
	
	/****pdf bloqueo desbloqueo***/
	private String obsInicialDesbloqueo = new String ("var. ej observacion inicial desbloqueo");
	public String getObsInicialDesbloqueo() {
		return obsInicialDesbloqueo;
	}
	
	private String obsFinal = new String("var. ej. observacion final");
	public String getObsFinal() {
		return obsFinal;
	}
	
	/****pdf prorroga****/
	
	private String nroCheque = new String ("var. ej Cheque XXXXXX");
	public String getNroCheque() {
		return nroCheque;
	}
	
	private Long montoCheque = new Long (9999999);
	public Long getMontoCheque() {
		return montoCheque;
	}
	
	private Date fechaVencimientoActual = new Date();
	public Date getFechaVencimientoActual() {
		return fechaVencimientoActual;
	}
	
	private Date fechaVencimientoSolicitado = new Date();

	public Date getFechaVencimientoSolicitado() {
		return fechaVencimientoSolicitado;
	}
	
	
	
	
	/***PDF creacion DM****/

	private String ofVentas = new String ("var. Ejemplo of venta");
	public String getOfVentas() {
		return ofVentas;
	}
		
	private String zona = new String ("ejemplo Zona");
	public String getZona() {
		return zona;
	}
	
	private String lPrecio = new String();
	public String getlPrecio() {
		return lPrecio;
	}
	
	private String sector = new String("Sector");

	public String getSector() {
		return sector;
	}
	
	private String vendTelefono = new String("Ej Vend Fono");
	public String getVendTelefono() {
		return vendTelefono;
	}
	
	private String vendTerreno = new String("vend terreno");
	public String getVendTerreno() {
		return vendTerreno;
	}
	
	private String cobrador = new String("ej vend. terreno");
	public String getCobrador() {
		return cobrador;
	}
	
	private String condExp = new String("ej cond exp");
	public String getCondExp() {
		return condExp;
	}



	public List<ConceptoMontoDTO> getListaConceptosMontos() {
		return listaConceptosMontos;
	}



	public void setListaConceptosMontos(List<ConceptoMontoDTO> listaConceptosMontos) {
		this.listaConceptosMontos = listaConceptosMontos;
	}



	public long getMontoGeneralConceptoMonto() {
		return montoGeneralConceptoMonto;
	}



	public void setMontoGeneralConceptoMonto(long montoGeneralConceptoMonto) {
		this.montoGeneralConceptoMonto = montoGeneralConceptoMonto;
	}



	public List<CotPedDTO> getListaCotPedDTOs() {
		return listaCotPedDTOs;
	}



	public void setListaCotPedDTOs(List<CotPedDTO> listaCotPedDTOs) {
		this.listaCotPedDTOs = listaCotPedDTOs;
	}



	public Double getMontoTotal() {
		return montoTotal;
	}



	public void setMontoTotal(Double montoTotal) {
		this.montoTotal = montoTotal;
	}



	public Double getMontoTotalNeto() {
		return montoTotalNeto;
	}



	public void setMontoTotalNeto(Double montoTotalNeto) {
		this.montoTotalNeto = montoTotalNeto;
	}



	public Double getPorcentajeGlobal() {
		return porcentajeGlobal;
	}



	public void setPorcentajeGlobal(Double porcentajeGlobal) {
		this.porcentajeGlobal = porcentajeGlobal;
	}



	public boolean isHabilitaEnvioAseguro() {
		return habilitaEnvioAseguro;
	}



	public void setHabilitaEnvioAseguro(boolean habilitaEnvioAseguro) {
		this.habilitaEnvioAseguro = habilitaEnvioAseguro;
	}



	public String getUsuarioEmisor() {
		return usuarioEmisor;
	}



	public void setUsuarioEmisor(String usuarioEmisor) {
		this.usuarioEmisor = usuarioEmisor;
	}



	public List<SolicitudHitos> getListaHitos() {
		return listaHitos;
	}



	public void setListaHitos(List<SolicitudHitos> listaHitos) {
		this.listaHitos = listaHitos;
	}



	public List<SolicitudLogs> getListaLogs() {
		return listaLogs;
	}



	public void setListaLogs(List<SolicitudLogs> listaLogs) {
		this.listaLogs = listaLogs;
	}



	public List<SolicitudUsuarioDerivada> getListUsuariosDerivados() {
		return listUsuariosDerivados;
	}



	public void setListUsuariosDerivados(
			List<SolicitudUsuarioDerivada> listUsuariosDerivados) {
		this.listUsuariosDerivados = listUsuariosDerivados;
	}



	public LcredEstado getEstadoLogHitos() {
		return estadoLogHitos;
	}



	public void setEstadoLogHitos(LcredEstado estadoLogHitos) {
		this.estadoLogHitos = estadoLogHitos;
	}



	public LcredSolicitud getSolicitudLogHitos() {
		return solicitudLogHitos;
	}



	public void setSolicitudLogHitos(LcredSolicitud solicitudLogHitos) {
		this.solicitudLogHitos = solicitudLogHitos;
	}



	public List<SolicitudUsuarioCorreo> getListaUsuarioCorreoagregadosSel() {
		return listaUsuarioCorreoagregadosSel;
	}



	public void setListaUsuarioCorreoagregadosSel(
			List<SolicitudUsuarioCorreo> listaUsuarioCorreoagregadosSel) {
		this.listaUsuarioCorreoagregadosSel = listaUsuarioCorreoagregadosSel;
	}



	public List<SolicitudUsuarioCorreo> getListaUsuariosEspecialesPrincipal() {
		return listaUsuariosEspecialesPrincipal;
	}



	public void setListaUsuariosEspecialesPrincipal(
			List<SolicitudUsuarioCorreo> listaUsuariosEspecialesPrincipal) {
		this.listaUsuariosEspecialesPrincipal = listaUsuariosEspecialesPrincipal;
	}



	public Boolean getHabilitaSoloAprobacion() {
		return habilitaSoloAprobacion;
	}



	public void setHabilitaSoloAprobacion(Boolean habilitaSoloAprobacion) {
		this.habilitaSoloAprobacion = habilitaSoloAprobacion;
	}



	public SolicitudHitos getSolicitudHitos() {
		return solicitudHitos;
	}



	public void setSolicitudHitos(SolicitudHitos solicitudHitos) {
		this.solicitudHitos = solicitudHitos;
	}



	public List<DocumentoProrrogaDTO> getListaDoctoProrrogaAgregados() {
		return listaDoctoProrrogaAgregados;
	}



	public void setListaDoctoProrrogaAgregados(
			List<DocumentoProrrogaDTO> listaDoctoProrrogaAgregados) {
		this.listaDoctoProrrogaAgregados = listaDoctoProrrogaAgregados;
	}



	public List<LcredMotivoRechazo> getListaMotivosRechazosSeleccionado() {
		return listaMotivosRechazosSeleccionado;
	}



	public void setListaMotivosRechazosSeleccionado(
			List<LcredMotivoRechazo> listaMotivosRechazosSeleccionado) {
		this.listaMotivosRechazosSeleccionado = listaMotivosRechazosSeleccionado;
	}



	public String getTipoSolicitudCorreo() {
		return tipoSolicitudCorreo;
	}



	public void setTipoSolicitudCorreo(String tipoSolicitudCorreo) {
		this.tipoSolicitudCorreo = tipoSolicitudCorreo;
	}



	public SolicitudAntiguaDTO getSolicitudAntiguaDTO() {
		return solicitudAntiguaDTO;
	}



	public void setSolicitudAntiguaDTO(SolicitudAntiguaDTO solicitudAntiguaDTO) {
		this.solicitudAntiguaDTO = solicitudAntiguaDTO;
	}



	public Boolean getHabilitacionesBotonAprobadorAntiguas() {
		return habilitacionesBotonAprobadorAntiguas;
	}



	public void setHabilitacionesBotonAprobadorAntiguas(
			Boolean habilitacionesBotonAprobadorAntiguas) {
		this.habilitacionesBotonAprobadorAntiguas = habilitacionesBotonAprobadorAntiguas;
	}
	




	
	
	public String getUbicacion() {
		return ubicacion;
	}

	public void setUbicacion(String ubicacion) {
		this.ubicacion = ubicacion;
	}
	
	public List<String> getListaCodigoNegocio() {
		return listaCodigoNegocio;
	}
	public void setListaCodigoNegocio(List<String> listaCodigoNegocio) {
		this.listaCodigoNegocio = listaCodigoNegocio;
	}
	public List<String> getListaCodigoConcepto() {
		return listaCodigoConcepto;
	}
	public void setListaCodigoConcepto(List<String> listaCodigoConcepto) {
		this.listaCodigoConcepto = listaCodigoConcepto;
	}
	public List<SolicitudUsuarioCorreo> getListaSolicitudUsuarioCorresSessions() {
		return listaSolicitudUsuarioCorresSessions;
	}
	public void setListaSolicitudUsuarioCorresSessions(
			List<SolicitudUsuarioCorreo> listaSolicitudUsuarioCorresSessions) {
		this.listaSolicitudUsuarioCorresSessions = listaSolicitudUsuarioCorresSessions;
	}
	public List<ConceptosNegocio> getConceptosNegociosSessions() {
		return conceptosNegociosSessions;
	}
	public void setConceptosNegociosSessions(
			List<ConceptosNegocio> conceptosNegociosSessions) {
		this.conceptosNegociosSessions = conceptosNegociosSessions;
	}
	public List<LcredSolicitudObservaciones> getListaObservacionesPdf() {
		return listaObservacionesPdf;
	}
	public void setListaObservacionesPdf(
			List<LcredSolicitudObservaciones> listaObservacionesPdf) {
		this.listaObservacionesPdf = listaObservacionesPdf;
	}
	public LcredSolicitudVtapuntual getVenta() {
		return venta;
	}
	public void setVenta(LcredSolicitudVtapuntual venta) {
		this.venta = venta;
	}
	public List<SolicitudMotivoRechazo> getListaMotivosRechazoPdf() {
		return listaMotivosRechazoPdf;
	}
	public void setListaMotivosRechazoPdf(
			List<SolicitudMotivoRechazo> listaMotivosRechazoPdf) {
		this.listaMotivosRechazoPdf = listaMotivosRechazoPdf;
	}
	public String getEnvioToNoEnvioCorreo() {
		return envioToNoEnvioCorreo;
	}
	public void setEnvioToNoEnvioCorreo(String envioToNoEnvioCorreo) {
		this.envioToNoEnvioCorreo = envioToNoEnvioCorreo;
	}
	public boolean isHabilitacionEnvioCorreo() {
		return habilitacionEnvioCorreo;
	}
	public void setHabilitacionEnvioCorreo(boolean habilitacionEnvioCorreo) {
		this.habilitacionEnvioCorreo = habilitacionEnvioCorreo;
	}
	public boolean isCambiarEnSap() {
		return cambiarEnSap;
	}
	public void setCambiarEnSap(boolean cambiarEnSap) {
		this.cambiarEnSap = cambiarEnSap;
	}
	public List<SolicitudMotivoRechazo> getListaRechazosSolicitudesNuevas() {
		return listaRechazosSolicitudesNuevas;
	}
	public void setListaRechazosSolicitudesNuevas(
			List<SolicitudMotivoRechazo> listaRechazosSolicitudesNuevas) {
		this.listaRechazosSolicitudesNuevas = listaRechazosSolicitudesNuevas;
	}
	public String getObservacionesFinalesModal() {
		return observacionesFinalesModal;
	}
	public void setObservacionesFinalesModal(String observacionesFinalesModal) {
		this.observacionesFinalesModal = observacionesFinalesModal;
	}
	
	public Boolean getWvarEnviaCorreo() {
		return wvarEnviaCorreo;
	}
	public void setWvarEnviaCorreo(Boolean wvarEnviaCorreo) {
		this.wvarEnviaCorreo = wvarEnviaCorreo;
	}
	
	public boolean habilitarCheckEnvio(){
		return usuarioCargoAux.getAdministrador();
	}
	public String getNegocioPdf() {
		return negocioPdf;
	}
	public void setNegocioPdf(String negocioPdf) {
		this.negocioPdf = negocioPdf;
	}
	public LcredSolicitudOtras getSolicitudOtra() {
		return solicitudOtra;
	}
	public void setSolicitudOtra(LcredSolicitudOtras solicitudOtra) {
		this.solicitudOtra = solicitudOtra;
	}
	public Boolean getWvarActualizarSap() {
		return wvarActualizarSap;
	}
	public void setWvarActualizarSap(Boolean wvarActualizarSap) {
		this.wvarActualizarSap = wvarActualizarSap;
	}
	public String getEstadoSolicitudAnalisisAprobacion() {
		return estadoSolicitudAnalisisAprobacion;
	}
	public void setEstadoSolicitudAnalisisAprobacion(
			String estadoSolicitudAnalisisAprobacion) {
		this.estadoSolicitudAnalisisAprobacion = estadoSolicitudAnalisisAprobacion;
	}
	public String getTituloObservacion() {
		return tituloObservacion;
	}
	public void setTituloObservacion(String tituloObservacion) {
		this.tituloObservacion = tituloObservacion;
	}
	public String getObservacionesAutirzador() {
		return observacionesAutirzador;
	}
	public void setObservacionesAutirzador(String observacionesAutirzador) {
		this.observacionesAutirzador = observacionesAutirzador;
	}

	public Boolean getHabilitaBotonApruebaToRechazarAdmin() {
		return habilitaBotonApruebaToRechazarAdmin;
	}

	public void setHabilitaBotonApruebaToRechazarAdmin(
			Boolean habilitaBotonApruebaToRechazarAdmin) {
		this.habilitaBotonApruebaToRechazarAdmin = habilitaBotonApruebaToRechazarAdmin;
	}

	public UsuarioCargo getUsuarioCargoLogueado() {
		return usuarioCargoLogueado;
	}

	public void setUsuarioCargoLogueado(UsuarioCargo usuarioCargoLogueado) {
		this.usuarioCargoLogueado = usuarioCargoLogueado;
	}

	public Long getMontoActualCuentaCorriente() {
		return montoActualCuentaCorriente;
	}

	public void setMontoActualCuentaCorriente(Long montoActualCuentaCorriente) {
		this.montoActualCuentaCorriente = montoActualCuentaCorriente;
	}

	public String getTipoSolicitudCodigo() {
		return tipoSolicitudCodigo;
	}

	public void setTipoSolicitudCodigo(String tipoSolicitudCodigo) {
		this.tipoSolicitudCodigo = tipoSolicitudCodigo;
	}
	
	
	
	
}
