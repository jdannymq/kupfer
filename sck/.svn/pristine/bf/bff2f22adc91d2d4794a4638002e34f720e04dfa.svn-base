package org.domain.sck.session.action;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.EntityManager;

import org.domain.sck.base.GlobalHitosLogdService;
import org.domain.sck.dto.CPagoDTO;
import org.domain.sck.dto.ConceptoUsuarioDTO;
import org.domain.sck.dto.ExpoRiesgoKhDTO;
import org.domain.sck.dto.NegocioUsuarioDTO;
import org.domain.sck.dto.SolicitudDTO;
import org.domain.sck.dto.SucursalesUsuarioDTO;
import org.domain.sck.dto.UsuarioIngresoDTO;
import org.domain.sck.dto.UsuarioSegurDTO;
import org.domain.sck.dto.ZonaUsuarioDTO;
import org.domain.sck.entity.CanalUsuarioCargo;
import org.domain.sck.entity.Estados;
import org.domain.sck.entity.LcredCargos;
import org.domain.sck.entity.LcredEstado;
import org.domain.sck.entity.LcredPerfiles;
import org.domain.sck.entity.LcredSolicitud;
import org.domain.sck.entity.LcredSolicitudObservaciones;
import org.domain.sck.entity.LcredSolicitudObservacionesId;
import org.domain.sck.entity.LcredUsuarioNivelEnc;
import org.domain.sck.entity.PerfilFuncionCanal;
import org.domain.sck.entity.SolicitudHitos;
import org.domain.sck.entity.SolicitudLogs;
import org.domain.sck.entity.SolicitudUsuarioCorreo;
import org.domain.sck.entity.SolicitudUsuarioDerivada;
import org.domain.sck.entity.Sucursal;
import org.domain.sck.entity.UsuarioCargo;
import org.domain.sck.entity.UsuarioPerfil;
import org.domain.sck.entity.Usuariosegur;
import org.domain.sck.entity.ZonaSucursalNegocioConcepto;
import org.domain.sck.entity.emuns.ConceptosType;
import org.domain.sck.entity.emuns.FuncionesType;
import org.domain.sck.entity.emuns.TipoCuentasKupferType;
import org.domain.sck.session.service.intranetsap.IntranetSapService;
import org.domain.sck.session.service.scoring.ScoringService;
import org.jboss.seam.ScopeType;
import org.jboss.seam.annotations.Create;
import org.jboss.seam.annotations.Destroy;
import org.jboss.seam.annotations.In;
import org.jboss.seam.annotations.Logger;
import org.jboss.seam.annotations.Name;
import org.jboss.seam.annotations.Scope;
import org.jboss.seam.annotations.intercept.BypassInterceptors;
import org.jboss.seam.faces.FacesMessages;
import org.jboss.seam.international.StatusMessage.Severity;
import org.jboss.seam.log.Log;


@Name("liberarSolicitudEnviadaAprobacionAction")
@Scope(ScopeType.CONVERSATION)
public class LiberarSolicitudEnviadaAprobacionAction {
	

	@Logger
	Log log;

	@In(value="#{entityManager}")
	EntityManager entityManager;
	
	
	@In IntranetSapService intranetSapService;
	
	@In ScoringService scoringService;
	
	@In GlobalHitosLogdService globalHitosLogdService;
	
	
	@In(value="#{identity.lcredUsuarioNivelEnc}", scope = ScopeType.SESSION)
	private LcredUsuarioNivelEnc lcredUsuarioNivelEnc;
	
	@In(value="#{identity.usuarioSegur}", scope = ScopeType.SESSION)
	private UsuarioSegurDTO usuarioSegur;
	
	
	private List<Usuariosegur> listaUsuarios;
	private List<SolicitudDTO> listaSolicitudesDto;
	private List<SolicitudDTO> listaSolicitudesDtoAnalisis;
	private List<Sucursal> listaSucursals;
	private List<CPagoDTO> listaCPagoDTOs;
	private List<LcredEstado> listaEstados;


	private LcredEstado estado;
	
	@Create
	public void init(){
		try{
		
			if(lcredUsuarioNivelEnc != null){
				sacarUsuarios();	
			    sacarSucursales();
			    sacarCPago();
			    sacarEstadosSolicitudes();
			    sacarSolicitudes();
			    sacarSolicitudesAnalisis();
			}		    		

 	   }catch (Exception e) {
		log.error("error al sacar las solictudes de usuario logeado #0", e.getMessage());
	   }
	
	}
	
	@SuppressWarnings("unchecked")
	public void sacarSolicitudes(){
		Sucursal suc = null;
		try{
			
			   List<LcredSolicitud> listaSolictudIngresdas = (List<LcredSolicitud>)entityManager
                       .createQuery("Select s from LcredSolicitud s " +
                       		" Where  s.estado=:estado " +
                       		" order by s.id.numSolicitud desc" )
                       .setParameter("estado","SA")
                       .getResultList();			
			
			
			
			 if(listaSolictudIngresdas != null){  
				 listaSolicitudesDto = new ArrayList<SolicitudDTO>(0);
				 for(LcredSolicitud  sol : listaSolictudIngresdas){
					 List<SolicitudUsuarioDerivada> lista = sacarSolicitudUsuarioDerivada(sol.getId().getNumSolicitud());
					 
					 if(lista != null && lista.size() > 0 ){
						 SolicitudDTO nuevo = new SolicitudDTO();
						 nuevo.setListaDerivados(lista);
						 nuevo.setIdSolictud(sol.getId().getNumSolicitud());
						 nuevo.setRut(sol.getRutCliente()); 
						 nuevo.setRazonSocial(sol.getNomCliente()); 
						 nuevo.setEmisor(sol.getCodEmisor());
						 nuevo.setDespTipoSolictud(sol.getSubTiposol());
						 nuevo.setFechaSalida(sol.getFecSalida());	
						 nuevo.setUsuarioProceso(sol.getUsuarioActual());
						 nuevo.setTipoSolicitud(sol.getTipTiposol());
						 nuevo.setCanal(sol.getCanal());
						 
						 
						 if(sol.getId().getFecSolicitud() != null && sol.getHraSolicitud() != null){
							  
							 /*rescatar la fecha */
							  SimpleDateFormat sdf= new SimpleDateFormat("dd/MM/yyyy");
							  String fecha = sdf.format(sol.getId().getFecSolicitud());
	
							 /*rescatar la hora */
							  SimpleDateFormat sdh= new SimpleDateFormat("HH:mm");
							  String hora = sdh.format(sol.getHraSolicitud());
							  
							  /*fecha y hora*/
							  log.debug(" Fecha String:"+ fecha);
							  log.debug(" hora String :"+ hora );
							  
							  DateFormat formatoFecha = new SimpleDateFormat("dd/MM/yyyy HH:mm");
							  try {
								  Date d = formatoFecha.parse(fecha+" "+hora);
								  nuevo.setFechaEmision(d); 
								  nuevo.setHoraEmision(sol.getHraSolicitud());
							  }catch (Exception e) {
							   throw new Exception(e);
							  }						  
						}
						 
						if(sol.getEstado() != null){
							LcredEstado estado = obtenerObjetoLcredEstado(sol.getEstado());
							if(estado != null){
								nuevo.setEstado(estado.getDesEstado());
							}
	
							if(sol.getEstado().equals("I")){
								LcredPerfiles perfil = scoringService.obtenerPerfil("3");
								if(perfil != null){
									nuevo.setProceso(perfil.getDesPerfil());
								}
							}
						}
						
						if(sol.getSucursalEmisor() != null){
							   log.debug(" codigo de sucursal  :"+ sol.getSucursalEmisor());
							   suc = obtenerObjetoSucursal(sol.getSucursalEmisor());
							   if(suc != null){
								   nuevo.setSucursal(suc.getDescripcion()); 
							   }else{
								   nuevo.setSucursal(sol.getSucursalEmisor());
							   }						
							
						}
						
						if(sol.getConPago()  != null){
							   log.debug("condicion de pago  :"+ sol.getConPago());
							   CPagoDTO obj = obtenerObjetoCPago(sol.getConPago());
							   if(obj != null){
								   nuevo.setCondicionPago(obj.getDescripcion()); 
							   }else{
								   nuevo.setCondicionPago(sol.getConPago()); 
							   }
							
						}
						 
						if(sol.getMontoAsegurado() != null){
							nuevo.setMontoAsegurado(sol.getMontoAsegurado().doubleValue());
						}else{
							nuevo.setMontoAsegurado((double) 0);
						}
						 
						if(sol.getMonto() != null){
							nuevo.setMonto(sol.getMonto().doubleValue());
						}else{
							nuevo.setMonto((double) 0);
						}
							
						if(sol.getRiesgoKupfer() != null){
							nuevo.setMontoRiegoKupfer(sol.getRiesgoKupfer().doubleValue());
						}else{
							nuevo.setMontoRiegoKupfer((double) 0);
						}
						
						if(sol.getEvaluar() != null){
							nuevo.setEvaluar(sol.getEvaluar());
						}else{
							nuevo.setEvaluar(false);
						}					
						
						listaSolicitudesDto.add(nuevo);
						nuevo = null;
						lista=null;
					}
				 }
			   } 			
		}catch (Exception e) {
			log.error("Error, al sacar los solictudes pendiente de liberar. #0", e.getMessage());
		}
		
		
	}
	
	@SuppressWarnings("unchecked")
	public void sacarSolicitudesAnalisis(){
		Sucursal suc = null;
		try{
			
			   List<LcredSolicitud> listaSolictudIngresdas = (List<LcredSolicitud>)entityManager
                       .createQuery("Select s from LcredSolicitud s " +
                       		" Where  s.estado=:estado " +
                       		" order by s.id.numSolicitud desc" )
                       .setParameter("estado","B")
                       .getResultList();			
			
			
			
			 if(listaSolictudIngresdas != null){  
				 listaSolicitudesDtoAnalisis = new ArrayList<SolicitudDTO>(0);
				 for(LcredSolicitud  sol : listaSolictudIngresdas){
					 List<SolicitudUsuarioDerivada> lista = sacarSolicitudUsuarioDerivadaAnalisis(sol.getId().getNumSolicitud());
					 
					 if(lista != null && lista.size() > 0 ){
						 SolicitudDTO nuevo = new SolicitudDTO();
						 nuevo.setListaDerivados(lista);
						 nuevo.setIdSolictud(sol.getId().getNumSolicitud());
						 nuevo.setRut(sol.getRutCliente()); 
						 nuevo.setRazonSocial(sol.getNomCliente()); 
						 nuevo.setEmisor(sol.getCodEmisor());
						 nuevo.setDespTipoSolictud(sol.getSubTiposol());
						 nuevo.setFechaSalida(sol.getFecSalida());	
						 nuevo.setUsuarioProceso(sol.getUsuarioActual());
						 nuevo.setTipoSolicitud(sol.getTipTiposol());
						 nuevo.setCanal(sol.getCanal());
						 
						 
						 if(sol.getId().getFecSolicitud() != null && sol.getHraSolicitud() != null){
							  
							 /*rescatar la fecha */
							  SimpleDateFormat sdf= new SimpleDateFormat("dd/MM/yyyy");
							  String fecha = sdf.format(sol.getId().getFecSolicitud());
	
							 /*rescatar la hora */
							  SimpleDateFormat sdh= new SimpleDateFormat("HH:mm");
							  String hora = sdh.format(sol.getHraSolicitud());
							  
							  /*fecha y hora*/
							  log.debug(" Fecha String:"+ fecha);
							  log.debug(" hora String :"+ hora );
							  
							  DateFormat formatoFecha = new SimpleDateFormat("dd/MM/yyyy HH:mm");
							  try {
								  Date d = formatoFecha.parse(fecha+" "+hora);
								  nuevo.setFechaEmision(d); 
								  nuevo.setHoraEmision(sol.getHraSolicitud());
							  }catch (Exception e) {
							   throw new Exception(e);
							  }						  
						}
						 
						if(sol.getEstado() != null){
							LcredEstado estado = obtenerObjetoLcredEstado(sol.getEstado());
							if(estado != null){
								nuevo.setEstado(estado.getDesEstado());
							}
	
							if(sol.getEstado().equals("I")){
								LcredPerfiles perfil = scoringService.obtenerPerfil("3");
								if(perfil != null){
									nuevo.setProceso(perfil.getDesPerfil());
								}
							}
						}
						
						if(sol.getSucursalEmisor() != null){
							   log.debug(" codigo de sucursal  :"+ sol.getSucursalEmisor());
							   suc = obtenerObjetoSucursal(sol.getSucursalEmisor());
							   if(suc != null){
								   nuevo.setSucursal(suc.getDescripcion()); 
							   }else{
								   nuevo.setSucursal(sol.getSucursalEmisor());
							   }						
							
						}
						
						if(sol.getConPago()  != null){
							   log.debug("condicion de pago  :"+ sol.getConPago());
							   CPagoDTO obj = obtenerObjetoCPago(sol.getConPago());
							   if(obj != null){
								   nuevo.setCondicionPago(obj.getDescripcion()); 
							   }else{
								   nuevo.setCondicionPago(sol.getConPago()); 
							   }
							
						}
						 
						if(sol.getMontoAsegurado() != null){
							nuevo.setMontoAsegurado(sol.getMontoAsegurado().doubleValue());
						}else{
							nuevo.setMontoAsegurado((double) 0);
						}
						 
						if(sol.getMonto() != null){
							nuevo.setMonto(sol.getMonto().doubleValue());
						}else{
							nuevo.setMonto((double) 0);
						}
							
						if(sol.getRiesgoKupfer() != null){
							nuevo.setMontoRiegoKupfer(sol.getRiesgoKupfer().doubleValue());
						}else{
							nuevo.setMontoRiegoKupfer((double) 0);
						}
						
						if(sol.getEvaluar() != null){
							nuevo.setEvaluar(sol.getEvaluar());
						}else{
							nuevo.setEvaluar(false);
						}					
						
						listaSolicitudesDtoAnalisis.add(nuevo);
						nuevo = null;
						lista=null;
					}
				 }
			   } 			
		}catch (Exception e) {
			log.error("Error, al sacar los solictudes pendiente de liberar. #0", e.getMessage());
		}
		
		
	}
	
	
	
	@SuppressWarnings("unchecked")
	public void sacarSucursales(){
		try{
			listaSucursals = (List<Sucursal>)entityManager.createQuery("select suc from Sucursal suc ").getResultList();
		}catch (Exception e) {
			log.error("Error, al sacar la lista de sucursales #0", e.getMessage());
		}		
	}
	public Sucursal obtenerObjetoSucursal(String codigo){
		Sucursal suc = null;
		if(listaSucursals != null && codigo != null){
			for(Sucursal s: listaSucursals){
				if(s.getCodigo().equals(codigo)){
					suc= s;
					break;
				}
			}
		}
		return suc;
	}

	public void sacarCPago(){
		try{
			listaCPagoDTOs = intranetSapService.getCondicionPago();
		}catch (Exception e) {
			log.error("Error, al sacar la lista de condiciones de pagos #0", e.getMessage());
		}		
	}
	
	public CPagoDTO obtenerObjetoCPago(String codigo){
		CPagoDTO obj = null;
		if(listaCPagoDTOs != null && codigo != null){
			for(CPagoDTO s: listaCPagoDTOs){
				if(s.getCodigo().equals(codigo)){
					obj= s;
					break;
				}
			}
		}
		return obj;
	}

	public void sacarEstadosSolicitudes(){
		try{
			listaEstados = scoringService.obtenerEstados();
		}catch (Exception e) {
			log.error("Error, al sacar la lista de estados de pagos #0", e.getMessage());
		}		
	}
	
	public LcredEstado obtenerObjetoLcredEstado(String codigo){
		LcredEstado obj = null;
		if(listaEstados != null && codigo != null){
			for(LcredEstado s: listaEstados){
				if(s.getCodEstado().equals(codigo)){
					obj= s;
					break;
				}
			}
		}
		return obj;
	}
	
	@SuppressWarnings("unchecked")
	public List<SolicitudUsuarioDerivada> sacarSolicitudUsuarioDerivada(Long idSolicitud){
		List<SolicitudUsuarioDerivada> lista = null;
		try{
			lista = (List<SolicitudUsuarioDerivada>)
					entityManager.createQuery("select sud " +
							"	from SolicitudUsuarioDerivada sud" +
							" 	where sud.codEstadoDerivada=:codEstado " +
							//"	and sud.confirmacionObligatoria=1 " +
							"   and sud.idSolicitud=:solAux" +
							"   and sud.confirmacion is null ")
					.setParameter("codEstado","SA")
					.setParameter("solAux",idSolicitud)
					.getResultList();
			if(lista != null && lista.size() > 0){
				log.debug("cantidad #0", lista.size());
			}
		}catch (Exception e) {
			log.error("Error, al sacar la lista de sucursales #0", e.getMessage());
		}	
		return lista;
	}	
	
	@SuppressWarnings("unchecked")
	public List<SolicitudUsuarioDerivada> sacarSolicitudUsuarioDerivadaAnalisis(Long idSolicitud){
		List<SolicitudUsuarioDerivada> lista = null;
		try{
			lista = (List<SolicitudUsuarioDerivada>)
					entityManager.createQuery("select sud " +
							"	from SolicitudUsuarioDerivada sud" +
							" 	where sud.codEstadoDerivada=:codEstado " +
							//"	and sud.confirmacionObligatoria=1 " +
							"   and sud.idSolicitud=:solAux" +
							"   and sud.confirmacion is null ")
					.setParameter("codEstado","B")
					.setParameter("solAux",idSolicitud)
					.getResultList();
			if(lista != null && lista.size() > 0){
				log.debug("cantidad #0", lista.size());
			}
		}catch (Exception e) {
			log.error("Error, al sacar la lista de sucursales #0", e.getMessage());
		}	
		return lista;
	}
	
	
	public void sacarLogSolicitud(SolicitudDTO sol){
		try{
			if(sol != null){
				globalHitosLogdService.setSolicitud(sol);
				List<SolicitudLogs> listaSolicitudesLogs = scoringService.getSolicitudLogs(sol.getIdSolictud());
				if(listaSolicitudesLogs != null){
					globalHitosLogdService.setListaLogs(listaSolicitudesLogs);
				}
			}
		}catch (Exception e) {
			log.error("Error, al desplegar los datos de la solicitud", e.getMessage());
		}
		
		
	}
	public void sacarLogHitos(SolicitudDTO sol){
		try{
			if(sol != null){
				globalHitosLogdService.setSolicitud(sol);

				List<SolicitudHitos> listaSolicitudesHitos = scoringService.getSolicitudHitos(sol.getIdSolictud());
				if(listaSolicitudesHitos != null){
					globalHitosLogdService.setListaHitos(listaSolicitudesHitos);
				}
			}
			
		}catch (Exception e) {
			log.error("Error, al desplegar los datos de la solicitud", e.getMessage());
		}
		
	}
	public void liberarSolicitud(Long idSolicitud){
		try{
			if(idSolicitud != null){
				entityManager.createQuery("update LcredSolicitud set evaluar=0 where id.numSolicitud=:sol").setParameter("sol", idSolicitud).executeUpdate();
				entityManager.flush();
				
				String codigo = "L";
				Estados estadoLogs = scoringService.obtenerEstados(codigo.charAt(0));
				StringBuffer cadena = new StringBuffer();
				boolean exito = false;
				if(estadoLogs != null){
					cadena.append("Se libera la solicitud que quedo tomada.");
					exito = scoringService.persistSolicitudLogs(idSolicitud, usuarioSegur.getAlias(), new Date(), String.valueOf(estadoLogs.getCodEstado()), estadoLogs.getDesEstado(), cadena.toString());
				}else{
					cadena.append("Se da aprobación la solicitud.");
					exito = scoringService.persistSolicitudLogs(idSolicitud, usuarioSegur.getAlias(), new Date(), "", "", cadena.toString());
				}
						
				log.debug("verificacion si inserto registro logs #0", exito);
				
			}
			sacarSolicitudes();
		}catch (Exception e) {
			log.error("Error al libar la solicitud sleccionada #0", e.getMessage());
		}
		
	}
	
	public void reAsignarSolicitudDerivadaUsuario(SolicitudDTO solicitudDTO){
		try{
			if(solicitudDTO != null){
				
				if(solicitudDTO.getDerivado() == null){
					FacesMessages.instance().add(Severity.WARN,"Debe seleccionar al usuario aprobador a reemplazar.");
					return;				
				}
				if(solicitudDTO.getUsuarioAsignar() == null){
					FacesMessages.instance().add(Severity.WARN,"Debe seleccionar el usuario a reasignar.");
					return;				
				}	
				
				SolicitudUsuarioDerivada sud = solicitudDTO.getDerivado();
				if(sud != null){
					SolicitudUsuarioDerivada sudNueva = new SolicitudUsuarioDerivada();
					Long numero = scoringService.getSolicitudUsuarioDerivacionMaximo();
					sudNueva.setSystemId(numero);
					sudNueva.setIdSolicitud(sud.getIdSolicitud());
					sudNueva.setEstado(sud.getEstado());
					sudNueva.setFechaHora(new Date());
					sudNueva.setUsuario(solicitudDTO.getUsuarioAsignar());
					sudNueva.setConfirmacionObligatoria(true);
					sudNueva.setConfirmacion(null);
					sudNueva.setCodEstadoDerivada(sud.getCodEstadoDerivada());
					boolean exitoingreso = scoringService.persitSolicitudUsuarioDerivacion(sudNueva);
					log.debug(exitoingreso);

					
					sud.setConfirmacionObligatoria(false);
					sud.setConfirmacion(true);
					entityManager.merge(sud);
					entityManager.flush();
					entityManager.refresh(sud);
					
					
					/*se agrega la observaciones final de una aprobacion final */
					LcredSolicitudObservacionesId id = new LcredSolicitudObservacionesId();
					Long correlativo = scoringService.obtenerCorrelativoObservaciones(solicitudDTO.getIdSolictud());
					if(correlativo != null){
						id.setCorrelativo(correlativo);
						id.setFecha(new Date());
						id.setHora(new Date());
						id.setNumSolicitud(solicitudDTO.getIdSolictud());
						id.setTipoSol(solicitudDTO.getTipoSolicitud());
						id.setObservacion("Se libera la solicitud asignada al usuario "+ solicitudDTO.getDerivado().getUsuario().getNombre() +" y se reasigna al usuario "+solicitudDTO.getUsuarioAsignar().getNombre());
						id.setUsuario(usuarioSegur.getAlias());
						LcredSolicitudObservaciones obser = new LcredSolicitudObservaciones();
						obser.setId(id);
						scoringService.persistSolicitudObservaciones(obser);
					}
				}
				
				String codigo = "L";
				Estados estadoLogs = scoringService.obtenerEstados(codigo.charAt(0));
				StringBuffer cadena = new StringBuffer();
				boolean exito = false;
				if(estadoLogs != null){
					cadena.append("Se libera la solicitud y se reasigna a otro usuario.");
					exito = scoringService.persistSolicitudLogs(solicitudDTO.getIdSolictud(), usuarioSegur.getAlias(), new Date(), String.valueOf(estadoLogs.getCodEstado()), estadoLogs.getDesEstado(), cadena.toString());
				}else{
					cadena.append("Se libera la solicitud y se reasigna a otro usuario.");
					exito = scoringService.persistSolicitudLogs(solicitudDTO.getIdSolictud(), usuarioSegur.getAlias(), new Date(), "", "", cadena.toString());
				}
				log.debug("verificacion si inserto registro logs #0", exito);
			}
			this.listaSolicitudesDto = new ArrayList<SolicitudDTO>(0);
			sacarSolicitudes();
			sacarSolicitudesAnalisis();
		}catch (Exception e) {
			log.error("Error al libar la solicitud sleccionada #0", e.getMessage());
		}
		
	}
	
	@SuppressWarnings("unchecked")
	public void sacarUsuarios(){
    	try{
    		List<Usuariosegur> lista = (List<Usuariosegur>)entityManager
				.createQuery("select u from Usuariosegur u where u.alias <> null and u.nombre <> null  order by u.nombre")
				.getResultList();
    		
    		if(lista != null){
    			listaUsuarios = new ArrayList<Usuariosegur>(0);
    			for(Usuariosegur usuario : lista){
    				if(usuario != null && !usuario.getAlias().equals("") && !usuario.getAlias().equals("xxxx") && !usuario.getAlias().equals("xxxxxx") ){
    					if(usuario.getNombre() != null && !usuario.getNombre().equals("")){
	    					if(!listaUsuarios.contains(usuario)){
	    						listaUsuarios.add(usuario);
	    					}
    					}
    				}
    			}
    		}
    	}catch (Exception e) {
    		log.error("Error, al sacar los usuario y/o seleccionado  #0 ", e.getMessage());
    	}	
		
	}
	
	
	
	
	
	
	/*gets y Sets*/


	public List<SolicitudDTO> getListaSolicitudesDto() {
		return listaSolicitudesDto;
	}

	public void setListaSolicitudesDto(List<SolicitudDTO> listaSolicitudesDto) {
		this.listaSolicitudesDto = listaSolicitudesDto;
	}

	public List<CPagoDTO> getListaCPagoDTOs() {
		return listaCPagoDTOs;
	}

	public void setListaCPagoDTOs(List<CPagoDTO> listaCPagoDTOs) {
		this.listaCPagoDTOs = listaCPagoDTOs;
	}


	public LcredEstado getEstado() {
		return estado;
	}

	public void setEstado(LcredEstado estado) {
		this.estado = estado;
	}

	public void obtenerObjetoSolicitudDerivadoUsuario(SolicitudDTO objeto){
		if(objeto != null){
			if(objeto.getDerivado() != null){
				log.debug("el Objeto seleccionado el usuario es #0", objeto.getDerivado().getUsuario().getNombre());
			}
		}
		
	}
	public void obtenerObjetoUsuario(SolicitudDTO objeto){
		if(objeto != null){
			if(objeto.getUsuarioAsignar() != null){
				log.debug("el Objeto seleccionado el usuario a asignar es #0", objeto.getUsuarioAsignar().getNombre());
			}
		}
		
	}
	
	public List<Usuariosegur> getListaUsuarios() {
		return listaUsuarios;
	}

	public void setListaUsuarios(List<Usuariosegur> listaUsuarios) {
		this.listaUsuarios = listaUsuarios;
	}

	public List<SolicitudDTO> getListaSolicitudesDtoAnalisis() {
		return listaSolicitudesDtoAnalisis;
	}

	public void setListaSolicitudesDtoAnalisis(
			List<SolicitudDTO> listaSolicitudesDtoAnalisis) {
		this.listaSolicitudesDtoAnalisis = listaSolicitudesDtoAnalisis;
	}
	
	

}
